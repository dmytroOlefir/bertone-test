/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@barba/core/dist/barba.umd.js":
/*!****************************************************!*\
  !*** ./node_modules/@barba/core/dist/barba.umd.js ***!
  \****************************************************/
/***/ (function(module) {

!function(t,n){ true?module.exports=n():0}(this,(function(){function t(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}function n(n,r,e){return r&&t(n.prototype,r),e&&t(n,e),n}function r(){return(r=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(t[e]=r[e])}return t}).apply(this,arguments)}function e(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n}function i(t){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function o(t,n){return(o=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function u(t,n,r){return(u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}()?Reflect.construct:function(t,n,r){var e=[null];e.push.apply(e,n);var i=new(Function.bind.apply(t,e));return r&&o(i,r.prototype),i}).apply(null,arguments)}function f(t){var n="function"==typeof Map?new Map:void 0;return(f=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,r)}function r(){return u(t,arguments,i(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),o(r,t)})(t)}function s(t,n){try{var r=t()}catch(t){return n(t)}return r&&r.then?r.then(void 0,n):r}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var c,a="2.9.7",h=function(){};!function(t){t[t.off=0]="off",t[t.error=1]="error",t[t.warning=2]="warning",t[t.info=3]="info",t[t.debug=4]="debug"}(c||(c={}));var v=c.off,l=function(){function t(t){this.t=t}t.getLevel=function(){return v},t.setLevel=function(t){return v=c[t]};var n=t.prototype;return n.error=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];this.i(console.error,c.error,n)},n.warn=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];this.i(console.warn,c.warning,n)},n.info=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];this.i(console.info,c.info,n)},n.debug=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];this.i(console.log,c.debug,n)},n.i=function(n,r,e){r<=t.getLevel()&&n.apply(console,["["+this.t+"] "].concat(e))},t}(),d=O,m=E,p=g,w=x,b=T,y="/",P=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");function g(t,n){for(var r,e=[],i=0,o=0,u="",f=n&&n.delimiter||y,s=n&&n.whitelist||void 0,c=!1;null!==(r=P.exec(t));){var a=r[0],h=r[1],v=r.index;if(u+=t.slice(o,v),o=v+a.length,h)u+=h[1],c=!0;else{var l="",d=r[2],m=r[3],p=r[4],w=r[5];if(!c&&u.length){var b=u.length-1,g=u[b];(!s||s.indexOf(g)>-1)&&(l=g,u=u.slice(0,b))}u&&(e.push(u),u="",c=!1);var E=m||p,x=l||f;e.push({name:d||i++,prefix:l,delimiter:x,optional:"?"===w||"*"===w,repeat:"+"===w||"*"===w,pattern:E?A(E):"[^"+k(x===f?x:x+f)+"]+?"})}}return(u||o<t.length)&&e.push(u+t.substr(o)),e}function E(t,n){return function(r,e){var i=t.exec(r);if(!i)return!1;for(var o=i[0],u=i.index,f={},s=e&&e.decode||decodeURIComponent,c=1;c<i.length;c++)if(void 0!==i[c]){var a=n[c-1];f[a.name]=a.repeat?i[c].split(a.delimiter).map((function(t){return s(t,a)})):s(i[c],a)}return{path:o,index:u,params:f}}}function x(t,n){for(var r=new Array(t.length),e=0;e<t.length;e++)"object"==typeof t[e]&&(r[e]=new RegExp("^(?:"+t[e].pattern+")$",R(n)));return function(n,e){for(var i="",o=e&&e.encode||encodeURIComponent,u=!e||!1!==e.validate,f=0;f<t.length;f++){var s=t[f];if("string"!=typeof s){var c,a=n?n[s.name]:void 0;if(Array.isArray(a)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but got array');if(0===a.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var h=0;h<a.length;h++){if(c=o(a[h],s),u&&!r[f].test(c))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'"');i+=(0===h?s.prefix:s.delimiter)+c}}else if("string"!=typeof a&&"number"!=typeof a&&"boolean"!=typeof a){if(!s.optional)throw new TypeError('Expected "'+s.name+'" to be '+(s.repeat?"an array":"a string"))}else{if(c=o(String(a),s),u&&!r[f].test(c))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but got "'+c+'"');i+=s.prefix+c}}else i+=s}return i}}function k(t){return t.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function A(t){return t.replace(/([=!:$/()])/g,"\\$1")}function R(t){return t&&t.sensitive?"":"i"}function T(t,n,r){for(var e=(r=r||{}).strict,i=!1!==r.start,o=!1!==r.end,u=r.delimiter||y,f=[].concat(r.endsWith||[]).map(k).concat("$").join("|"),s=i?"^":"",c=0;c<t.length;c++){var a=t[c];if("string"==typeof a)s+=k(a);else{var h=a.repeat?"(?:"+a.pattern+")(?:"+k(a.delimiter)+"(?:"+a.pattern+"))*":a.pattern;n&&n.push(a),s+=a.optional?a.prefix?"(?:"+k(a.prefix)+"("+h+"))?":"("+h+")?":k(a.prefix)+"("+h+")"}}if(o)e||(s+="(?:"+k(u)+")?"),s+="$"===f?"$":"(?="+f+")";else{var v=t[t.length-1],l="string"==typeof v?v[v.length-1]===u:void 0===v;e||(s+="(?:"+k(u)+"(?="+f+"))?"),l||(s+="(?="+k(u)+"|"+f+")")}return new RegExp(s,R(r))}function O(t,n,r){return t instanceof RegExp?function(t,n){if(!n)return t;var r=t.source.match(/\((?!\?)/g);if(r)for(var e=0;e<r.length;e++)n.push({name:e,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return t}(t,n):Array.isArray(t)?function(t,n,r){for(var e=[],i=0;i<t.length;i++)e.push(O(t[i],n,r).source);return new RegExp("(?:"+e.join("|")+")",R(r))}(t,n,r):function(t,n,r){return T(g(t,r),n,r)}(t,n,r)}d.match=function(t,n){var r=[];return E(O(t,r,n),r)},d.regexpToFunction=m,d.parse=p,d.compile=function(t,n){return x(g(t,n),n)},d.tokensToFunction=w,d.tokensToRegExp=b;var S={container:"container",history:"history",namespace:"namespace",prefix:"data-barba",prevent:"prevent",wrapper:"wrapper"},j=new(function(){function t(){this.o=S,this.u=new DOMParser}var n=t.prototype;return n.toString=function(t){return t.outerHTML},n.toDocument=function(t){return this.u.parseFromString(t,"text/html")},n.toElement=function(t){var n=document.createElement("div");return n.innerHTML=t,n},n.getHtml=function(t){return void 0===t&&(t=document),this.toString(t.documentElement)},n.getWrapper=function(t){return void 0===t&&(t=document),t.querySelector("["+this.o.prefix+'="'+this.o.wrapper+'"]')},n.getContainer=function(t){return void 0===t&&(t=document),t.querySelector("["+this.o.prefix+'="'+this.o.container+'"]')},n.removeContainer=function(t){document.body.contains(t)&&t.parentNode.removeChild(t)},n.addContainer=function(t,n){var r=this.getContainer();r?this.s(t,r):n.appendChild(t)},n.getNamespace=function(t){void 0===t&&(t=document);var n=t.querySelector("["+this.o.prefix+"-"+this.o.namespace+"]");return n?n.getAttribute(this.o.prefix+"-"+this.o.namespace):null},n.getHref=function(t){if(t.tagName&&"a"===t.tagName.toLowerCase()){if("string"==typeof t.href)return t.href;var n=t.getAttribute("href")||t.getAttribute("xlink:href");if(n)return this.resolveUrl(n.baseVal||n)}return null},n.resolveUrl=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var e=n.length;if(0===e)throw new Error("resolveUrl requires at least one argument; got none.");var i=document.createElement("base");if(i.href=arguments[0],1===e)return i.href;var o=document.getElementsByTagName("head")[0];o.insertBefore(i,o.firstChild);for(var u,f=document.createElement("a"),s=1;s<e;s++)f.href=arguments[s],i.href=u=f.href;return o.removeChild(i),u},n.s=function(t,n){n.parentNode.insertBefore(t,n.nextSibling)},t}()),M=new(function(){function t(){this.h=[],this.v=-1}var e=t.prototype;return e.init=function(t,n){this.l="barba";var r={ns:n,scroll:{x:window.scrollX,y:window.scrollY},url:t};this.h.push(r),this.v=0;var e={from:this.l,index:0,states:[].concat(this.h)};window.history&&window.history.replaceState(e,"",t)},e.change=function(t,n,r){if(r&&r.state){var e=r.state,i=e.index;n=this.m(this.v-i),this.replace(e.states),this.v=i}else this.add(t,n);return n},e.add=function(t,n){var r=this.size,e=this.p(n),i={ns:"tmp",scroll:{x:window.scrollX,y:window.scrollY},url:t};this.h.push(i),this.v=r;var o={from:this.l,index:r,states:[].concat(this.h)};switch(e){case"push":window.history&&window.history.pushState(o,"",t);break;case"replace":window.history&&window.history.replaceState(o,"",t)}},e.update=function(t,n){var e=n||this.v,i=r({},this.get(e),{},t);this.set(e,i)},e.remove=function(t){t?this.h.splice(t,1):this.h.pop(),this.v--},e.clear=function(){this.h=[],this.v=-1},e.replace=function(t){this.h=t},e.get=function(t){return this.h[t]},e.set=function(t,n){return this.h[t]=n},e.p=function(t){var n="push",r=t,e=S.prefix+"-"+S.history;return r.hasAttribute&&r.hasAttribute(e)&&(n=r.getAttribute(e)),n},e.m=function(t){return Math.abs(t)>1?t>0?"forward":"back":0===t?"popstate":t>0?"back":"forward"},n(t,[{key:"current",get:function(){return this.h[this.v]}},{key:"state",get:function(){return this.h[this.h.length-1]}},{key:"previous",get:function(){return this.v<1?null:this.h[this.v-1]}},{key:"size",get:function(){return this.h.length}}]),t}()),L=function(t,n){try{var r=function(){if(!n.next.html)return Promise.resolve(t).then((function(t){var r=n.next;if(t){var e=j.toElement(t);r.namespace=j.getNamespace(e),r.container=j.getContainer(e),r.html=t,M.update({ns:r.namespace});var i=j.toDocument(t);document.title=i.title}}))}();return Promise.resolve(r&&r.then?r.then((function(){})):void 0)}catch(t){return Promise.reject(t)}},$=d,_={__proto__:null,update:L,nextTick:function(){return new Promise((function(t){window.requestAnimationFrame(t)}))},pathToRegexp:$},q=function(){return window.location.origin},B=function(t){return void 0===t&&(t=window.location.href),U(t).port},U=function(t){var n,r=t.match(/:\d+/);if(null===r)/^http/.test(t)&&(n=80),/^https/.test(t)&&(n=443);else{var e=r[0].substring(1);n=parseInt(e,10)}var i,o=t.replace(q(),""),u={},f=o.indexOf("#");f>=0&&(i=o.slice(f+1),o=o.slice(0,f));var s=o.indexOf("?");return s>=0&&(u=D(o.slice(s+1)),o=o.slice(0,s)),{hash:i,path:o,port:n,query:u}},D=function(t){return t.split("&").reduce((function(t,n){var r=n.split("=");return t[r[0]]=r[1],t}),{})},F=function(t){return void 0===t&&(t=window.location.href),t.replace(/(\/#.*|\/|#.*)$/,"")},H={__proto__:null,getHref:function(){return window.location.href},getOrigin:q,getPort:B,getPath:function(t){return void 0===t&&(t=window.location.href),U(t).path},parse:U,parseQuery:D,clean:F};function I(t,n,r){return void 0===n&&(n=2e3),new Promise((function(e,i){var o=new XMLHttpRequest;o.onreadystatechange=function(){if(o.readyState===XMLHttpRequest.DONE)if(200===o.status)e(o.responseText);else if(o.status){var n={status:o.status,statusText:o.statusText};r(t,n),i(n)}},o.ontimeout=function(){var e=new Error("Timeout error ["+n+"]");r(t,e),i(e)},o.onerror=function(){var n=new Error("Fetch error");r(t,n),i(n)},o.open("GET",t),o.timeout=n,o.setRequestHeader("Accept","text/html,application/xhtml+xml,application/xml"),o.setRequestHeader("x-barba","yes"),o.send()}))}var C=function(t){return!!t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof t.then};function N(t,n){return void 0===n&&(n={}),function(){for(var r=arguments.length,e=new Array(r),i=0;i<r;i++)e[i]=arguments[i];var o=!1,u=new Promise((function(r,i){n.async=function(){return o=!0,function(t,n){t?i(t):r(n)}};var u=t.apply(n,e);o||(C(u)?u.then(r,i):r(u))}));return u}}var X=new(function(t){function n(){var n;return(n=t.call(this)||this).logger=new l("@barba/core"),n.all=["ready","page","reset","currentAdded","currentRemoved","nextAdded","nextRemoved","beforeOnce","once","afterOnce","before","beforeLeave","leave","afterLeave","beforeEnter","enter","afterEnter","after"],n.registered=new Map,n.init(),n}e(n,t);var r=n.prototype;return r.init=function(){var t=this;this.registered.clear(),this.all.forEach((function(n){t[n]||(t[n]=function(r,e){t.registered.has(n)||t.registered.set(n,new Set),t.registered.get(n).add({ctx:e||{},fn:r})})}))},r.do=function(t){for(var n=this,r=arguments.length,e=new Array(r>1?r-1:0),i=1;i<r;i++)e[i-1]=arguments[i];if(this.registered.has(t)){var o=Promise.resolve();return this.registered.get(t).forEach((function(t){o=o.then((function(){return N(t.fn,t.ctx).apply(void 0,e)}))})),o.catch((function(r){n.logger.debug("Hook error ["+t+"]"),n.logger.error(r)}))}return Promise.resolve()},r.clear=function(){var t=this;this.all.forEach((function(n){delete t[n]})),this.init()},r.help=function(){this.logger.info("Available hooks: "+this.all.join(","));var t=[];this.registered.forEach((function(n,r){return t.push(r)})),this.logger.info("Registered hooks: "+t.join(","))},n}(h)),z=function(){function t(t){if(this.P=[],"boolean"==typeof t)this.g=t;else{var n=Array.isArray(t)?t:[t];this.P=n.map((function(t){return $(t)}))}}return t.prototype.checkHref=function(t){if("boolean"==typeof this.g)return this.g;var n=U(t).path;return this.P.some((function(t){return null!==t.exec(n)}))},t}(),G=function(t){function n(n){var r;return(r=t.call(this,n)||this).k=new Map,r}e(n,t);var i=n.prototype;return i.set=function(t,n,r){return this.k.set(t,{action:r,request:n}),{action:r,request:n}},i.get=function(t){return this.k.get(t)},i.getRequest=function(t){return this.k.get(t).request},i.getAction=function(t){return this.k.get(t).action},i.has=function(t){return!this.checkHref(t)&&this.k.has(t)},i.delete=function(t){return this.k.delete(t)},i.update=function(t,n){var e=r({},this.k.get(t),{},n);return this.k.set(t,e),e},n}(z),Q=function(){return!window.history.pushState},W=function(t){return!t.el||!t.href},J=function(t){var n=t.event;return n.which>1||n.metaKey||n.ctrlKey||n.shiftKey||n.altKey},K=function(t){var n=t.el;return n.hasAttribute("target")&&"_blank"===n.target},V=function(t){var n=t.el;return void 0!==n.protocol&&window.location.protocol!==n.protocol||void 0!==n.hostname&&window.location.hostname!==n.hostname},Y=function(t){var n=t.el;return void 0!==n.port&&B()!==B(n.href)},Z=function(t){var n=t.el;return n.getAttribute&&"string"==typeof n.getAttribute("download")},tt=function(t){return t.el.hasAttribute(S.prefix+"-"+S.prevent)},nt=function(t){return Boolean(t.el.closest("["+S.prefix+"-"+S.prevent+'="all"]'))},rt=function(t){var n=t.href;return F(n)===F()&&B(n)===B()},et=function(t){function n(n){var r;return(r=t.call(this,n)||this).suite=[],r.tests=new Map,r.init(),r}e(n,t);var r=n.prototype;return r.init=function(){this.add("pushState",Q),this.add("exists",W),this.add("newTab",J),this.add("blank",K),this.add("corsDomain",V),this.add("corsPort",Y),this.add("download",Z),this.add("preventSelf",tt),this.add("preventAll",nt),this.add("sameUrl",rt,!1)},r.add=function(t,n,r){void 0===r&&(r=!0),this.tests.set(t,n),r&&this.suite.push(t)},r.run=function(t,n,r,e){return this.tests.get(t)({el:n,event:r,href:e})},r.checkLink=function(t,n,r){var e=this;return this.suite.some((function(i){return e.run(i,t,n,r)}))},n}(z),it=function(t){function n(r,e){var i;void 0===e&&(e="Barba error");for(var o=arguments.length,u=new Array(o>2?o-2:0),f=2;f<o;f++)u[f-2]=arguments[f];return(i=t.call.apply(t,[this].concat(u))||this).error=r,i.label=e,Error.captureStackTrace&&Error.captureStackTrace(function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(i),n),i.name="BarbaError",i}return e(n,t),n}(f(Error)),ot=function(){function t(t){void 0===t&&(t=[]),this.logger=new l("@barba/core"),this.all=[],this.page=[],this.once=[],this.A=[{name:"namespace",type:"strings"},{name:"custom",type:"function"}],t&&(this.all=this.all.concat(t)),this.update()}var n=t.prototype;return n.add=function(t,n){switch(t){case"rule":this.A.splice(n.position||0,0,n.value);break;case"transition":default:this.all.push(n)}this.update()},n.resolve=function(t,n){var r=this;void 0===n&&(n={});var e=n.once?this.once:this.page;e=e.filter(n.self?function(t){return t.name&&"self"===t.name}:function(t){return!t.name||"self"!==t.name});var i=new Map,o=e.find((function(e){var o=!0,u={};return!(!n.self||"self"!==e.name)||(r.A.reverse().forEach((function(n){o&&(o=r.R(e,n,t,u),e.from&&e.to&&(o=r.R(e,n,t,u,"from")&&r.R(e,n,t,u,"to")),e.from&&!e.to&&(o=r.R(e,n,t,u,"from")),!e.from&&e.to&&(o=r.R(e,n,t,u,"to")))})),i.set(e,u),o)})),u=i.get(o),f=[];if(f.push(n.once?"once":"page"),n.self&&f.push("self"),u){var s,c=[o];Object.keys(u).length>0&&c.push(u),(s=this.logger).info.apply(s,["Transition found ["+f.join(",")+"]"].concat(c))}else this.logger.info("No transition found ["+f.join(",")+"]");return o},n.update=function(){var t=this;this.all=this.all.map((function(n){return t.T(n)})).sort((function(t,n){return t.priority-n.priority})).reverse().map((function(t){return delete t.priority,t})),this.page=this.all.filter((function(t){return void 0!==t.leave||void 0!==t.enter})),this.once=this.all.filter((function(t){return void 0!==t.once}))},n.R=function(t,n,r,e,i){var o=!0,u=!1,f=t,s=n.name,c=s,a=s,h=s,v=i?f[i]:f,l="to"===i?r.next:r.current;if(i?v&&v[s]:v[s]){switch(n.type){case"strings":default:var d=Array.isArray(v[c])?v[c]:[v[c]];l[c]&&-1!==d.indexOf(l[c])&&(u=!0),-1===d.indexOf(l[c])&&(o=!1);break;case"object":var m=Array.isArray(v[a])?v[a]:[v[a]];l[a]?(l[a].name&&-1!==m.indexOf(l[a].name)&&(u=!0),-1===m.indexOf(l[a].name)&&(o=!1)):o=!1;break;case"function":v[h](r)?u=!0:o=!1}u&&(i?(e[i]=e[i]||{},e[i][s]=f[i][s]):e[s]=f[s])}return o},n.O=function(t,n,r){var e=0;return(t[n]||t.from&&t.from[n]||t.to&&t.to[n])&&(e+=Math.pow(10,r),t.from&&t.from[n]&&(e+=1),t.to&&t.to[n]&&(e+=2)),e},n.T=function(t){var n=this;t.priority=0;var r=0;return this.A.forEach((function(e,i){r+=n.O(t,e.name,i+1)})),t.priority=r,t},t}(),ut=function(){function t(t){void 0===t&&(t=[]),this.logger=new l("@barba/core"),this.S=!1,this.store=new ot(t)}var r=t.prototype;return r.get=function(t,n){return this.store.resolve(t,n)},r.doOnce=function(t){var n=t.data,r=t.transition;try{var e=function(){i.S=!1},i=this,o=r||{};i.S=!0;var u=s((function(){return Promise.resolve(i.j("beforeOnce",n,o)).then((function(){return Promise.resolve(i.once(n,o)).then((function(){return Promise.resolve(i.j("afterOnce",n,o)).then((function(){}))}))}))}),(function(t){i.S=!1,i.logger.debug("Transition error [before/after/once]"),i.logger.error(t)}));return Promise.resolve(u&&u.then?u.then(e):e())}catch(t){return Promise.reject(t)}},r.doPage=function(t){var n=t.data,r=t.transition,e=t.page,i=t.wrapper;try{var o=function(t){if(u)return t;f.S=!1},u=!1,f=this,c=r||{},a=!0===c.sync||!1;f.S=!0;var h=s((function(){function t(){return Promise.resolve(f.j("before",n,c)).then((function(){var t=!1;function r(r){return t?r:Promise.resolve(f.remove(n)).then((function(){return Promise.resolve(f.j("after",n,c)).then((function(){}))}))}var o=function(){if(a)return s((function(){return Promise.resolve(f.add(n,i)).then((function(){return Promise.resolve(f.j("beforeLeave",n,c)).then((function(){return Promise.resolve(f.j("beforeEnter",n,c)).then((function(){return Promise.resolve(Promise.all([f.leave(n,c),f.enter(n,c)])).then((function(){return Promise.resolve(f.j("afterLeave",n,c)).then((function(){return Promise.resolve(f.j("afterEnter",n,c)).then((function(){}))}))}))}))}))}))}),(function(t){if(f.M(t))throw new it(t,"Transition error [sync]")}));var r=function(r){return t?r:s((function(){var t=function(){if(!1!==o)return Promise.resolve(f.add(n,i)).then((function(){return Promise.resolve(f.j("beforeEnter",n,c)).then((function(){return Promise.resolve(f.enter(n,c,o)).then((function(){return Promise.resolve(f.j("afterEnter",n,c)).then((function(){}))}))}))}))}();if(t&&t.then)return t.then((function(){}))}),(function(t){if(f.M(t))throw new it(t,"Transition error [before/after/enter]")}))},o=!1,u=s((function(){return Promise.resolve(f.j("beforeLeave",n,c)).then((function(){return Promise.resolve(Promise.all([f.leave(n,c),L(e,n)]).then((function(t){return t[0]}))).then((function(t){return o=t,Promise.resolve(f.j("afterLeave",n,c)).then((function(){}))}))}))}),(function(t){if(f.M(t))throw new it(t,"Transition error [before/after/leave]")}));return u&&u.then?u.then(r):r(u)}();return o&&o.then?o.then(r):r(o)}))}var r=function(){if(a)return Promise.resolve(L(e,n)).then((function(){}))}();return r&&r.then?r.then(t):t()}),(function(t){if(f.S=!1,t.name&&"BarbaError"===t.name)throw f.logger.debug(t.label),f.logger.error(t.error),t;throw f.logger.debug("Transition error [page]"),f.logger.error(t),t}));return Promise.resolve(h&&h.then?h.then(o):o(h))}catch(t){return Promise.reject(t)}},r.once=function(t,n){try{return Promise.resolve(X.do("once",t,n)).then((function(){return n.once?N(n.once,n)(t):Promise.resolve()}))}catch(t){return Promise.reject(t)}},r.leave=function(t,n){try{return Promise.resolve(X.do("leave",t,n)).then((function(){return n.leave?N(n.leave,n)(t):Promise.resolve()}))}catch(t){return Promise.reject(t)}},r.enter=function(t,n,r){try{return Promise.resolve(X.do("enter",t,n)).then((function(){return n.enter?N(n.enter,n)(t,r):Promise.resolve()}))}catch(t){return Promise.reject(t)}},r.add=function(t,n){try{return j.addContainer(t.next.container,n),X.do("nextAdded",t),Promise.resolve()}catch(t){return Promise.reject(t)}},r.remove=function(t){try{return j.removeContainer(t.current.container),X.do("currentRemoved",t),Promise.resolve()}catch(t){return Promise.reject(t)}},r.M=function(t){return t.message?!/Timeout error|Fetch error/.test(t.message):!t.status},r.j=function(t,n,r){try{return Promise.resolve(X.do(t,n,r)).then((function(){return r[t]?N(r[t],r)(n):Promise.resolve()}))}catch(t){return Promise.reject(t)}},n(t,[{key:"isRunning",get:function(){return this.S},set:function(t){this.S=t}},{key:"hasOnce",get:function(){return this.store.once.length>0}},{key:"hasSelf",get:function(){return this.store.all.some((function(t){return"self"===t.name}))}},{key:"shouldWait",get:function(){return this.store.all.some((function(t){return t.to&&!t.to.route||t.sync}))}}]),t}(),ft=function(){function t(t){var n=this;this.names=["beforeLeave","afterLeave","beforeEnter","afterEnter"],this.byNamespace=new Map,0!==t.length&&(t.forEach((function(t){n.byNamespace.set(t.namespace,t)})),this.names.forEach((function(t){X[t](n.L(t))})))}return t.prototype.L=function(t){var n=this;return function(r){var e=t.match(/enter/i)?r.next:r.current,i=n.byNamespace.get(e.namespace);return i&&i[t]?N(i[t],i)(r):Promise.resolve()}},t}();Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Element.prototype.closest||(Element.prototype.closest=function(t){var n=this;do{if(n.matches(t))return n;n=n.parentElement||n.parentNode}while(null!==n&&1===n.nodeType);return null});var st={container:null,html:"",namespace:"",url:{hash:"",href:"",path:"",port:null,query:{}}};return new(function(){function t(){this.version=a,this.schemaPage=st,this.Logger=l,this.logger=new l("@barba/core"),this.plugins=[],this.hooks=X,this.dom=j,this.helpers=_,this.history=M,this.request=I,this.url=H}var e=t.prototype;return e.use=function(t,n){var r=this.plugins;r.indexOf(t)>-1?this.logger.warn("Plugin ["+t.name+"] already installed."):"function"==typeof t.install?(t.install(this,n),r.push(t)):this.logger.warn("Plugin ["+t.name+'] has no "install" method.')},e.init=function(t){var n=void 0===t?{}:t,e=n.transitions,i=void 0===e?[]:e,o=n.views,u=void 0===o?[]:o,f=n.schema,s=void 0===f?S:f,c=n.requestError,a=n.timeout,h=void 0===a?2e3:a,v=n.cacheIgnore,d=void 0!==v&&v,m=n.prefetchIgnore,p=void 0!==m&&m,w=n.preventRunning,b=void 0!==w&&w,y=n.prevent,P=void 0===y?null:y,g=n.debug,E=n.logLevel;if(l.setLevel(!0===(void 0!==g&&g)?"debug":void 0===E?"off":E),this.logger.info(this.version),Object.keys(s).forEach((function(t){S[t]&&(S[t]=s[t])})),this.$=c,this.timeout=h,this.cacheIgnore=d,this.prefetchIgnore=p,this.preventRunning=b,this._=this.dom.getWrapper(),!this._)throw new Error("[@barba/core] No Barba wrapper found");this._.setAttribute("aria-live","polite"),this.q();var x=this.data.current;if(!x.container)throw new Error("[@barba/core] No Barba container found");if(this.cache=new G(d),this.prevent=new et(p),this.transitions=new ut(i),this.views=new ft(u),null!==P){if("function"!=typeof P)throw new Error("[@barba/core] Prevent should be a function");this.prevent.add("preventCustom",P)}this.history.init(x.url.href,x.namespace),this.B=this.B.bind(this),this.U=this.U.bind(this),this.D=this.D.bind(this),this.F(),this.plugins.forEach((function(t){return t.init()}));var k=this.data;k.trigger="barba",k.next=k.current,k.current=r({},this.schemaPage),this.hooks.do("ready",k),this.once(k),this.q()},e.destroy=function(){this.q(),this.H(),this.history.clear(),this.hooks.clear(),this.plugins=[]},e.force=function(t){window.location.assign(t)},e.go=function(t,n,r){var e;if(void 0===n&&(n="barba"),this.transitions.isRunning)this.force(t);else if(!(e="popstate"===n?this.history.current&&this.url.getPath(this.history.current.url)===this.url.getPath(t):this.prevent.run("sameUrl",null,null,t))||this.transitions.hasSelf)return n=this.history.change(t,n,r),r&&(r.stopPropagation(),r.preventDefault()),this.page(t,n,e)},e.once=function(t){try{var n=this;return Promise.resolve(n.hooks.do("beforeEnter",t)).then((function(){function r(){return Promise.resolve(n.hooks.do("afterEnter",t)).then((function(){}))}var e=function(){if(n.transitions.hasOnce){var r=n.transitions.get(t,{once:!0});return Promise.resolve(n.transitions.doOnce({transition:r,data:t})).then((function(){}))}}();return e&&e.then?e.then(r):r()}))}catch(t){return Promise.reject(t)}},e.page=function(t,n,e){try{var i=function(){var t=o.data;return Promise.resolve(o.hooks.do("page",t)).then((function(){var n=s((function(){var n=o.transitions.get(t,{once:!1,self:e});return Promise.resolve(o.transitions.doPage({data:t,page:u,transition:n,wrapper:o._})).then((function(){o.q()}))}),(function(){0===l.getLevel()&&o.force(t.current.url.href)}));if(n&&n.then)return n.then((function(){}))}))},o=this;o.data.next.url=r({href:t},o.url.parse(t)),o.data.trigger=n;var u=o.cache.has(t)?o.cache.update(t,{action:"click"}).request:o.cache.set(t,o.request(t,o.timeout,o.onRequestError.bind(o,n)),"click").request,f=function(){if(o.transitions.shouldWait)return Promise.resolve(L(u,o.data)).then((function(){}))}();return Promise.resolve(f&&f.then?f.then(i):i())}catch(t){return Promise.reject(t)}},e.onRequestError=function(t){this.transitions.isRunning=!1;for(var n=arguments.length,r=new Array(n>1?n-1:0),e=1;e<n;e++)r[e-1]=arguments[e];var i=r[0],o=r[1],u=this.cache.getAction(i);return this.cache.delete(i),!(this.$&&!1===this.$(t,u,i,o)||("click"===u&&this.force(i),1))},e.prefetch=function(t){var n=this;this.cache.has(t)||this.cache.set(t,this.request(t,this.timeout,this.onRequestError.bind(this,"barba")).catch((function(t){n.logger.error(t)})),"prefetch")},e.F=function(){!0!==this.prefetchIgnore&&(document.addEventListener("mouseover",this.B),document.addEventListener("touchstart",this.B)),document.addEventListener("click",this.U),window.addEventListener("popstate",this.D)},e.H=function(){!0!==this.prefetchIgnore&&(document.removeEventListener("mouseover",this.B),document.removeEventListener("touchstart",this.B)),document.removeEventListener("click",this.U),window.removeEventListener("popstate",this.D)},e.B=function(t){var n=this,r=this.I(t);if(r){var e=this.dom.getHref(r);this.prevent.checkHref(e)||this.cache.has(e)||this.cache.set(e,this.request(e,this.timeout,this.onRequestError.bind(this,r)).catch((function(t){n.logger.error(t)})),"enter")}},e.U=function(t){var n=this.I(t);if(n)return this.transitions.isRunning&&this.preventRunning?(t.preventDefault(),void t.stopPropagation()):void this.go(this.dom.getHref(n),n,t)},e.D=function(t){this.go(this.url.getHref(),"popstate",t)},e.I=function(t){for(var n=t.target;n&&!this.dom.getHref(n);)n=n.parentNode;if(n&&!this.prevent.checkLink(n,t,this.dom.getHref(n)))return n},e.q=function(){var t=this.url.getHref(),n={container:this.dom.getContainer(),html:this.dom.getHtml(),namespace:this.dom.getNamespace(),url:r({href:t},this.url.parse(t))};this.C={current:n,next:r({},this.schemaPage),trigger:void 0},this.hooks.do("reset",this.data)},n(t,[{key:"data",get:function(){return this.C}},{key:"wrapper",get:function(){return this._}}]),t}())}));
//# sourceMappingURL=barba.umd.js.map


/***/ }),

/***/ "./src/scripts/inc/_CSSPlugin.js":
/*!***************************************!*\
  !*** ./src/scripts/inc/_CSSPlugin.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSSPlugin": () => (/* binding */ CSSPlugin),
/* harmony export */   "_createElement": () => (/* binding */ _createElement),
/* harmony export */   "_getBBox": () => (/* binding */ _getBBox),
/* harmony export */   "checkPrefix": () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_gsap.js */ "./src/scripts/inc/_gsap.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * CSSPlugin 3.10.4
 * https://greensock.com
 *
 * Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _win,
    _doc,
    _docElement,
    _pluginInitted,
    _tempDiv,
    _tempDivStyler,
    _recentSetterPlugin,
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _transformProps = {},
    _RAD2DEG = 180 / Math.PI,
    _DEG2RAD = Math.PI / 180,
    _atan2 = Math.atan2,
    _bigNum = 1e8,
    _capsExp = /([A-Z])/g,
    _horizontalExp = /(left|right|width|margin|padding|x)/i,
    _complexExp = /[\s,\(]\S/,
    _propertyAliases = {
  autoAlpha: "opacity,visibility",
  scale: "scaleX,scaleY",
  alpha: "opacity"
},
    _renderCSSProp = function _renderCSSProp(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
},
    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
},
    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
  var value = data.s + data.c * ratio;
  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
},
    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
  return data.set(data.t, data.p, ratio ? data.e : data.b, data);
},
    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
},
    _setterCSSStyle = function _setterCSSStyle(target, property, value) {
  return target.style[property] = value;
},
    _setterCSSProp = function _setterCSSProp(target, property, value) {
  return target.style.setProperty(property, value);
},
    _setterTransform = function _setterTransform(target, property, value) {
  return target._gsap[property] = value;
},
    _setterScale = function _setterScale(target, property, value) {
  return target._gsap.scaleX = target._gsap.scaleY = value;
},
    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache.scaleX = cache.scaleY = value;
  cache.renderTransform(ratio, cache);
},
    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
  var cache = target._gsap;
  cache[property] = value;
  cache.renderTransform(ratio, cache);
},
    _transformProp = "transform",
    _transformOriginProp = _transformProp + "Origin",
    _supports3D,
    _createElement = function _createElement(type, ns) {
  var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
},
    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
  var cs = getComputedStyle(target);
  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
},
    _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
  var e = element || _tempDiv,
      s = e.style,
      i = 5;

  if (property in s && !preferPrefix) {
    return property;
  }

  property = property.charAt(0).toUpperCase() + property.substr(1);

  while (i-- && !(_prefixes[i] + property in s)) {}

  return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
},
    _initCore = function _initCore() {
  if (_windowExists() && window.document) {
    _win = window;
    _doc = _win.document;
    _docElement = _doc.documentElement;
    _tempDiv = _createElement("div") || {
      style: {}
    };
    _tempDivStyler = _createElement("div");
    _transformProp = _checkPropPrefix(_transformProp);
    _transformOriginProp = _transformProp + "Origin";
    _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

    _supports3D = !!_checkPropPrefix("perspective");
    _pluginInitted = 1;
  }
},
    _getBBoxHack = function _getBBoxHack(swapIfPossible) {
  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
  var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;

  _docElement.appendChild(svg);

  svg.appendChild(this);
  this.style.display = "block";

  if (swapIfPossible) {
    try {
      bbox = this.getBBox();
      this._gsapBBox = this.getBBox; //store the original

      this.getBBox = _getBBoxHack;
    } catch (e) {}
  } else if (this._gsapBBox) {
    bbox = this._gsapBBox();
  }

  if (oldParent) {
    if (oldSibling) {
      oldParent.insertBefore(this, oldSibling);
    } else {
      oldParent.appendChild(this);
    }
  }

  _docElement.removeChild(svg);

  this.style.cssText = oldCSS;
  return bbox;
},
    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
  var i = attributesArray.length;

  while (i--) {
    if (target.hasAttribute(attributesArray[i])) {
      return target.getAttribute(attributesArray[i]);
    }
  }
},
    _getBBox = function _getBBox(target) {
  var bounds;

  try {
    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
  } catch (error) {
    bounds = _getBBoxHack.call(target, true);
  }

  bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

  return bounds && !bounds.width && !bounds.x && !bounds.y ? {
    x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
    y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
    width: 0,
    height: 0
  } : bounds;
},
    _isSVG = function _isSVG(e) {
  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
},
    //reports if the element is an SVG on which getBBox() actually works
_removeProperty = function _removeProperty(target, property) {
  if (property) {
    var style = target.style;

    if (property in _transformProps && property !== _transformOriginProp) {
      property = _transformProp;
    }

    if (style.removeProperty) {
      if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
        property = "-" + property;
      }

      style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
    } else {
      //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
      style.removeAttribute(property);
    }
  }
},
    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
  var pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
  plugin._pt = pt;
  pt.b = beginning;
  pt.e = end;

  plugin._props.push(property);

  return pt;
},
    _nonConvertibleUnits = {
  deg: 1,
  rad: 1,
  turn: 1
},
    //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
_convertToUnit = function _convertToUnit(target, property, value, unit) {
  var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
  style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;

  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
    return curValue;
  }

  curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
  isSVG = target.getCTM && _isSVG(target);

  if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
    px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
    return (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
  }

  style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
  parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

  if (isSVG) {
    parent = (target.ownerSVGElement || {}).parentNode;
  }

  if (!parent || parent === _doc || !parent.appendChild) {
    parent = _doc.body;
  }

  cache = parent._gsap;

  if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time) {
    return (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
  } else {
    (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));
    parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

    parent.appendChild(_tempDiv);
    px = _tempDiv[measureProperty];
    parent.removeChild(_tempDiv);
    style.position = "absolute";

    if (horizontal && toPercent) {
      cache = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
      cache.time = _gsap_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
      cache.width = parent[measureProperty];
    }
  }

  return (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
},
    _get = function _get(target, property, unit, uncache) {
  var value;
  _pluginInitted || _initCore();

  if (property in _propertyAliases && property !== "transform") {
    property = _propertyAliases[property];

    if (~property.indexOf(",")) {
      property = property.split(",")[0];
    }
  }

  if (_transformProps[property] && property !== "transform") {
    value = _parseTransform(target, uncache);
    value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
  } else {
    value = target.style[property];

    if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
    }
  }

  return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
},
    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
  // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  if (!start || start === "none") {
    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
    var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);

    if (s && s !== start) {
      prop = p;
      start = s;
    } else if (prop === "borderColor") {
      start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
    }
  }

  var pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
  pt.b = start;
  pt.e = end;
  start += ""; // ensure values are strings

  end += "";

  if (end === "auto") {
    target.style[prop] = end;
    end = _getComputedProperty(target, prop) || end;
    target.style[prop] = start;
  }

  a = [start, end];

  (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


  start = a[0];
  end = a[1];
  startValues = start.match(_gsap_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
  endValues = end.match(_gsap_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];

  if (endValues.length) {
    while (result = _gsap_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
      endValue = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
        color = 1;
      }

      if (endValue !== (startValue = startValues[matchIndex++] || "")) {
        startNum = parseFloat(startValue) || 0;
        startUnit = startValue.substr((startNum + "").length);
        endValue.charAt(1) === "=" && (endValue = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
        endNum = parseFloat(endValue);
        endUnit = endValue.substr((endNum + "").length);
        index = _gsap_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;

        if (!endUnit) {
          //if something like "perspective:300" is passed in and we must add a unit to the end
          endUnit = endUnit || _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;

          if (index === end.length) {
            end += endUnit;
            pt.e += endUnit;
          }
        }

        if (startUnit !== endUnit) {
          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
        } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum - startNum,
          m: color && color < 4 || prop === "zIndex" ? Math.round : 0
        };
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
  } else {
    pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
  }

  _gsap_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _keywordToPercent = {
  top: "0%",
  bottom: "100%",
  left: "0%",
  right: "100%",
  center: "50%"
},
    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
  var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";

  if (x === "top" || x === "bottom" || y === "left" || y === "right") {
    //the user provided them in the wrong order, so flip them
    value = x;
    x = y;
    y = value;
  }

  split[0] = _keywordToPercent[x] || x;
  split[1] = _keywordToPercent[y] || y;
  return split.join(" ");
},
    _renderClearProps = function _renderClearProps(ratio, data) {
  if (data.tween && data.tween._time === data.tween._dur) {
    var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;

    if (props === "all" || props === true) {
      style.cssText = "";
      clearTransforms = 1;
    } else {
      props = props.split(",");
      i = props.length;

      while (--i > -1) {
        prop = props[i];

        if (_transformProps[prop]) {
          clearTransforms = 1;
          prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
        }

        _removeProperty(target, prop);
      }
    }

    if (clearTransforms) {
      _removeProperty(target, _transformProp);

      if (cache) {
        cache.svg && target.removeAttribute("transform");

        _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


        cache.uncache = 1;
      }
    }
  }
},
    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
_specialProps = {
  clearProps: function clearProps(plugin, target, property, endValue, tween) {
    if (tween.data !== "isFromStart") {
      var pt = plugin._pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
      pt.u = endValue;
      pt.pr = -10;
      pt.tween = tween;

      plugin._props.push(property);

      return 1;
    }
  }
  /* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */

},

/*
 * --------------------------------------------------------------------------------------
 * TRANSFORMS
 * --------------------------------------------------------------------------------------
 */
_identity2DMatrix = [1, 0, 0, 1, 0, 0],
    _rotationalProperties = {},
    _isNullTransform = function _isNullTransform(value) {
  return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
},
    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
  var matrixString = _getComputedProperty(target, _transformProp);

  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round);
},
    _getMatrix = function _getMatrix(target, force2D) {
  var cache = target._gsap || (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;

  if (cache.svg && target.getAttribute("transform")) {
    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
    return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
    temp = style.display;
    style.display = "block";
    parent = target.parentNode;

    if (!parent || !target.offsetParent) {
      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
      addedToDOM = 1; //flag

      nextSibling = target.nextSibling;

      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

    }

    matrix = _getComputedTransformMatrixAsArray(target);
    temp ? style.display = temp : _removeProperty(target, "display");

    if (addedToDOM) {
      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
    }
  }

  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
},
    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
  var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;

  if (!originIsAbsolute) {
    bounds = _getBBox(target);
    xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
    xOrigin = x;
    yOrigin = y;
  }

  if (smooth || smooth !== false && cache.smooth) {
    tx = xOrigin - xOriginOld;
    ty = yOrigin - yOriginOld;
    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
  } else {
    cache.xOffset = cache.yOffset = 0;
  }

  cache.xOrigin = xOrigin;
  cache.yOrigin = yOrigin;
  cache.smooth = !!smooth;
  cache.origin = origin;
  cache.originIsAbsolute = !!originIsAbsolute;
  target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

  if (pluginToAddPropTweensTo) {
    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
  }

  target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
},
    _parseTransform = function _parseTransform(target, uncache) {
  var cache = target._gsap || new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);

  if ("x" in cache && !uncache && !cache.uncache) {
    return cache;
  }

  var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
  scaleX = scaleY = 1;
  cache.svg = !!(target.getCTM && _isSVG(target));
  matrix = _getMatrix(target, cache.svg);

  if (cache.svg) {
    t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin"); // if origin is 0,0 and cache.uncache is true, let the recorded data-svg-origin stay. Otherwise, whenever we set cache.uncache to true, we'd need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.

    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
  }

  xOrigin = cache.xOrigin || 0;
  yOrigin = cache.yOrigin || 0;

  if (matrix !== _identity2DMatrix) {
    a = matrix[0]; //a11

    b = matrix[1]; //a21

    c = matrix[2]; //a31

    d = matrix[3]; //a41

    x = a12 = matrix[4];
    y = a22 = matrix[5]; //2D matrix

    if (matrix.length === 6) {
      scaleX = Math.sqrt(a * a + b * b);
      scaleY = Math.sqrt(d * d + c * c);
      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
      skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

      if (cache.svg) {
        x -= xOrigin - (xOrigin * a + yOrigin * c);
        y -= yOrigin - (xOrigin * b + yOrigin * d);
      } //3D matrix

    } else {
      a32 = matrix[6];
      a42 = matrix[7];
      a13 = matrix[8];
      a23 = matrix[9];
      a33 = matrix[10];
      a43 = matrix[11];
      x = matrix[12];
      y = matrix[13];
      z = matrix[14];
      angle = _atan2(a32, a33);
      rotationX = angle * _RAD2DEG; //rotationX

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a12 * cos + a13 * sin;
        t2 = a22 * cos + a23 * sin;
        t3 = a32 * cos + a33 * sin;
        a13 = a12 * -sin + a13 * cos;
        a23 = a22 * -sin + a23 * cos;
        a33 = a32 * -sin + a33 * cos;
        a43 = a42 * -sin + a43 * cos;
        a12 = t1;
        a22 = t2;
        a32 = t3;
      } //rotationY


      angle = _atan2(-c, a33);
      rotationY = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = a * cos - a13 * sin;
        t2 = b * cos - a23 * sin;
        t3 = c * cos - a33 * sin;
        a43 = d * sin + a43 * cos;
        a = t1;
        b = t2;
        c = t3;
      } //rotationZ


      angle = _atan2(b, a);
      rotation = angle * _RAD2DEG;

      if (angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);
        t1 = a * cos + b * sin;
        t2 = a12 * cos + a22 * sin;
        b = b * cos - a * sin;
        a22 = a22 * cos - a12 * sin;
        a = t1;
        a12 = t2;
      }

      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
        rotationX = rotation = 0;
        rotationY = 180 - rotationY;
      }

      scaleX = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
      scaleY = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
      angle = _atan2(a12, a22);
      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
    }

    if (cache.svg) {
      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
      t1 = target.getAttribute("transform");
      cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
      t1 && target.setAttribute("transform", t1);
    }
  }

  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
    if (invertedScaleX) {
      scaleX *= -1;
      skewX += rotation <= 0 ? 180 : -180;
      rotation += rotation <= 0 ? 180 : -180;
    } else {
      scaleY *= -1;
      skewX += skewX <= 0 ? 180 : -180;
    }
  }

  uncache = uncache || cache.uncache;
  cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
  cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
  cache.z = z + px;
  cache.scaleX = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
  cache.scaleY = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
  cache.rotation = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
  cache.rotationX = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
  cache.rotationY = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
  cache.skewX = skewX + deg;
  cache.skewY = skewY + deg;
  cache.transformPerspective = perspective + px;

  if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
    style[_transformOriginProp] = _firstTwoOnly(origin);
  }

  cache.xOffset = cache.yOffset = 0;
  cache.force3D = _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
  cache.uncache = 0;
  return cache;
},
    _firstTwoOnly = function _firstTwoOnly(value) {
  return (value = value.split(" "))[0] + " " + value[1];
},
    //for handling transformOrigin values, stripping out the 3rd dimension
_addPxTranslate = function _addPxTranslate(target, start, value) {
  var unit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
  return (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
},
    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
  cache.z = "0px";
  cache.rotationY = cache.rotationX = "0deg";
  cache.force3D = 0;

  _renderCSSTransforms(ratio, cache);
},
    _zeroDeg = "0deg",
    _zeroPx = "0px",
    _endParenthesis = ") ",
    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
  var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
    var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;

    angle = parseFloat(rotationX) * _DEG2RAD;
    cos = Math.cos(angle);
    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
  }

  if (transformPerspective !== _zeroPx) {
    transforms += "perspective(" + transformPerspective + _endParenthesis;
  }

  if (xPercent || yPercent) {
    transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
  }

  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
    transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
  }

  if (rotation !== _zeroDeg) {
    transforms += "rotate(" + rotation + _endParenthesis;
  }

  if (rotationY !== _zeroDeg) {
    transforms += "rotateY(" + rotationY + _endParenthesis;
  }

  if (rotationX !== _zeroDeg) {
    transforms += "rotateX(" + rotationX + _endParenthesis;
  }

  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
    transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
  }

  if (scaleX !== 1 || scaleY !== 1) {
    transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
  }

  target.style[_transformProp] = transforms || "translate(0, 0)";
},
    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
  var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;

  rotation = parseFloat(rotation);
  skewX = parseFloat(skewX);
  skewY = parseFloat(skewY);

  if (skewY) {
    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
    skewY = parseFloat(skewY);
    skewX += skewY;
    rotation += skewY;
  }

  if (rotation || skewX) {
    rotation *= _DEG2RAD;
    skewX *= _DEG2RAD;
    a11 = Math.cos(rotation) * scaleX;
    a21 = Math.sin(rotation) * scaleX;
    a12 = Math.sin(rotation - skewX) * -scaleY;
    a22 = Math.cos(rotation - skewX) * scaleY;

    if (skewX) {
      skewY *= _DEG2RAD;
      temp = Math.tan(skewX - skewY);
      temp = Math.sqrt(1 + temp * temp);
      a12 *= temp;
      a22 *= temp;

      if (skewY) {
        temp = Math.tan(skewY);
        temp = Math.sqrt(1 + temp * temp);
        a11 *= temp;
        a21 *= temp;
      }
    }

    a11 = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
    a21 = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
    a12 = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
    a22 = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
  } else {
    a11 = scaleX;
    a22 = scaleY;
    a21 = a12 = 0;
  }

  if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
    tx = _convertToUnit(target, "x", x, "px");
    ty = _convertToUnit(target, "y", y, "px");
  }

  if (xOrigin || yOrigin || xOffset || yOffset) {
    tx = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
    ty = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
  }

  if (xPercent || yPercent) {
    //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
    temp = target.getBBox();
    tx = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
    ty = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
  }

  temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
  target.setAttribute("transform", temp);
  forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
},
    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
  var cap = 360,
      isString = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;

  if (isString) {
    direction = endValue.split("_")[1];

    if (direction === "short") {
      change %= cap;

      if (change !== change % (cap / 2)) {
        change += change < 0 ? cap : -cap;
      }
    }

    if (direction === "cw" && change < 0) {
      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
    } else if (direction === "ccw" && change > 0) {
      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
    }
  }

  plugin._pt = pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
  pt.e = finalValue;
  pt.u = "deg";

  plugin._props.push(property);

  return pt;
},
    _assign = function _assign(target, source) {
  // Internet Explorer doesn't have Object.assign(), so we recreate it here.
  for (var p in source) {
    target[p] = source[p];
  }

  return target;
},
    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
  //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
  var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;

  if (startCache.svg) {
    startValue = target.getAttribute("transform");
    target.setAttribute("transform", "");
    style[_transformProp] = transforms;
    endCache = _parseTransform(target, 1);

    _removeProperty(target, _transformProp);

    target.setAttribute("transform", startValue);
  } else {
    startValue = getComputedStyle(target)[_transformProp];
    style[_transformProp] = transforms;
    endCache = _parseTransform(target, 1);
    style[_transformProp] = startValue;
  }

  for (p in _transformProps) {
    startValue = startCache[p];
    endValue = endCache[p];

    if (startValue !== endValue && exclude.indexOf(p) < 0) {
      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
      startUnit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
      endUnit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
      endNum = parseFloat(endValue);
      plugin._pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
      plugin._pt.u = endUnit || 0;

      plugin._props.push(p);
    }
  }

  _assign(endCache, startCache);
}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


(0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
      r = "Right",
      b = "Bottom",
      l = "Left",
      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
    return index < 2 ? name + side : "border" + side + name;
  });

  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;

    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }

    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});

var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
        style = target.style,
        startAt = tween.vars.startAt,
        startValue,
        endValue,
        endNum,
        startNum,
        type,
        specialProp,
        p,
        startUnit,
        endUnit,
        relative,
        isTransformRelated,
        transformPropTween,
        cache,
        smooth,
        hasPriority;
    _pluginInitted || _initCore();

    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }

      endValue = vars[p];

      if (_gsap_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }

      type = _typeof(endValue);
      specialProp = _specialProps[p];

      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = _typeof(endValue);
      }

      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }

      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;

        if (!_gsap_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }

        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || (startValue += _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }

        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);

        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }

            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }

          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }

        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }

          if (p === "scale") {
            this._pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0);
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }

            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);

            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);

            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);

            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }

        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;

          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else {
            (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);

            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }

        props.push(p);
      }
    }

    hasPriority && (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;

(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });

  (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });

  _propertyAliases[all[13]] = positionAndScale + "," + rotation;

  (0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

(0,_gsap_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});

_gsap_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./src/scripts/inc/_Observer.js":
/*!**************************************!*\
  !*** ./src/scripts/inc/_Observer.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* binding */ Observer),
/* harmony export */   "_getProxyProp": () => (/* binding */ _getProxyProp),
/* harmony export */   "_getScrollFunc": () => (/* binding */ _getScrollFunc),
/* harmony export */   "_getTarget": () => (/* binding */ _getTarget),
/* harmony export */   "_getVelocityProp": () => (/* binding */ _getVelocityProp),
/* harmony export */   "_horizontal": () => (/* binding */ _horizontal),
/* harmony export */   "_isViewport": () => (/* binding */ _isViewport),
/* harmony export */   "_proxies": () => (/* binding */ _proxies),
/* harmony export */   "_scrollers": () => (/* binding */ _scrollers),
/* harmony export */   "_vertical": () => (/* binding */ _vertical),
/* harmony export */   "default": () => (/* binding */ Observer)
/* harmony export */ });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 * Observer 3.10.4
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var gsap,
    _coreInitted,
    _clamp,
    _win,
    _doc,
    _docEl,
    _body,
    _isTouch,
    _pointerType,
    ScrollTrigger,
    _root,
    _normalizer,
    _eventTypes,
    _getGSAP = function _getGSAP() {
  return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
},
    _passThrough = function _passThrough(p) {
  return p;
},
    _startup = 1,
    _observers = [],
    _scrollers = [],
    _proxies = [],
    _getTime = Date.now,
    _bridge = function _bridge(name, value) {
  return value;
},
    _integrate = function _integrate() {
  var core = ScrollTrigger.core,
      data = core.bridge || {},
      scrollers = core._scrollers,
      proxies = core._proxies;
  scrollers.push.apply(scrollers, _toConsumableArray(_scrollers));
  proxies.push.apply(proxies, _toConsumableArray(_proxies));
  _scrollers = scrollers;
  _proxies = proxies;

  _bridge = function _bridge(name, value) {
    return data[name](value);
  };
},
    _getProxyProp = function _getProxyProp(element, property) {
  return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
},
    _isViewport = function _isViewport(el) {
  return !!~_root.indexOf(el);
},
    _addListener = function _addListener(element, type, func, nonPassive, capture) {
  return element.addEventListener(type, func, {
    passive: !nonPassive,
    capture: !!capture
  });
},
    _removeListener = function _removeListener(element, type, func, capture) {
  return element.removeEventListener(type, func, !!capture);
},
    _scrollLeft = "scrollLeft",
    _scrollTop = "scrollTop",
    _onScroll = function _onScroll() {
  return _normalizer && _normalizer.isPressed || _scrollers.cache++;
},
    _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
  var cachingFunc = function cachingFunc(value) {
    // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
    if (value || value === 0) {
      _startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.

      var isNormalizing = _normalizer && _normalizer.isPressed;
      value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!

      f(value);
      cachingFunc.cacheID = _scrollers.cache;
      isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
    } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
      cachingFunc.cacheID = _scrollers.cache;
      cachingFunc.v = f();
    }

    return cachingFunc.v + cachingFunc.offset;
  };

  cachingFunc.offset = 0;
  return f && cachingFunc;
},
    _horizontal = {
  s: _scrollLeft,
  p: "left",
  p2: "Left",
  os: "right",
  os2: "Right",
  d: "width",
  d2: "Width",
  a: "x",
  sc: _scrollCacheFunc(function (value) {
    return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;
  })
},
    _vertical = {
  s: _scrollTop,
  p: "top",
  p2: "Top",
  os: "bottom",
  os2: "Bottom",
  d: "height",
  d2: "Height",
  a: "y",
  op: _horizontal,
  sc: _scrollCacheFunc(function (value) {
    return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;
  })
},
    _getTarget = function _getTarget(t) {
  return gsap.utils.toArray(t)[0] || (typeof t === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
},
    _getScrollFunc = function _getScrollFunc(element, _ref) {
  var s = _ref.s,
      sc = _ref.sc;

  // we store the scroller functions in a alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
  var i = _scrollers.indexOf(element),
      offset = sc === _vertical.sc ? 1 : 2;

  !~i && (i = _scrollers.push(element) - 1);
  return _scrollers[i + offset] || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {
    return arguments.length ? element[s] = value : element[s];
  })));
},
    _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
  var v1 = value,
      v2 = value,
      t1 = _getTime(),
      t2 = t1,
      min = minTimeRefresh || 50,
      dropToZeroTime = Math.max(500, min * 3),
      update = function update(value, force) {
    var t = _getTime();

    if (force || t - t1 > min) {
      v2 = v1;
      v1 = value;
      t2 = t1;
      t1 = t;
    } else if (useDelta) {
      v1 += value;
    } else {
      // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
      v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
    }
  },
      reset = function reset() {
    v2 = v1 = useDelta ? 0 : v1;
    t2 = t1 = 0;
  },
      getVelocity = function getVelocity(latestValue) {
    var tOld = t2,
        vOld = v2,
        t = _getTime();

    (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
    return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
  };

  return {
    update: update,
    reset: reset,
    getVelocity: getVelocity
  };
},
    _getEvent = function _getEvent(e, preventDefault) {
  preventDefault && !e._gsapAllow && e.preventDefault();
  return e.changedTouches ? e.changedTouches[0] : e;
},
    _getAbsoluteMax = function _getAbsoluteMax(a) {
  var max = Math.max.apply(Math, _toConsumableArray(a)),
      min = Math.min.apply(Math, _toConsumableArray(a));
  return Math.abs(max) >= Math.abs(min) ? max : min;
},
    _setScrollTrigger = function _setScrollTrigger() {
  ScrollTrigger = gsap.core.globals().ScrollTrigger;
  ScrollTrigger && ScrollTrigger.core && _integrate();
},
    _initCore = function _initCore(core) {
  gsap = core || _getGSAP();

  if (gsap && typeof document !== "undefined" && document.body) {
    _win = window;
    _doc = document;
    _docEl = _doc.documentElement;
    _body = _doc.body;
    _root = [_win, _doc, _docEl, _body];
    _clamp = gsap.utils.clamp;
    _pointerType = "onpointerenter" in _body ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

    _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
    _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
    setTimeout(function () {
      return _startup = 0;
    }, 500);

    _setScrollTrigger();

    _coreInitted = 1;
  }

  return _coreInitted;
};

_horizontal.op = _vertical;
_scrollers.cache = 0;
var Observer = /*#__PURE__*/function () {
  function Observer(vars) {
    _classCallCheck(this, Observer);

    this.init(vars);
  }

  _createClass(Observer, [{
    key: "init",
    value: function init(vars) {
      _coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
      ScrollTrigger || _setScrollTrigger();
      var tolerance = vars.tolerance,
          dragMinimum = vars.dragMinimum,
          type = vars.type,
          target = vars.target,
          lineHeight = vars.lineHeight,
          debounce = vars.debounce,
          preventDefault = vars.preventDefault,
          onStop = vars.onStop,
          onStopDelay = vars.onStopDelay,
          ignore = vars.ignore,
          wheelSpeed = vars.wheelSpeed,
          event = vars.event,
          onDragStart = vars.onDragStart,
          onDragEnd = vars.onDragEnd,
          onDrag = vars.onDrag,
          onPress = vars.onPress,
          onRelease = vars.onRelease,
          onRight = vars.onRight,
          onLeft = vars.onLeft,
          onUp = vars.onUp,
          onDown = vars.onDown,
          onChangeX = vars.onChangeX,
          onChangeY = vars.onChangeY,
          onChange = vars.onChange,
          onToggleX = vars.onToggleX,
          onToggleY = vars.onToggleY,
          onHover = vars.onHover,
          onHoverEnd = vars.onHoverEnd,
          onMove = vars.onMove,
          ignoreCheck = vars.ignoreCheck,
          isNormalizer = vars.isNormalizer,
          onGestureStart = vars.onGestureStart,
          onGestureEnd = vars.onGestureEnd,
          onWheel = vars.onWheel,
          onEnable = vars.onEnable,
          onDisable = vars.onDisable,
          onClick = vars.onClick,
          scrollSpeed = vars.scrollSpeed,
          capture = vars.capture,
          allowClicks = vars.allowClicks,
          lockAxis = vars.lockAxis,
          onLockAxis = vars.onLockAxis;
      this.target = target = _getTarget(target) || _docEl;
      this.vars = vars;
      ignore && (ignore = gsap.utils.toArray(ignore));
      tolerance = tolerance || 0;
      dragMinimum = dragMinimum || 0;
      wheelSpeed = wheelSpeed || 1;
      scrollSpeed = scrollSpeed || 1;
      type = type || "wheel,touch,pointer";
      debounce = debounce !== false;
      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.

      var id,
          onStopDelayedCall,
          dragged,
          moved,
          wheeled,
          locked,
          axis,
          self = this,
          prevDeltaX = 0,
          prevDeltaY = 0,
          scrollFuncX = _getScrollFunc(target, _horizontal),
          scrollFuncY = _getScrollFunc(target, _vertical),
          scrollX = scrollFuncX(),
          scrollY = scrollFuncY(),
          limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
          // for devices that accommodate mouse events and touch events, we need to distinguish.
      isViewport = _isViewport(target),
          ownerDoc = target.ownerDocument || _doc,
          deltaX = [0, 0, 0],
          // wheel, scroll, pointer/touch
      deltaY = [0, 0, 0],
          onClickTime = 0,
          clickCapture = function clickCapture() {
        return onClickTime = _getTime();
      },
          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
      },
          onStopFunc = function onStopFunc() {
        self._vx.reset();

        self._vy.reset();

        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
          update = function update() {
        var dx = self.deltaX = _getAbsoluteMax(deltaX),
            dy = self.deltaY = _getAbsoluteMax(deltaY),
            changedX = Math.abs(dx) >= tolerance,
            changedY = Math.abs(dy) >= tolerance;

        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.

        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }

        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }

        if (moved || dragged) {
          onMove && onMove(self);
          onLockAxis && locked && onLockAxis(self);

          if (dragged) {
            onDrag(self);
            dragged = false;
          }

          moved = locked = false;
        }

        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }

        id = 0;
      },
          onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;

        self._vx.update(x);

        self._vy.update(y);

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (axis !== "y") {
          deltaX[2] += x;

          self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.

        }

        if (axis !== "x") {
          deltaY[2] += y;

          self._vy.update(y, true);
        }

        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y,
            isDragging = self.isDragging;
        self.x = x;
        self.y = y;

        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
          onDrag && (dragged = true);
          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
          isDragging || onDragStart && onDragStart(self);
        }
      },
          _onPress = self.onPress = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.

        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;

        self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.


        self._vy.reset();

        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);

        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      },
          _onRelease = function _onRelease(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);

        var wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
            // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
        eventData = _getEvent(e);

        if (!wasDragging) {
          self._vx.reset();

          self._vy.reset();

          if (preventDefault && allowClicks) {
            gsap.delayedCall(0.08, function () {
              // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  //some browsers (like mobile Safari) don't properly trigger the click event
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }

        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, wasDragging);
      },
          _onGestureStart = function _onGestureStart(e) {
        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
      },
          _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
          onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = scrollFuncX(),
            y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
          _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
          _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
          _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
          _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
          _onClick = function _onClick(e) {
        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
      };

      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
      self.deltaX = self.deltaY = 0;
      self._vx = _getVelocityProp(0, 50, true);
      self._vy = _getVelocityProp(0, 50, true);
      self.scrollX = scrollFuncX;
      self.scrollY = scrollFuncY;
      self.isDragging = self.isGesturing = self.isPressed = false;

      self.enable = function (e) {
        if (!self.isEnabled) {
          _addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, preventDefault, capture);
          type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, preventDefault, capture);

          if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);

            _addListener(ownerDoc, _eventTypes[2], _onRelease);

            _addListener(ownerDoc, _eventTypes[3], _onRelease);

            allowClicks && _addListener(target, "click", clickCapture, false, true);
            onClick && _addListener(target, "click", _onClick);
            onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
            onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
            onHover && _addListener(target, _pointerType + "enter", _onHover);
            onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
            onMove && _addListener(target, _pointerType + "move", _onMove);
          }

          self.isEnabled = true;
          e && e.type && _onPress(e);
          onEnable && onEnable(self);
        }

        return self;
      };

      self.disable = function () {
        if (self.isEnabled) {
          // only remove the _onScroll listener if there aren't any others that rely on the functionality.
          _observers.filter(function (o) {
            return o !== self && _isViewport(o.target);
          }).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          if (self.isPressed) {
            self._vx.reset();

            self._vy.reset();

            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
          }

          _removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);

          _removeListener(target, "wheel", _onWheel, capture);

          _removeListener(target, _eventTypes[0], _onPress, capture);

          _removeListener(ownerDoc, _eventTypes[2], _onRelease);

          _removeListener(ownerDoc, _eventTypes[3], _onRelease);

          _removeListener(target, "click", clickCapture, true);

          _removeListener(target, "click", _onClick);

          _removeListener(ownerDoc, "gesturestart", _onGestureStart);

          _removeListener(ownerDoc, "gestureend", _onGestureEnd);

          _removeListener(target, _pointerType + "enter", _onHover);

          _removeListener(target, _pointerType + "leave", _onHoverEnd);

          _removeListener(target, _pointerType + "move", _onMove);

          self.isEnabled = self.isPressed = self.isDragging = false;
          onDisable && onDisable(self);
        }
      };

      self.kill = function () {
        self.disable();

        var i = _observers.indexOf(self);

        i >= 0 && _observers.splice(i, 1);
        _normalizer === self && (_normalizer = 0);
      };

      _observers.push(self);

      isNormalizer && _isViewport(target) && (_normalizer = self);
      self.enable(event);
    }
  }, {
    key: "velocityX",
    get: function get() {
      return this._vx.getVelocity();
    }
  }, {
    key: "velocityY",
    get: function get() {
      return this._vy.getVelocity();
    }
  }]);

  return Observer;
}();
Observer.version = "3.10.4";

Observer.create = function (vars) {
  return new Observer(vars);
};

Observer.register = _initCore;

Observer.getAll = function () {
  return _observers.slice();
};

Observer.getById = function (id) {
  return _observers.filter(function (o) {
    return o.vars.id === id;
  })[0];
};

_getGSAP() && gsap.registerPlugin(Observer);


/***/ }),

/***/ "./src/scripts/inc/_ScrollTrigger.js":
/*!*******************************************!*\
  !*** ./src/scripts/inc/_ScrollTrigger.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollTrigger": () => (/* binding */ ScrollTrigger),
/* harmony export */   "default": () => (/* binding */ ScrollTrigger)
/* harmony export */ });
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Observer */ "./src/scripts/inc/_Observer.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * ScrollTrigger 3.10.4
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var gsap,
    _coreInitted,
    _win,
    _doc,
    _docEl,
    _body,
    _root,
    _resizeDelay,
    _toArray,
    _clamp,
    _time2,
    _syncInterval,
    _refreshing,
    _pointerIsDown,
    _transformProp,
    _i,
    _prevWidth,
    _prevHeight,
    _autoRefresh,
    _sort,
    _suppressOverwrites,
    _ignoreResize,
    _normalizer,
    _ignoreMobileResize,
    _baseScreenHeight,
    _baseScreenWidth,
    _fixIOSBug,
    _limitCallbacks,
    // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
_startup = 1,
    _getTime = Date.now,
    _time1 = _getTime(),
    _lastScrollTime = 0,
    _enabled = 0,
    _pointerDownHandler = function _pointerDownHandler() {
  return _pointerIsDown = 1;
},
    _pointerUpHandler = function _pointerUpHandler() {
  return _pointerIsDown = 0;
},
    _passThrough = function _passThrough(v) {
  return v;
},
    _round = function _round(value) {
  return Math.round(value * 100000) / 100000 || 0;
},
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _getGSAP = function _getGSAP() {
  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;
},
    _isViewport = function _isViewport(e) {
  return !!~_root.indexOf(e);
},
    _getBoundsFunc = function _getBoundsFunc(element) {
  return (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, "getBoundingClientRect") || (_isViewport(element) ? function () {
    _winOffsets.width = _win.innerWidth;
    _winOffsets.height = _win.innerHeight;
    return _winOffsets;
  } : function () {
    return _getBounds(element);
  });
},
    _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
  var d = _ref.d,
      d2 = _ref.d2,
      a = _ref.a;
  return (a = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "getBoundingClientRect")) ? function () {
    return a()[d];
  } : function () {
    return (isViewport ? _win["inner" + d2] : scroller["client" + d2]) || 0;
  };
},
    _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
  return !isViewport || ~_Observer__WEBPACK_IMPORTED_MODULE_0__._proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
    return _winOffsets;
  };
},
    _maxScroll = function _maxScroll(element, _ref2) {
  var s = _ref2.s,
      d2 = _ref2.d2,
      d = _ref2.d,
      a = _ref2.a;
  return (s = "scroll" + d2) && (a = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - (_win["inner" + d2] || _docEl["client" + d2] || _body["client" + d2]) : element[s] - element["offset" + d2];
},
    _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
  for (var i = 0; i < _autoRefresh.length; i += 3) {
    (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
  }
},
    _isString = function _isString(value) {
  return typeof value === "string";
},
    _isFunction = function _isFunction(value) {
  return typeof value === "function";
},
    _isNumber = function _isNumber(value) {
  return typeof value === "number";
},
    _isObject = function _isObject(value) {
  return _typeof(value) === "object";
},
    _callIfFunc = function _callIfFunc(value) {
  return _isFunction(value) && value();
},
    _combineFunc = function _combineFunc(f1, f2) {
  return function () {
    var result1 = _callIfFunc(f1),
        result2 = _callIfFunc(f2);

    return function () {
      _callIfFunc(result1);

      _callIfFunc(result2);
    };
  };
},
    _endAnimation = function _endAnimation(animation, reversed, pause) {
  return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
},
    _callback = function _callback(self, func) {
  if (self.enabled) {
    var result = func(self);
    result && result.totalTime && (self.callbackAnimation = result);
  }
},
    _abs = Math.abs,
    _scrollLeft = "scrollLeft",
    _scrollTop = "scrollTop",
    _left = "left",
    _top = "top",
    _right = "right",
    _bottom = "bottom",
    _width = "width",
    _height = "height",
    _Right = "Right",
    _Left = "Left",
    _Top = "Top",
    _Bottom = "Bottom",
    _padding = "padding",
    _margin = "margin",
    _Width = "Width",
    _Height = "Height",
    _px = "px",
    _getComputedStyle = function _getComputedStyle(element) {
  return _win.getComputedStyle(element);
},
    _makePositionable = function _makePositionable(element) {
  // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
  var position = _getComputedStyle(element).position;

  element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
},
    _setDefaults = function _setDefaults(obj, defaults) {
  for (var p in defaults) {
    p in obj || (obj[p] = defaults[p]);
  }

  return obj;
},
    _getBounds = function _getBounds(element, withoutTransforms) {
  var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {
    x: 0,
    y: 0,
    xPercent: 0,
    yPercent: 0,
    rotation: 0,
    rotationX: 0,
    rotationY: 0,
    scale: 1,
    skewX: 0,
    skewY: 0
  }).progress(1),
      bounds = element.getBoundingClientRect();
  tween && tween.progress(0).kill();
  return bounds;
},
    _getSize = function _getSize(element, _ref3) {
  var d2 = _ref3.d2;
  return element["offset" + d2] || element["client" + d2] || 0;
},
    _getLabelRatioArray = function _getLabelRatioArray(timeline) {
  var a = [],
      labels = timeline.labels,
      duration = timeline.duration(),
      p;

  for (p in labels) {
    a.push(labels[p] / duration);
  }

  return a;
},
    _getClosestLabel = function _getClosestLabel(animation) {
  return function (value) {
    return gsap.utils.snap(_getLabelRatioArray(animation), value);
  };
},
    _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
  var snap = gsap.utils.snap(snapIncrementOrArray),
      a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
    return a - b;
  });
  return a ? function (value, direction) {
    var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-3;
    var i;

    if (!direction) {
      return snap(value);
    }

    if (direction > 0) {
      value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.

      for (i = 0; i < a.length; i++) {
        if (a[i] >= value) {
          return a[i];
        }
      }

      return a[i - 1];
    } else {
      i = a.length;
      value += threshold;

      while (i--) {
        if (a[i] <= value) {
          return a[i];
        }
      }
    }

    return a[0];
  } : function (value, direction) {
    var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-3;
    var snapped = snap(value);
    return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
  };
},
    _getLabelAtDirection = function _getLabelAtDirection(timeline) {
  return function (value, st) {
    return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
  };
},
    _multiListener = function _multiListener(func, element, types, callback) {
  return types.split(",").forEach(function (type) {
    return func(element, type, callback);
  });
},
    _addListener = function _addListener(element, type, func, nonPassive, capture) {
  return element.addEventListener(type, func, {
    passive: !nonPassive,
    capture: !!capture
  });
},
    _removeListener = function _removeListener(element, type, func, capture) {
  return element.removeEventListener(type, func, !!capture);
},
    _wheelListener = function _wheelListener(func, el, scrollFunc) {
  return scrollFunc && scrollFunc.wheelHandler && func(el, "wheel", scrollFunc);
},
    _markerDefaults = {
  startColor: "green",
  endColor: "red",
  indent: 0,
  fontSize: "16px",
  fontWeight: "normal"
},
    _defaults = {
  toggleActions: "play",
  anticipatePin: 0
},
    _keywords = {
  top: 0,
  left: 0,
  center: 0.5,
  bottom: 1,
  right: 1
},
    _offsetToPx = function _offsetToPx(value, size) {
  if (_isString(value)) {
    var eqIndex = value.indexOf("="),
        relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;

    if (~eqIndex) {
      value.indexOf("%") > eqIndex && (relative *= size / 100);
      value = value.substr(0, eqIndex - 1);
    }

    value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
  }

  return value;
},
    _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
  var startColor = _ref4.startColor,
      endColor = _ref4.endColor,
      fontSize = _ref4.fontSize,
      indent = _ref4.indent,
      fontWeight = _ref4.fontWeight;

  var e = _doc.createElement("div"),
      useFixedPosition = _isViewport(container) || (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(container, "pinType") === "fixed",
      isScroller = type.indexOf("scroller") !== -1,
      parent = useFixedPosition ? _body : container,
      isStart = type.indexOf("start") !== -1,
      color = isStart ? startColor : endColor,
      css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

  css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
  (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
  matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
  e._isStart = isStart;
  e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
  e.style.cssText = css;
  e.innerText = name || name === 0 ? type + "-" + name : type;
  parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
  e._offset = e["offset" + direction.op.d2];

  _positionMarker(e, 0, direction, isStart);

  return e;
},
    _positionMarker = function _positionMarker(marker, start, direction, flipped) {
  var vars = {
    display: "block"
  },
      side = direction[flipped ? "os2" : "p2"],
      oppositeSide = direction[flipped ? "p2" : "os2"];
  marker._isFlipped = flipped;
  vars[direction.a + "Percent"] = flipped ? -100 : 0;
  vars[direction.a] = flipped ? "1px" : 0;
  vars["border" + side + _Width] = 1;
  vars["border" + oppositeSide + _Width] = 0;
  vars[direction.p] = start + "px";
  gsap.set(marker, vars);
},
    _triggers = [],
    _ids = {},
    _rafID,
    _sync = function _sync() {
  return _getTime() - _lastScrollTime > 34 && _updateAll();
},
    _onScroll = function _onScroll() {
  // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
  if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {
    // if the user is dragging the scrollbar, allow it.
    _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
    _rafID || (_rafID = requestAnimationFrame(_updateAll));
    _lastScrollTime || _dispatch("scrollStart");
    _lastScrollTime = _getTime();
  }
},
    _setBaseDimensions = function _setBaseDimensions() {
  _baseScreenWidth = _win.innerWidth;
  _baseScreenHeight = _win.innerHeight;
},
    _onResize = function _onResize() {
  _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++;
  !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);
},
    // ignore resizes triggered by refresh()
_listeners = {},
    _emptyArray = [],
    _media = [],
    _creatingMedia,
    // when ScrollTrigger.matchMedia() is called, we record the current media key here (like "(min-width: 800px)") so that we can assign it to everything that's created during that call. Then we can revert just those when necessary. In the ScrollTrigger's init() call, the _creatingMedia is recorded as a "media" property on the instance.
_lastMediaTick,
    _onMediaChange = function _onMediaChange(e) {
  var tick = gsap.ticker.frame,
      matches = [],
      i = 0,
      index;

  if (_lastMediaTick !== tick || _startup) {
    _revertAll();

    for (; i < _media.length; i += 4) {
      index = _win.matchMedia(_media[i]).matches;

      if (index !== _media[i + 3]) {
        // note: some browsers fire the matchMedia event multiple times, like when going full screen, so we shouldn't call the function multiple times. Check to see if it's already matched.
        _media[i + 3] = index;
        index ? matches.push(i) : _revertAll(1, _media[i]) || _isFunction(_media[i + 2]) && _media[i + 2](); // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
      }
    }

    _revertRecorded(); // in case killing/reverting any of the animations actually added inline styles back.


    for (i = 0; i < matches.length; i++) {
      index = matches[i];
      _creatingMedia = _media[index];
      _media[index + 2] = _media[index + 1](e);
    }

    _creatingMedia = 0;
    _coreInitted && _refreshAll(0, 1);
    _lastMediaTick = tick;

    _dispatch("matchMedia");
  }
},
    _softRefresh = function _softRefresh() {
  return _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true);
},
    _dispatch = function _dispatch(type) {
  return _listeners[type] && _listeners[type].map(function (f) {
    return f();
  }) || _emptyArray;
},
    _savedStyles = [],
    // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
_revertRecorded = function _revertRecorded(media) {
  for (var i = 0; i < _savedStyles.length; i += 5) {
    if (!media || _savedStyles[i + 4] === media) {
      _savedStyles[i].style.cssText = _savedStyles[i + 1];
      _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
      _savedStyles[i + 3].uncache = 1;
    }
  }
},
    _revertAll = function _revertAll(kill, media) {
  var trigger;

  for (_i = 0; _i < _triggers.length; _i++) {
    trigger = _triggers[_i];

    if (!media || trigger.media === media) {
      if (kill) {
        trigger.kill(1);
      } else {
        trigger.revert();
      }
    }
  }

  media && _revertRecorded(media);
  media || _dispatch("revert");
},
    _clearScrollMemory = function _clearScrollMemory() {
  return _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++ && _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.forEach(function (obj) {
    return typeof obj === "function" && (obj.rec = 0);
  });
},
    // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
_refreshingAll,
    _refreshID = 0,
    _refreshAll = function _refreshAll(force, skipRevert) {
  if (_lastScrollTime && !force) {
    _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

    return;
  }

  _refreshingAll = true;

  var refreshInits = _dispatch("refreshInit");

  _sort && ScrollTrigger.sort();
  skipRevert || _revertAll();

  _triggers.slice(0).forEach(function (t) {
    return t.refresh();
  }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.


  _triggers.forEach(function (t) {
    return t.vars.end === "max" && t.setPositions(t.start, _maxScroll(t.scroller, t._dir));
  }); // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max".


  refreshInits.forEach(function (result) {
    return result && result.render && result.render(-1);
  }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.

  _clearScrollMemory();

  _resizeDelay.pause();

  _refreshID++;
  _refreshingAll = false;

  _dispatch("refresh");
},
    _lastScroll = 0,
    _direction = 1,
    _primary,
    _updateAll = function _updateAll() {
  if (!_refreshingAll) {
    ScrollTrigger.isUpdating = true;
    _primary && _primary.update(0); // ScrollSmoother users refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.

    var l = _triggers.length,
        time = _getTime(),
        recordVelocity = time - _time1 >= 50,
        scroll = l && _triggers[0].scroll();

    _direction = _lastScroll > scroll ? -1 : 1;
    _lastScroll = scroll;

    if (recordVelocity) {
      if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
        _lastScrollTime = 0;

        _dispatch("scrollEnd");
      }

      _time2 = _time1;
      _time1 = time;
    }

    if (_direction < 0) {
      _i = l;

      while (_i-- > 0) {
        _triggers[_i] && _triggers[_i].update(0, recordVelocity);
      }

      _direction = 1;
    } else {
      for (_i = 0; _i < l; _i++) {
        _triggers[_i] && _triggers[_i].update(0, recordVelocity);
      }
    }

    ScrollTrigger.isUpdating = false;
  }

  _rafID = 0;
},
    _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
    _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
    _swapPinOut = function _swapPinOut(pin, spacer, state) {
  _setState(state);

  var cache = pin._gsap;

  if (cache.spacerIsNative) {
    _setState(cache.spacerState);
  } else if (pin.parentNode === spacer) {
    var parent = spacer.parentNode;

    if (parent) {
      parent.insertBefore(pin, spacer);
      parent.removeChild(spacer);
    }
  }
},
    _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
  if (pin.parentNode !== spacer) {
    var i = _propNamesToCopy.length,
        spacerStyle = spacer.style,
        pinStyle = pin.style,
        p;

    while (i--) {
      p = _propNamesToCopy[i];
      spacerStyle[p] = cs[p];
    }

    spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
    cs.display === "inline" && (spacerStyle.display = "inline-block");
    pinStyle[_bottom] = pinStyle[_right] = spacerStyle.flexBasis = "auto";
    spacerStyle.overflow = "visible";
    spacerStyle.boxSizing = "border-box";
    spacerStyle[_width] = _getSize(pin, _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal) + _px;
    spacerStyle[_height] = _getSize(pin, _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical) + _px;
    spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";

    _setState(spacerState);

    pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
    pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
    pinStyle[_padding] = cs[_padding];
    pin.parentNode.insertBefore(spacer, pin);
    spacer.appendChild(pin);
  }
},
    _capsExp = /([A-Z])/g,
    _setState = function _setState(state) {
  if (state) {
    var style = state.t.style,
        l = state.length,
        i = 0,
        p,
        value;
    (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off

    for (; i < l; i += 2) {
      value = state[i + 1];
      p = state[i];

      if (value) {
        style[p] = value;
      } else if (style[p]) {
        style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
      }
    }
  }
},
    _getState = function _getState(element) {
  // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
  var l = _stateProps.length,
      style = element.style,
      state = [],
      i = 0;

  for (; i < l; i++) {
    state.push(_stateProps[i], style[_stateProps[i]]);
  }

  state.t = element;
  return state;
},
    _copyState = function _copyState(state, override, omitOffsets) {
  var result = [],
      l = state.length,
      i = omitOffsets ? 8 : 0,
      // skip top, left, right, bottom if omitOffsets is true
  p;

  for (; i < l; i += 2) {
    p = state[i];
    result.push(p, p in override ? override[p] : state[i + 1]);
  }

  result.t = state.t;
  return result;
},
    _winOffsets = {
  left: 0,
  top: 0
},
    // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
// 	scroller = _getTarget(scroller || _win);
// 	let direction = horizontal ? _horizontal : _vertical,
// 		isViewport = _isViewport(scroller);
// 	_getSizeFunc(scroller, isViewport, direction);
// 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
// },
_parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation) {
  _isFunction(value) && (value = value(self));

  if (_isString(value) && value.substr(0, 3) === "max") {
    value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
  }

  var time = containerAnimation ? containerAnimation.time() : 0,
      p1,
      p2,
      element;
  containerAnimation && containerAnimation.seek(0);

  if (!_isNumber(value)) {
    _isFunction(trigger) && (trigger = trigger(self));
    var offsets = value.split(" "),
        bounds,
        localOffset,
        globalOffset,
        display;
    element = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger) || _body;
    bounds = _getBounds(element) || {};

    if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
      // if display is "none", it won't report getBoundingClientRect() properly
      display = element.style.display;
      element.style.display = "block";
      bounds = _getBounds(element);
      display ? element.style.display = display : element.style.removeProperty("display");
    }

    localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
    globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
    value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
    markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
    scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
  } else if (markerScroller) {
    _positionMarker(markerScroller, scrollerSize, direction, true);
  }

  if (marker) {
    var position = value + scrollerSize,
        isStart = marker._isStart;
    p1 = "scroll" + direction.d2;

    _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);

    if (useFixedPosition) {
      scrollerBounds = _getBounds(markerScroller);
      useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
    }
  }

  if (containerAnimation && element) {
    p1 = _getBounds(element);
    containerAnimation.seek(scrollerMax);
    p2 = _getBounds(element);
    containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
    value = value / containerAnimation._caScrollDist * scrollerMax;
  }

  containerAnimation && containerAnimation.seek(time);
  return containerAnimation ? value : Math.round(value);
},
    _prefixExp = /(webkit|moz|length|cssText|inset)/i,
    _reparent = function _reparent(element, parent, top, left) {
  if (element.parentNode !== parent) {
    var style = element.style,
        p,
        cs;

    if (parent === _body) {
      element._stOrig = style.cssText; // record original inline styles so we can revert them later

      cs = _getComputedStyle(element);

      for (p in cs) {
        // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
        if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
          style[p] = cs[p];
        }
      }

      style.top = top;
      style.left = left;
    } else {
      style.cssText = element._stOrig;
    }

    gsap.core.getCache(element).uncache = 1;
    parent.appendChild(element);
  }
},
    // _mergeAnimations = animations => {
// 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
// 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
// 	tl.smoothChildTiming = false;
// 	return tl;
// },
// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
_getTweenCreator = function _getTweenCreator(scroller, direction) {
  var getScroll = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),
      prop = "_scroll" + direction.p2,
      // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
  lastScroll1,
      lastScroll2,
      getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
    var tween = getTween.tween,
        onComplete = vars.onComplete,
        modifiers = {};
    initialValue = initialValue || getScroll();
    change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.

    change1 = change1 || scrollTo - initialValue;
    tween && tween.kill();
    lastScroll1 = Math.round(initialValue);
    vars[prop] = scrollTo;
    vars.modifiers = modifiers;

    modifiers[prop] = function (value) {
      value = _round(getScroll()); // round because in some [very uncommon] Windows environments, it can get reported with decimals even though it was set without.

      if (value !== lastScroll1 && value !== lastScroll2 && Math.abs(value - lastScroll1) > 2 && Math.abs(value - lastScroll2) > 2) {
        // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
        tween.kill();
        getTween.tween = 0;
      } else {
        value = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;
      }

      lastScroll2 = lastScroll1;
      return lastScroll1 = _round(value);
    };

    vars.onComplete = function () {
      getTween.tween = 0;
      onComplete && onComplete.call(tween);
    };

    tween = getTween.tween = gsap.to(scroller, vars);
    return tween;
  };

  scroller[prop] = getScroll;

  getScroll.wheelHandler = function () {
    return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
  };

  _addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.


  return getTween;
};

var ScrollTrigger = /*#__PURE__*/function () {
  function ScrollTrigger(vars, animation) {
    _classCallCheck(this, ScrollTrigger);

    _coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
    this.init(vars, animation);
  }

  _createClass(ScrollTrigger, [{
    key: "init",
    value: function init(vars, animation) {
      this.progress = this.start = 0;
      this.vars && this.kill(true, true); // in case it's being initted again

      if (!_enabled) {
        this.update = this.refresh = this.kill = _passThrough;
        return;
      }

      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {
        trigger: vars
      } : vars, _defaults);

      var _vars = vars,
          onUpdate = _vars.onUpdate,
          toggleClass = _vars.toggleClass,
          id = _vars.id,
          onToggle = _vars.onToggle,
          onRefresh = _vars.onRefresh,
          scrub = _vars.scrub,
          trigger = _vars.trigger,
          pin = _vars.pin,
          pinSpacing = _vars.pinSpacing,
          invalidateOnRefresh = _vars.invalidateOnRefresh,
          anticipatePin = _vars.anticipatePin,
          onScrubComplete = _vars.onScrubComplete,
          onSnapComplete = _vars.onSnapComplete,
          once = _vars.once,
          snap = _vars.snap,
          pinReparent = _vars.pinReparent,
          pinSpacer = _vars.pinSpacer,
          containerAnimation = _vars.containerAnimation,
          fastScrollEnd = _vars.fastScrollEnd,
          preventOverlaps = _vars.preventOverlaps,
          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical,
          isToggle = !scrub && scrub !== 0,
          scroller = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.scroller || _win),
          scrollerCache = gsap.core.getCache(scroller),
          isViewport = _isViewport(scroller),
          useFixedPosition = ("pinType" in vars ? vars.pinType : (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "pinType") || isViewport && "fixed") === "fixed",
          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
          toggleActions = isToggle && vars.toggleActions.split(" "),
          markers = "markers" in vars ? vars.markers : _defaults.markers,
          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
          self = this,
          onRefreshInit = vars.onRefreshInit && function () {
        return vars.onRefreshInit(self);
      },
          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
          lastSnap = 0,
          lastRefresh = 0,
          scrollFunc = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, direction),
          tweenTo,
          pinCache,
          snapFunc,
          scroll1,
          scroll2,
          start,
          end,
          markerStart,
          markerEnd,
          markerStartTrigger,
          markerEndTrigger,
          markerVars,
          change,
          pinOriginalState,
          pinActiveState,
          pinState,
          spacer,
          offset,
          pinGetter,
          pinSetter,
          pinStart,
          pinChange,
          spacingStart,
          spacerState,
          markerStartSetter,
          markerEndSetter,
          cs,
          snap1,
          snap2,
          scrubTween,
          scrubSmooth,
          snapDurClamp,
          snapDelayedCall,
          prevProgress,
          prevScroll,
          prevAnimProgress,
          caMarkerSetter,
          customRevertReturn;

      self.media = _creatingMedia;
      self._dir = direction;
      anticipatePin *= 45;
      self.scroller = scroller;
      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
      scroll1 = scrollFunc();
      self.vars = vars;
      animation = animation || vars.animation;

      if ("refreshPriority" in vars) {
        _sort = 1;
        vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
      }

      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
        top: _getTweenCreator(scroller, _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical),
        left: _getTweenCreator(scroller, _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal)
      };
      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

      self.scrubDuration = function (value) {
        scrubSmooth = _isNumber(value) && value;

        if (!scrubSmooth) {
          scrubTween && scrubTween.progress(1).kill();
          scrubTween = 0;
        } else {
          scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {
            ease: "expo",
            totalProgress: "+=0.001",
            duration: scrubSmooth,
            paused: true,
            onComplete: function onComplete() {
              return onScrubComplete && onScrubComplete(self);
            }
          });
        }
      };

      if (animation) {
        animation.vars.lazy = false;
        animation._initted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.render(0, true, true);
        self.animation = animation.pause();
        animation.scrollTrigger = self;
        self.scrubDuration(scrub);
        snap1 = 0;
        id || (id = animation.vars.id);
      }

      _triggers.push(self);

      if (snap) {
        if (!_isObject(snap) || snap.push) {
          snap = {
            snapTo: snap
          };
        }

        "scrollBehavior" in _body.style && gsap.set(isViewport ? [_body, _docEl] : scroller, {
          scrollBehavior: "auto"
        }); // smooth scrolling doesn't work with snap.

        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
          return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);
        } : gsap.utils.snap(snap.snapTo);
        snapDurClamp = snap.duration || {
          min: 0.1,
          max: 2
        };
        snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
        snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
          var scroll = scrollFunc(),
              refreshedRecently = _getTime() - lastRefresh < 500,
              tween = tweenTo.tween;

          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
            var progress = (scroll - start) / change,
                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0,
                change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
                naturalEnd = progress + (snap.inertia === false ? 0 : change1),
                endValue = _clamp(0, 1, snapFunc(naturalEnd, self)),
                endScroll = Math.round(start + endValue * change),
                _snap = snap,
                onStart = _snap.onStart,
                _onInterrupt = _snap.onInterrupt,
                _onComplete = _snap.onComplete;

            if (scroll <= end && scroll >= start && endScroll !== scroll) {
              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
                // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
                return;
              }

              if (snap.inertia === false) {
                change1 = endValue - progress;
              }

              tweenTo(endScroll, {
                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
                ease: snap.ease || "power3",
                data: _abs(endScroll - scroll),
                // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
                onInterrupt: function onInterrupt() {
                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
                },
                onComplete: function onComplete() {
                  self.update();
                  lastSnap = scrollFunc();
                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                  onSnapComplete && onSnapComplete(self);
                  _onComplete && _onComplete(self);
                }
              }, scroll, change1 * change, endScroll - scroll - change1 * change);
              onStart && onStart(self, tweenTo.tween);
            }
          } else if (self.isActive && lastSnap !== scroll) {
            snapDelayedCall.restart(true);
          }
        }).pause();
      }

      id && (_ids[id] = self);
      trigger = self.trigger = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(trigger || pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.

      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
      customRevertReturn && (customRevertReturn = customRevertReturn(self));
      pin = pin === true ? trigger : (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pin);
      _isString(toggleClass) && (toggleClass = {
        targets: trigger,
        className: toggleClass
      });

      if (pin) {
        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default.

        self.pin = pin;
        vars.force3D !== false && gsap.set(pin, {
          force3D: true
        });
        pinCache = gsap.core.getCache(pin);

        if (!pinCache.spacer) {
          // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
          if (pinSpacer) {
            pinSpacer = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(pinSpacer);
            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular

            pinCache.spacerIsNative = !!pinSpacer;
            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
          }

          pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
          spacer.classList.add("pin-spacer");
          id && spacer.classList.add("pin-spacer-" + id);
          pinCache.pinState = pinOriginalState = _getState(pin);
        } else {
          pinOriginalState = pinCache.pinState;
        }

        self.spacer = spacer = pinCache.spacer;
        cs = _getComputedStyle(pin);
        spacingStart = cs[pinSpacing + direction.os2];
        pinGetter = gsap.getProperty(pin);
        pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).

        _swapPinIn(pin, spacer, cs);

        pinState = _getState(pin);
      }

      if (markers) {
        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
        markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
        markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
        offset = markerStartTrigger["offset" + direction.op.d2];

        var content = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)((0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "content") || scroller);

        markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
        markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
        containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));

        if (!useFixedPosition && !(_Observer__WEBPACK_IMPORTED_MODULE_0__._proxies.length && (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getProxyProp)(scroller, "fixedMarkers") === true)) {
          _makePositionable(isViewport ? _body : scroller);

          gsap.set([markerStartTrigger, markerEndTrigger], {
            force3D: true
          });
          markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
          markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
        }
      }

      if (containerAnimation) {
        var oldOnUpdate = containerAnimation.vars.onUpdate,
            oldParams = containerAnimation.vars.onUpdateParams;
        containerAnimation.eventCallback("onUpdate", function () {
          self.update(0, 0, 1);
          oldOnUpdate && oldOnUpdate.apply(oldParams || []);
        });
      }

      self.previous = function () {
        return _triggers[_triggers.indexOf(self) - 1];
      };

      self.next = function () {
        return _triggers[_triggers.indexOf(self) + 1];
      };

      self.revert = function (revert) {
        var r = revert !== false || !self.enabled,
            prevRefreshing = _refreshing;

        if (r !== self.isReverted) {
          if (r) {
            self.scroll.rec || !_refreshing || !_refreshingAll || (self.scroll.rec = scrollFunc());
            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.

            prevProgress = self.progress;
            prevAnimProgress = animation && animation.progress();
          }

          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
            return m.style.display = r ? "none" : "block";
          });
          r && (_refreshing = 1);
          self.update(r); // make sure the pin is back in its original position so that all the measurements are correct.

          _refreshing = prevRefreshing;
          pin && (r ? _swapPinOut(pin, spacer, pinOriginalState) : (!pinReparent || !self.isActive) && _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState));
          self.isReverted = r;
        }
      };

      self.refresh = function (soft, force) {
        if ((_refreshing || !self.enabled) && !force) {
          return;
        }

        if (pin && soft && _lastScrollTime) {
          _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

          return;
        }

        !_refreshingAll && onRefreshInit && onRefreshInit(self);
        _refreshing = 1;
        lastRefresh = _getTime();

        if (tweenTo.tween) {
          tweenTo.tween.kill();
          tweenTo.tween = 0;
        }

        scrubTween && scrubTween.pause();
        invalidateOnRefresh && animation && animation.time(-0.01, true).invalidate();
        self.isReverted || self.revert();

        var size = getScrollerSize(),
            scrollerBounds = getScrollerOffsets(),
            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
            offset = 0,
            otherPinOffset = 0,
            parsedEnd = vars.end,
            parsedEndTrigger = vars.endTrigger || trigger,
            parsedStart = vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.pinnedContainer),
            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
            i = triggerIndex,
            cs,
            bounds,
            scroll,
            isVertical,
            override,
            curTrigger,
            curPin,
            oppositeScroll,
            initted,
            revertedPins;

        while (i--) {
          // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
          curTrigger = _triggers[i];
          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = 1); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.

          curPin = curTrigger.pin;

          if (curPin && (curPin === trigger || curPin === pin) && !curTrigger.isReverted) {
            revertedPins || (revertedPins = []);
            revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly

            curTrigger.revert();
          }

          if (curTrigger !== _triggers[i]) {
            // in case it got removed.
            triggerIndex--;
            i--;
          }
        }

        _isFunction(parsedStart) && (parsedStart = parsedStart(self));
        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation) || (pin ? -0.001 : 0);
        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

        if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
          if (~parsedEnd.indexOf(" ")) {
            parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
          } else {
            offset = _offsetToPx(parsedEnd.substr(2), size);
            parsedEnd = _isString(parsedStart) ? parsedStart : start + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.

            parsedEndTrigger = trigger;
          }
        }

        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation)) || -0.001;
        change = end - start || (start -= 0.01) && 0.001;
        offset = 0;
        i = triggerIndex;

        while (i--) {
          curTrigger = _triggers[i];
          curPin = curTrigger.pin;

          if (curPin && curTrigger.start - curTrigger._pinPush < start && !containerAnimation && curTrigger.end > 0) {
            cs = curTrigger.end - curTrigger.start;

            if ((curPin === trigger || curPin === pinnedContainer) && !_isNumber(parsedStart)) {
              // numeric start values shouldn't be offset at all - treat them as absolute
              offset += cs * (1 - curTrigger.progress);
            }

            curPin === pin && (otherPinOffset += cs);
          }
        }

        start += offset;
        end += offset;
        self._pinPush = otherPinOffset;

        if (markerStart && offset) {
          // offset the markers if necessary
          cs = {};
          cs[direction.a] = "+=" + offset;
          pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
          gsap.set([markerStart, markerEnd], cs);
        }

        if (pin) {
          cs = _getComputedStyle(pin);
          isVertical = direction === _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical;
          scroll = scrollFunc(); // recalculate because the triggers can affect the scroll

          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
          !max && end > 1 && ((isViewport ? _body : scroller).style["overflow-" + direction.a] = "scroll"); // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://greensock.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/

          _swapPinIn(pin, spacer, cs);

          pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.

          bounds = _getBounds(pin, true);
          oppositeScroll = useFixedPosition && (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(scroller, isVertical ? _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical)();

          if (pinSpacing) {
            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
            spacerState.t = spacer;
            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;
            i && spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).

            _setState(spacerState);

            useFixedPosition && scrollFunc(prevScroll);
          }

          if (useFixedPosition) {
            override = {
              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
              boxSizing: "border-box",
              position: "fixed"
            };
            override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
            override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
            override[_padding] = cs[_padding];
            override[_padding + _Top] = cs[_padding + _Top];
            override[_padding + _Right] = cs[_padding + _Right];
            override[_padding + _Bottom] = cs[_padding + _Bottom];
            override[_padding + _Left] = cs[_padding + _Left];
            pinActiveState = _copyState(pinOriginalState, override, pinReparent);
          }

          if (animation) {
            // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
            initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.

            _suppressOverwrites(1);

            animation.render(animation.duration(), true, true);
            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
            change !== pinChange && useFixedPosition && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.

            animation.render(0, true, true);
            initted || animation.invalidate();

            _suppressOverwrites(0);
          } else {
            pinChange = change;
          }
        } else if (trigger && scrollFunc() && !containerAnimation) {
          // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
          bounds = trigger.parentNode;

          while (bounds && bounds !== _body) {
            if (bounds._pinOffset) {
              start -= bounds._pinOffset;
              end -= bounds._pinOffset;
            }

            bounds = bounds.parentNode;
          }
        }

        revertedPins && revertedPins.forEach(function (t) {
          return t.revert(false);
        });
        self.start = start;
        self.end = end;
        scroll1 = scroll2 = scrollFunc(); // reset velocity

        if (!containerAnimation) {
          scroll1 < prevScroll && scrollFunc(prevScroll);
          self.scroll.rec = 0;
        }

        self.revert(false);

        if (snapDelayedCall) {
          lastSnap = -1;
          self.isActive && scrollFunc(start + change * prevProgress); // just so snapping gets re-enabled, clear out any recorded last value

          snapDelayedCall.restart(true);
        }

        _refreshing = 0;
        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().

        if (prevProgress !== self.progress || containerAnimation) {
          // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
          animation && !isToggle && animation.totalProgress(prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.

          self.progress = prevProgress;
          self.update(0, 0, 1);
        }

        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange)); //			scrubTween && scrubTween.invalidate();

        onRefresh && onRefresh(self);
      };

      self.getVelocity = function () {
        return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;
      };

      self.endAnimation = function () {
        _endAnimation(self.callbackAnimation);

        if (animation) {
          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
        }
      };

      self.labelToScroll = function (label) {
        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
      };

      self.getTrailing = function (name) {
        var i = _triggers.indexOf(self),
            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);

        return (_isString(name) ? a.filter(function (t) {
          return t.vars.preventOverlaps === name;
        }) : a).filter(function (t) {
          return self.direction > 0 ? t.end <= start : t.start >= end;
        });
      };

      self.update = function (reset, recordVelocity, forceFake) {
        if (containerAnimation && !forceFake && !reset) {
          return;
        }

        var scroll = self.scroll(),
            p = reset ? 0 : (scroll - start) / change,
            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
            prevProgress = self.progress,
            isActive,
            wasActive,
            toggleState,
            action,
            stateChanged,
            toggled,
            isAtMax,
            isTakingAction;

        if (recordVelocity) {
          scroll2 = scroll1;
          scroll1 = containerAnimation ? scrollFunc() : scroll;

          if (snap) {
            snap2 = snap1;
            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
          }
        } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).


        anticipatePin && !clipped && pin && !_refreshing && !_startup && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin && (clipped = 0.0001);

        if (clipped !== prevProgress && self.enabled) {
          isActive = self.isActive = !!clipped && clipped < 1;
          wasActive = !!prevProgress && prevProgress < 1;
          toggled = isActive !== wasActive;
          stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)

          self.direction = clipped > prevProgress ? 1 : -1;
          self.progress = clipped;

          if (stateChanged && !_refreshing) {
            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.

            if (isToggle) {
              action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)

              isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
            }
          }

          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
            return t.endAnimation();
          }));

          if (!isToggle) {
            if (scrubTween && !_refreshing && !_startup) {
              (containerAnimation || _primary && _primary !== self) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.

              if (scrubTween.resetTo) {
                scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
              } else {
                // legacy support (courtesy), before 3.10.0
                scrubTween.vars.totalProgress = clipped;
                scrubTween.invalidate().restart();
              }
            } else if (animation) {
              animation.totalProgress(clipped, !!_refreshing);
            }
          }

          if (pin) {
            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);

            if (!useFixedPosition) {
              pinSetter(_round(pinStart + pinChange * clipped));
            } else if (stateChanged) {
              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)

              if (pinReparent) {
                if (!reset && (isActive || isAtMax)) {
                  var bounds = _getBounds(pin, true),
                      _offset = scroll - start;

                  _reparent(pin, _body, bounds.top + (direction === _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical ? _offset : 0) + _px, bounds.left + (direction === _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical ? 0 : _offset) + _px);
                } else {
                  _reparent(pin, spacer);
                }
              }

              _setState(isActive || isAtMax ? pinActiveState : pinState);

              pinChange !== change && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
            }
          }

          snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
            return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
          }); // classes could affect positioning, so do it even if reset or refreshing is true.

          onUpdate && !isToggle && !reset && onUpdate(self);

          if (stateChanged && !_refreshing) {
            if (isToggle) {
              if (isTakingAction) {
                if (action === "complete") {
                  animation.pause().totalProgress(1);
                } else if (action === "reset") {
                  animation.restart(true).pause();
                } else if (action === "restart") {
                  animation.restart(true);
                } else {
                  animation[action]();
                }
              }

              onUpdate && onUpdate(self);
            }

            if (toggled || !_limitCallbacks) {
              // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
              onToggle && toggled && _callback(self, onToggle);
              callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.

              if (!toggled) {
                // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
                toggleState = clipped === 1 ? 1 : 3;
                callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              }
            }

            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
              _endAnimation(self.callbackAnimation);

              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, !clipped, 1);
            }
          } else if (isToggle && onUpdate && !_refreshing) {
            onUpdate(self);
          }
        } // update absolutely-positioned markers (only if the scroller isn't the viewport)


        if (markerEndSetter) {
          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
          markerEndSetter(n);
        }

        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
      };

      self.enable = function (reset, refresh) {
        if (!self.enabled) {
          self.enabled = true;

          _addListener(scroller, "resize", _onResize);

          _addListener(isViewport ? _doc : scroller, "scroll", _onScroll);

          onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);

          if (reset !== false) {
            self.progress = prevProgress = 0;
            scroll1 = scroll2 = lastSnap = scrollFunc();
          }

          refresh !== false && self.refresh();
        }
      };

      self.getTween = function (snap) {
        return snap && tweenTo ? tweenTo.tween : scrubTween;
      };

      self.setPositions = function (newStart, newEnd) {
        // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
        if (pin) {
          pinStart += newStart - start;
          pinChange += newEnd - newStart - change;
        }

        self.start = start = newStart;
        self.end = end = newEnd;
        change = newEnd - newStart;
        self.update();
      };

      self.disable = function (reset, allowAnimation) {
        if (self.enabled) {
          reset !== false && self.revert();
          self.enabled = self.isActive = false;
          allowAnimation || scrubTween && scrubTween.pause();
          prevScroll = 0;
          pinCache && (pinCache.uncache = 1);
          onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);

          if (snapDelayedCall) {
            snapDelayedCall.pause();
            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
          }

          if (!isViewport) {
            var i = _triggers.length;

            while (i--) {
              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
                return; //don't remove the listeners if there are still other triggers referencing it.
              }
            }

            _removeListener(scroller, "resize", _onResize);

            _removeListener(scroller, "scroll", _onScroll);
          }
        }
      };

      self.kill = function (revert, allowAnimation) {
        self.disable(revert, allowAnimation);
        scrubTween && !allowAnimation && scrubTween.kill();
        id && delete _ids[id];

        var i = _triggers.indexOf(self);

        i >= 0 && _triggers.splice(i, 1);
        i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
        // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.

        i = 0;

        _triggers.forEach(function (t) {
          return t.scroller === self.scroller && (i = 1);
        });

        i || (self.scroll.rec = 0);

        if (animation) {
          animation.scrollTrigger = null;
          revert && animation.render(-1);
          allowAnimation || animation.kill();
        }

        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
          return m.parentNode && m.parentNode.removeChild(m);
        });
        _primary === self && (_primary = 0);

        if (pin) {
          pinCache && (pinCache.uncache = 1);
          i = 0;

          _triggers.forEach(function (t) {
            return t.pin === pin && i++;
          });

          i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
        }

        vars.onKill && vars.onKill(self);
      };

      self.enable(false, false);
      customRevertReturn && customRevertReturn(self);
      !animation || !animation.add || change ? self.refresh() : gsap.delayedCall(0.01, function () {
        return start || end || self.refresh();
      }) && (change = 0.01) && (start = end = 0); // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
    }
  }], [{
    key: "register",
    value: function register(core) {
      if (!_coreInitted) {
        gsap = core || _getGSAP();
        _windowExists() && window.document && ScrollTrigger.enable();
        _coreInitted = _enabled;
      }

      return _coreInitted;
    }
  }, {
    key: "defaults",
    value: function defaults(config) {
      if (config) {
        for (var p in config) {
          _defaults[p] = config[p];
        }
      }

      return _defaults;
    }
  }, {
    key: "disable",
    value: function disable(reset, kill) {
      _enabled = 0;

      _triggers.forEach(function (trigger) {
        return trigger[kill ? "kill" : "disable"](reset);
      });

      _removeListener(_win, "wheel", _onScroll);

      _removeListener(_doc, "scroll", _onScroll);

      clearInterval(_syncInterval);

      _removeListener(_doc, "touchcancel", _passThrough);

      _removeListener(_body, "touchstart", _passThrough);

      _multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);

      _multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);

      _resizeDelay.kill();

      _iterateAutoRefresh(_removeListener);

      for (var i = 0; i < _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {
        _wheelListener(_removeListener, _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);

        _wheelListener(_removeListener, _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);
      }
    }
  }, {
    key: "enable",
    value: function enable() {
      _win = window;
      _doc = document;
      _docEl = _doc.documentElement;
      _body = _doc.body;

      if (gsap) {
        _toArray = gsap.utils.toArray;
        _clamp = gsap.utils.clamp;
        _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
        gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.

        if (_body) {
          _enabled = 1;
          _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

          ScrollTrigger.isTouch = _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch;
          _fixIOSBug = _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503

          _addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.


          _root = [_win, _doc, _docEl, _body];
          ScrollTrigger.matchMedia({
            // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
            "(orientation: portrait)": function orientationPortrait() {
              _setBaseDimensions();

              return _setBaseDimensions;
            }
          });

          _addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!


          var bodyStyle = _body.style,
              border = bodyStyle.borderTopStyle,
              bounds,
              i;
          bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.

          bounds = _getBounds(_body);
          _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical.m = Math.round(bounds.top + _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding

          _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal.m = Math.round(bounds.left + _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal.sc()) || 0;
          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style"); // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.

          _syncInterval = setInterval(_sync, 250);
          gsap.delayedCall(0.5, function () {
            return _startup = 0;
          });

          _addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.


          _addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/


          _multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);

          _multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler); // _transformProp = gsap.utils.checkPrefix("transform");


          _stateProps.push(_transformProp);

          _coreInitted = _getTime();
          _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
          _autoRefresh = [_doc, "visibilitychange", function () {
            var w = _win.innerWidth,
                h = _win.innerHeight;

            if (_doc.hidden) {
              _prevWidth = w;
              _prevHeight = h;
            } else if (_prevWidth !== w || _prevHeight !== h) {
              _onResize();
            }
          }, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];

          _iterateAutoRefresh(_addListener);

          _triggers.forEach(function (trigger) {
            return trigger.enable(0, 1);
          });

          for (i = 0; i < _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.length; i += 3) {
            _wheelListener(_removeListener, _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 1]);

            _wheelListener(_removeListener, _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i], _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers[i + 2]);
          }
        }
      }
    }
  }, {
    key: "config",
    value: function config(vars) {
      "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
      var ms = vars.syncInterval;
      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
      "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

      if ("autoRefreshEvents" in vars) {
        _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
        _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
      }
    }
  }, {
    key: "scrollerProxy",
    value: function scrollerProxy(target, vars) {
      var t = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(target),
          i = _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.indexOf(t),
          isViewport = _isViewport(t);

      if (~i) {
        _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.splice(i, isViewport ? 6 : 2);
      }

      if (vars) {
        isViewport ? _Observer__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _Observer__WEBPACK_IMPORTED_MODULE_0__._proxies.unshift(t, vars);
      }
    }
  }, {
    key: "matchMedia",
    value: function matchMedia(vars) {
      // _media is populated in the following order: mediaQueryString, onMatch, onUnmatch, isMatched. So if there are two media queries, the Array would have a length of 8
      var mq, p, i, func, result;

      for (p in vars) {
        i = _media.indexOf(p);
        func = vars[p];
        _creatingMedia = p;

        if (p === "all") {
          func();
        } else {
          mq = _win.matchMedia(p);

          if (mq) {
            mq.matches && (result = func());

            if (~i) {
              _media[i + 1] = _combineFunc(_media[i + 1], func);
              _media[i + 2] = _combineFunc(_media[i + 2], result);
            } else {
              i = _media.length;

              _media.push(p, func, result);

              mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
            }

            _media[i + 3] = mq.matches;
          }
        }

        _creatingMedia = 0;
      }

      return _media;
    }
  }, {
    key: "clearMatchMedia",
    value: function clearMatchMedia(query) {
      query || (_media.length = 0);
      query = _media.indexOf(query);
      query >= 0 && _media.splice(query, 4);
    }
  }, {
    key: "isInViewport",
    value: function isInViewport(element, ratio, horizontal) {
      var bounds = (_isString(element) ? (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element) : element).getBoundingClientRect(),
          offset = bounds[horizontal ? _width : _height] * ratio || 0;
      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
    }
  }, {
    key: "positionInViewport",
    value: function positionInViewport(element, referencePoint, horizontal) {
      _isString(element) && (element = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element));
      var bounds = element.getBoundingClientRect(),
          size = bounds[horizontal ? _width : _height],
          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
      return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
    }
  }]);

  return ScrollTrigger;
}();
ScrollTrigger.version = "3.10.4";

ScrollTrigger.saveStyles = function (targets) {
  return targets ? _toArray(targets).forEach(function (target) {
    // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
    if (target && target.style) {
      var i = _savedStyles.indexOf(target);

      i >= 0 && _savedStyles.splice(i, 5);

      _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _creatingMedia);
    }
  }) : _savedStyles;
};

ScrollTrigger.revert = function (soft, media) {
  return _revertAll(!soft, media);
};

ScrollTrigger.create = function (vars, animation) {
  return new ScrollTrigger(vars, animation);
};

ScrollTrigger.refresh = function (safe) {
  return safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
};

ScrollTrigger.update = _updateAll;
ScrollTrigger.clearScrollMemory = _clearScrollMemory;

ScrollTrigger.maxScroll = function (element, horizontal) {
  return _maxScroll(element, horizontal ? _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical);
};

ScrollTrigger.getScrollFunc = function (element, horizontal) {
  return (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)((0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(element), horizontal ? _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal : _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical);
};

ScrollTrigger.getById = function (id) {
  return _ids[id];
};

ScrollTrigger.getAll = function () {
  return _triggers.filter(function (t) {
    return t.vars.id !== "ScrollSmoother";
  });
}; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.


ScrollTrigger.isScrolling = function () {
  return !!_lastScrollTime;
};

ScrollTrigger.snapDirectional = _snapDirectional;

ScrollTrigger.addEventListener = function (type, callback) {
  var a = _listeners[type] || (_listeners[type] = []);
  ~a.indexOf(callback) || a.push(callback);
};

ScrollTrigger.removeEventListener = function (type, callback) {
  var a = _listeners[type],
      i = a && a.indexOf(callback);
  i >= 0 && a.splice(i, 1);
};

ScrollTrigger.batch = function (targets, vars) {
  var result = [],
      varsCopy = {},
      interval = vars.interval || 0.016,
      batchMax = vars.batchMax || 1e9,
      proxyCallback = function proxyCallback(type, callback) {
    var elements = [],
        triggers = [],
        delay = gsap.delayedCall(interval, function () {
      callback(elements, triggers);
      elements = [];
      triggers = [];
    }).pause();
    return function (self) {
      elements.length || delay.restart(true);
      elements.push(self.trigger);
      triggers.push(self);
      batchMax <= elements.length && delay.progress(1);
    };
  },
      p;

  for (p in vars) {
    varsCopy[p] = p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
  }

  if (_isFunction(batchMax)) {
    batchMax = batchMax();

    _addListener(ScrollTrigger, "refresh", function () {
      return batchMax = vars.batchMax();
    });
  }

  _toArray(targets).forEach(function (target) {
    var config = {};

    for (p in varsCopy) {
      config[p] = varsCopy[p];
    }

    config.trigger = target;
    result.push(ScrollTrigger.create(config));
  });

  return result;
}; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).


var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
  current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
  return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
},
    _allowNativePanning = function _allowNativePanning(target, direction) {
  if (direction === true) {
    target.style.removeProperty("touch-action");
  } else {
    target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (_Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
  }

  target === _docEl && _allowNativePanning(_body, direction);
},
    _overflow = {
  auto: 1,
  scroll: 1
},
    _nestedScroll = function _nestedScroll(_ref5) {
  var event = _ref5.event,
      target = _ref5.target,
      axis = _ref5.axis;

  var node = (event.changedTouches ? event.changedTouches[0] : event).target,
      cache = node._gsap || gsap.core.getCache(node),
      time = _getTime(),
      cs;

  if (!cache._isScrollT || time - cache._isScrollT > 2000) {
    // cache for 2 seconds to improve performance.
    while (node && node.scrollHeight <= node.clientHeight) {
      node = node.parentNode;
    }

    cache._isScroll = node && !_isViewport(node) && node !== target && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
    cache._isScrollT = time;
  }

  (cache._isScroll || axis === "x") && (event._gsapAllow = true);
},
    // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
_inputObserver = function _inputObserver(target, type, inputs, nested) {
  return _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.create({
    target: target,
    capture: true,
    debounce: false,
    lockAxis: true,
    type: type,
    onWheel: nested = nested && _nestedScroll,
    onPress: nested,
    onDrag: nested,
    onScroll: nested,
    onEnable: function onEnable() {
      return inputs && _addListener(_doc, _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, false, true);
    },
    onDisable: function onDisable() {
      return _removeListener(_doc, _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.eventTypes[0], _captureInputs, true);
    }
  });
},
    _inputExp = /(input|label|select|textarea)/i,
    _inputIsFocused,
    _captureInputs = function _captureInputs(e) {
  var isInput = _inputExp.test(e.target.tagName);

  if (isInput || _inputIsFocused) {
    e._gsapAllow = true;
    _inputIsFocused = isInput;
  }
},
    _getScrollNormalizer = function _getScrollNormalizer(vars) {
  _isObject(vars) || (vars = {});
  vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
  vars.type || (vars.type = "wheel,touch");
  vars.debounce = !!vars.debounce;
  vars.id = vars.id || "normalizer";

  var _vars2 = vars,
      normalizeScrollX = _vars2.normalizeScrollX,
      momentum = _vars2.momentum,
      allowNestedScroll = _vars2.allowNestedScroll,
      self,
      maxY,
      target = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.target) || _docEl,
      smoother = gsap.core.globals().ScrollSmoother,
      content = _fixIOSBug && (vars.content && (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getTarget)(vars.content) || smoother && smoother.get() && smoother.get().content()),
      scrollFuncY = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical),
      scrollFuncX = (0,_Observer__WEBPACK_IMPORTED_MODULE_0__._getScrollFunc)(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal),
      scale = 1,
      initialScale = (_Observer__WEBPACK_IMPORTED_MODULE_0__.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
      wheelRefresh = 0,
      resolveMomentumDuration = _isFunction(momentum) ? function () {
    return momentum(self);
  } : function () {
    return momentum || 2.8;
  },
      skipTouchMove,
      lastRefreshID,
      inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
      resumeTouchMove = function resumeTouchMove() {
    return skipTouchMove = false;
  },
      scrollClampX = _passThrough,
      scrollClampY = _passThrough,
      updateClamps = function updateClamps() {
    maxY = _maxScroll(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical);
    scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
    normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal)));
    lastRefreshID = _refreshID;
  },
      ignoreDrag = function ignoreDrag() {
    if (skipTouchMove) {
      requestAnimationFrame(resumeTouchMove); // we MUST wait for a requestAnimationFrame, otherwise iOS will misreport the value.

      var offset = _round(self.deltaY / 2),
          scroll = scrollClampY(scrollFuncY.v - offset);

      if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
        scrollFuncY.offset = scroll - scrollFuncY.v;
        content.style.transform = "translateY(" + -scrollFuncY.offset + "px)";
        content._gsap && (content._gsap.y = -scrollFuncY.offset + "px");
        scrollFuncY.cacheID = _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache;

        _updateAll();
      }

      return true;
    }

    if (content) {
      content.style.transform = "translateY(0px)";
      scrollFuncY.offset = scrollFuncY.cacheID = 0;
      content._gsap && (content._gsap.y = "0px");
    }

    skipTouchMove = true;
  },
      tween,
      startScrollX,
      startScrollY,
      onStopDelayedCall,
      onResize = function onResize() {
    // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
    updateClamps();

    if (tween.isActive() && tween.vars.scrollY > maxY) {
      scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
    }
  };

  vars.ignoreCheck = function (e) {
    return _fixIOSBug && e.type === "touchmove" && ignoreDrag(e) || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
  };

  vars.onPress = function () {
    var prevScale = scale;
    scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);
    tween.pause();
    prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
    skipTouchMove = false;
    startScrollX = scrollFuncX();
    startScrollY = scrollFuncY();
    updateClamps();
    lastRefreshID = _refreshID;
  };

  vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
    if (content) {
      content.style.transform = "translateY(0px)";
      scrollFuncY.offset = scrollFuncY.cacheID = 0;
      content._gsap && (content._gsap.y = "0px");
    }

    if (!wasDragging) {
      onStopDelayedCall.restart(true);
    } else {
      _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers.cache++; // make sure we're pulling the non-cached value
      // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)

      var dur = resolveMomentumDuration(),
          currentScroll,
          endScroll;

      if (normalizeScrollX) {
        currentScroll = scrollFuncX();
        endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.

        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._horizontal));
        tween.vars.scrollX = scrollClampX(endScroll);
      }

      currentScroll = scrollFuncY();
      endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)

      dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _Observer__WEBPACK_IMPORTED_MODULE_0__._vertical));
      tween.vars.scrollY = scrollClampY(endScroll);
      tween.invalidate().duration(dur).play(0.01);

      if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
        // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
        gsap.to({}, {
          onUpdate: onResize,
          duration: dur
        });
      }
    }
  };

  vars.onWheel = function () {
    tween._ts && tween.pause();

    if (_getTime() - wheelRefresh > 1000) {
      // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
      lastRefreshID = 0;
      wheelRefresh = _getTime();
    }
  };

  vars.onChange = function (self, dx, dy, xArray, yArray) {
    _refreshID !== lastRefreshID && updateClamps();
    dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.

    dy && scrollFuncY(scrollClampY(yArray[2] === dy ? startScrollY + (self.startY - self.y) : scrollFuncY() + dy - yArray[1]));

    _updateAll();
  };

  vars.onEnable = function () {
    _allowNativePanning(target, normalizeScrollX ? false : "x");

    _addListener(_win, "resize", onResize);

    inputObserver.enable();
  };

  vars.onDisable = function () {
    _allowNativePanning(target, true);

    _removeListener(_win, "resize", onResize);

    inputObserver.kill();
  };

  self = new _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);
  self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.

  _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.

  onStopDelayedCall = self._dc;
  tween = gsap.to(self, {
    ease: "power4",
    paused: true,
    scrollX: normalizeScrollX ? "+=0.1" : "+=0",
    scrollY: "+=0.1",
    onComplete: onStopDelayedCall.vars.onComplete
  });
  return self;
};

ScrollTrigger.sort = function (func) {
  return _triggers.sort(func || function (a, b) {
    return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);
  });
};

ScrollTrigger.observe = function (vars) {
  return new _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer(vars);
};

ScrollTrigger.normalizeScroll = function (vars) {
  if (typeof vars === "undefined") {
    return _normalizer;
  }

  if (vars === true && _normalizer) {
    return _normalizer.enable();
  }

  if (vars === false) {
    return _normalizer && _normalizer.kill();
  }

  var normalizer = vars instanceof _Observer__WEBPACK_IMPORTED_MODULE_0__.Observer ? vars : _getScrollNormalizer(vars);
  _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
  _isViewport(normalizer.target) && (_normalizer = normalizer);
  return normalizer;
};

ScrollTrigger.core = {
  // smaller file size way to leverage in ScrollSmoother and Observer
  _getVelocityProp: _Observer__WEBPACK_IMPORTED_MODULE_0__._getVelocityProp,
  _inputObserver: _inputObserver,
  _scrollers: _Observer__WEBPACK_IMPORTED_MODULE_0__._scrollers,
  _proxies: _Observer__WEBPACK_IMPORTED_MODULE_0__._proxies,
  bridge: {
    // when normalizeScroll sets the scroll position (ss = setScroll)
    ss: function ss() {
      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime();
    },
    // a way to get the _refreshing value in Observer
    ref: function ref() {
      return _refreshing;
    }
  }
};
_getGSAP() && gsap.registerPlugin(ScrollTrigger);


/***/ }),

/***/ "./src/scripts/inc/_SplitText.js":
/*!***************************************!*\
  !*** ./src/scripts/inc/_SplitText.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SplitText": () => (/* binding */ SplitText),
/* harmony export */   "default": () => (/* binding */ SplitText)
/* harmony export */ });
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_strings.js */ "./src/scripts/inc/_strings.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * SplitText: 3.10.4
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */


var _doc,
    _win,
    _coreInitted,
    _stripExp = /(?:\r|\n|\t\t)/g,
    //find carriage returns, new line feeds and double-tabs.
_multipleSpacesExp = /(?:\s\s+)/g,
    _initCore = function _initCore() {
  _doc = document;
  _win = window;
  _coreInitted = 1;
},
    _bonusValidated = 1,
    //<name>SplitText</name>
_getComputedStyle = function _getComputedStyle(element) {
  return _win.getComputedStyle(element);
},
    _isArray = Array.isArray,
    _slice = [].slice,
    _toArray = function _toArray(value, leaveStrings) {
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  var type;
  return _isArray(value) ? value : (type = _typeof(value)) === "string" && !leaveStrings && value ? _slice.call(_doc.querySelectorAll(value), 0) : value && type === "object" && "length" in value ? _slice.call(value, 0) : value ? [value] : [];
},
    _isAbsolute = function _isAbsolute(vars) {
  return vars.position === "absolute" || vars.absolute === true;
},
    //some characters are combining marks (think diacritics/accents in European languages) which involve 2 or 4 characters that combine in the browser to form a single character. Pass in the remaining text and an array of the special characters to search for and if the text starts with one of those special characters, it'll spit back the number of characters to retain (often 2 or 4). Used in the specialChars features that was introduced in 0.6.0.
_findSpecialChars = function _findSpecialChars(text, chars) {
  var i = chars.length,
      s;

  while (--i > -1) {
    s = chars[i];

    if (text.substr(0, s.length) === s) {
      return s.length;
    }
  }
},
    _divStart = " style='position:relative;display:inline-block;'",
    _cssClassFunc = function _cssClassFunc() {
  var cssClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var tag = arguments.length > 1 ? arguments[1] : undefined;
  var iterate = ~cssClass.indexOf("++"),
      num = 1;

  if (iterate) {
    cssClass = cssClass.split("++").join("");
  }

  return function () {
    return "<" + tag + _divStart + (cssClass ? " class='" + cssClass + (iterate ? num++ : "") + "'>" : ">");
  };
},
    _swapText = function _swapText(element, oldText, newText) {
  var type = element.nodeType;

  if (type === 1 || type === 9 || type === 11) {
    for (element = element.firstChild; element; element = element.nextSibling) {
      _swapText(element, oldText, newText);
    }
  } else if (type === 3 || type === 4) {
    element.nodeValue = element.nodeValue.split(oldText).join(newText);
  }
},
    _pushReversed = function _pushReversed(a, merge) {
  var i = merge.length;

  while (--i > -1) {
    a.push(merge[i]);
  }
},
    _isBeforeWordDelimiter = function _isBeforeWordDelimiter(e, root, wordDelimiter) {
  var next;

  while (e && e !== root) {
    next = e._next || e.nextSibling;

    if (next) {
      return next.textContent.charAt(0) === wordDelimiter;
    }

    e = e.parentNode || e._parent;
  }
},
    _deWordify = function _deWordify(e) {
  var children = _toArray(e.childNodes),
      l = children.length,
      i,
      child;

  for (i = 0; i < l; i++) {
    child = children[i];

    if (child._isSplit) {
      _deWordify(child);
    } else {
      if (i && child.previousSibling && child.previousSibling.nodeType === 3) {
        child.previousSibling.nodeValue += child.nodeType === 3 ? child.nodeValue : child.firstChild.nodeValue;
        e.removeChild(child);
      } else if (child.nodeType !== 3) {
        e.insertBefore(child.firstChild, child);
        e.removeChild(child);
      }
    }
  }
},
    _getStyleAsNumber = function _getStyleAsNumber(name, computedStyle) {
  return parseFloat(computedStyle[name]) || 0;
},
    _setPositionsAfterSplit = function _setPositionsAfterSplit(element, vars, allChars, allWords, allLines, origWidth, origHeight) {
  var cs = _getComputedStyle(element),
      paddingLeft = _getStyleAsNumber("paddingLeft", cs),
      lineOffsetY = -999,
      borderTopAndBottom = _getStyleAsNumber("borderBottomWidth", cs) + _getStyleAsNumber("borderTopWidth", cs),
      borderLeftAndRight = _getStyleAsNumber("borderLeftWidth", cs) + _getStyleAsNumber("borderRightWidth", cs),
      padTopAndBottom = _getStyleAsNumber("paddingTop", cs) + _getStyleAsNumber("paddingBottom", cs),
      padLeftAndRight = _getStyleAsNumber("paddingLeft", cs) + _getStyleAsNumber("paddingRight", cs),
      lineThreshold = _getStyleAsNumber("fontSize", cs) * (vars.lineThreshold || 0.2),
      textAlign = cs.textAlign,
      charArray = [],
      wordArray = [],
      lineArray = [],
      wordDelimiter = vars.wordDelimiter || " ",
      tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
      types = vars.type || vars.split || "chars,words,lines",
      lines = allLines && ~types.indexOf("lines") ? [] : null,
      words = ~types.indexOf("words"),
      chars = ~types.indexOf("chars"),
      absolute = _isAbsolute(vars),
      linesClass = vars.linesClass,
      iterateLine = ~(linesClass || "").indexOf("++"),
      spaceNodesToRemove = [],
      isFlex = cs.display === "flex",
      prevInlineDisplay = element.style.display,
      i,
      j,
      l,
      node,
      nodes,
      isChild,
      curLine,
      addWordSpaces,
      style,
      lineNode,
      lineWidth,
      offset;

  iterateLine && (linesClass = linesClass.split("++").join(""));
  isFlex && (element.style.display = "block"); //copy all the descendant nodes into an array (we can't use a regular nodeList because it's live and we may need to renest things)

  j = element.getElementsByTagName("*");
  l = j.length;
  nodes = [];

  for (i = 0; i < l; i++) {
    nodes[i] = j[i];
  } //for absolute positioning, we need to record the x/y offsets and width/height for every <div>. And even if we're not positioning things absolutely, in order to accommodate lines, we must figure out where the y offset changes so that we can sense where the lines break, and we populate the lines array.


  if (lines || absolute) {
    for (i = 0; i < l; i++) {
      node = nodes[i];
      isChild = node.parentNode === element;

      if (isChild || absolute || chars && !words) {
        offset = node.offsetTop;

        if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && (node.nodeName !== "BR" || i === 0)) {
          //we found some rare occasions where a certain character like &#8209; could cause the offsetTop to be off by 1 pixel, so we build in a threshold.
          curLine = [];
          lines.push(curLine);
          lineOffsetY = offset;
        }

        if (absolute) {
          //record offset x and y, as well as width and height so that we can access them later for positioning. Grabbing them at once ensures we don't trigger a browser paint & we maximize performance.
          node._x = node.offsetLeft;
          node._y = offset;
          node._w = node.offsetWidth;
          node._h = node.offsetHeight;
        }

        if (lines) {
          if (node._isSplit && isChild || !chars && isChild || words && isChild || !words && node.parentNode.parentNode === element && !node.parentNode._isSplit) {
            curLine.push(node);
            node._x -= paddingLeft;

            if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {
              node._wordEnd = true;
            }
          }

          if (node.nodeName === "BR" && (node.nextSibling && node.nextSibling.nodeName === "BR" || i === 0)) {
            //two consecutive <br> tags signify a new [empty] line. Also, if the entire block of content STARTS with a <br>, add a line.
            lines.push([]);
          }
        }
      }
    }
  }

  for (i = 0; i < l; i++) {
    node = nodes[i];
    isChild = node.parentNode === element;

    if (node.nodeName === "BR") {
      if (lines || absolute) {
        node.parentNode && node.parentNode.removeChild(node);
        nodes.splice(i--, 1);
        l--;
      } else if (!words) {
        element.appendChild(node);
      }

      continue;
    }

    if (absolute) {
      style = node.style;

      if (!words && !isChild) {
        node._x += node.parentNode._x;
        node._y += node.parentNode._y;
      }

      style.left = node._x + "px";
      style.top = node._y + "px";
      style.position = "absolute";
      style.display = "block"; //if we don't set the width/height, things collapse in older versions of IE and the origin for transforms is thrown off in all browsers.

      style.width = node._w + 1 + "px"; //IE is 1px short sometimes. Avoid wrapping

      style.height = node._h + "px";
    }

    if (!words && chars) {
      //we always start out wrapping words in their own <div> so that line breaks happen correctly, but here we'll remove those <div> tags if necessary and re-nest the characters directly into the element rather than inside the word <div>
      if (node._isSplit) {
        node._next = j = node.nextSibling;
        node.parentNode.appendChild(node); //put it at the end to keep the order correct.

        while (j && j.nodeType === 3 && j.textContent === " ") {
          // if there are nodes that are just a space right afterward, go ahead and append them to the end so they're not out of order.
          node._next = j.nextSibling;
          node.parentNode.appendChild(j);
          j = j.nextSibling;
        }
      } else if (node.parentNode._isSplit) {
        node._parent = node.parentNode;

        if (!node.previousSibling && node.firstChild) {
          node.firstChild._isFirst = true;
        }

        if (node.nextSibling && node.nextSibling.textContent === " " && !node.nextSibling.nextSibling) {
          //if the last node inside a nested element is just a space (like T<span>nested </span>), remove it otherwise it'll get placed in the wrong order. Don't remove it right away, though, because we need to sense when words/characters are before a space like _isBeforeWordDelimiter(). Removing it now would make that a false negative.
          spaceNodesToRemove.push(node.nextSibling);
        }

        node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;
        node.parentNode.removeChild(node);
        nodes.splice(i--, 1);
        l--;
      } else if (!isChild) {
        offset = !node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter); //if this is the last letter in the word (and we're not breaking by lines and not positioning things absolutely), we need to add a space afterwards so that the characters don't just mash together

        node.parentNode._parent && node.parentNode._parent.appendChild(node);
        offset && node.parentNode.appendChild(_doc.createTextNode(" "));

        if (tag === "span") {
          node.style.display = "inline"; //so that word breaks are honored properly.
        }

        charArray.push(node);
      }
    } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== "") {
      wordArray.push(node);
    } else if (chars && !node._isSplit) {
      if (tag === "span") {
        node.style.display = "inline";
      }

      charArray.push(node);
    }
  }

  i = spaceNodesToRemove.length;

  while (--i > -1) {
    spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);
  }

  if (lines) {
    //the next 7 lines just give us the line width in the most reliable way and figure out the left offset (if position isn't relative or absolute). We must set the width along with text-align to ensure everything works properly for various alignments.
    if (absolute) {
      lineNode = _doc.createElement(tag);
      element.appendChild(lineNode);
      lineWidth = lineNode.offsetWidth + "px";
      offset = lineNode.offsetParent === element ? 0 : element.offsetLeft;
      element.removeChild(lineNode);
    }

    style = element.style.cssText;
    element.style.cssText = "display:none;"; //to improve performance, set display:none on the element so that the browser doesn't have to worry about reflowing or rendering while we're renesting things. We'll revert the cssText later.
    //we can't use element.innerHTML = "" because that causes IE to literally delete all the nodes and their content even though we've stored them in an array! So we must loop through the children and remove them.

    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }

    addWordSpaces = wordDelimiter === " " && (!absolute || !words && !chars);

    for (i = 0; i < lines.length; i++) {
      curLine = lines[i];
      lineNode = _doc.createElement(tag);
      lineNode.style.cssText = "display:block;text-align:" + textAlign + ";position:" + (absolute ? "absolute;" : "relative;");

      if (linesClass) {
        lineNode.className = linesClass + (iterateLine ? i + 1 : "");
      }

      lineArray.push(lineNode);
      l = curLine.length;

      for (j = 0; j < l; j++) {
        if (curLine[j].nodeName !== "BR") {
          node = curLine[j];
          lineNode.appendChild(node);
          addWordSpaces && node._wordEnd && lineNode.appendChild(_doc.createTextNode(" "));

          if (absolute) {
            if (j === 0) {
              lineNode.style.top = node._y + "px";
              lineNode.style.left = paddingLeft + offset + "px";
            }

            node.style.top = "0px";

            if (offset) {
              node.style.left = node._x - offset + "px";
            }
          }
        }
      }

      if (l === 0) {
        //if there are no nodes in the line (typically meaning there were two consecutive <br> tags, just add a non-breaking space so that things display properly.
        lineNode.innerHTML = "&nbsp;";
      } else if (!words && !chars) {
        _deWordify(lineNode);

        _swapText(lineNode, String.fromCharCode(160), " ");
      }

      if (absolute) {
        lineNode.style.width = lineWidth;
        lineNode.style.height = node._h + "px";
      }

      element.appendChild(lineNode);
    }

    element.style.cssText = style;
  } //if everything shifts to being position:absolute, the container can collapse in terms of height or width, so fix that here.


  if (absolute) {
    if (origHeight > element.clientHeight) {
      element.style.height = origHeight - padTopAndBottom + "px";

      if (element.clientHeight < origHeight) {
        //IE8 and earlier use a different box model - we must include padding and borders
        element.style.height = origHeight + borderTopAndBottom + "px";
      }
    }

    if (origWidth > element.clientWidth) {
      element.style.width = origWidth - padLeftAndRight + "px";

      if (element.clientWidth < origWidth) {
        //IE8 and earlier use a different box model - we must include padding and borders
        element.style.width = origWidth + borderLeftAndRight + "px";
      }
    }
  }

  isFlex && (prevInlineDisplay ? element.style.display = prevInlineDisplay : element.style.removeProperty("display"));

  _pushReversed(allChars, charArray);

  words && _pushReversed(allWords, wordArray);

  _pushReversed(allLines, lineArray);
},
    _splitRawText = function _splitRawText(element, vars, wordStart, charStart) {
  var tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
      types = vars.type || vars.split || "chars,words,lines",
      //words = (types.indexOf("words") !== -1),
  chars = ~types.indexOf("chars"),
      absolute = _isAbsolute(vars),
      wordDelimiter = vars.wordDelimiter || " ",
      space = wordDelimiter !== " " ? "" : absolute ? "&#173; " : " ",
      wordEnd = "</" + tag + ">",
      wordIsOpen = 1,
      specialChars = vars.specialChars ? typeof vars.specialChars === "function" ? vars.specialChars : _findSpecialChars : null,
      //specialChars can be an array or a function. For performance reasons, we always set this local "specialChars" to a function to which we pass the remaining text and whatever the original vars.specialChars was so that if it's an array, it works with the _findSpecialChars() function.
  text,
      splitText,
      i,
      j,
      l,
      character,
      hasTagStart,
      testResult,
      container = _doc.createElement("div"),
      parent = element.parentNode;

  parent.insertBefore(container, element);
  container.textContent = element.nodeValue;
  parent.removeChild(element);
  element = container;
  text = (0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.getText)(element);
  hasTagStart = text.indexOf("<") !== -1;

  if (vars.reduceWhiteSpace !== false) {
    text = text.replace(_multipleSpacesExp, " ").replace(_stripExp, "");
  }

  if (hasTagStart) {
    text = text.split("<").join("{{LT}}"); //we can't leave "<" in the string, or when we set the innerHTML, it can be interpreted as a node
  }

  l = text.length;
  splitText = (text.charAt(0) === " " ? space : "") + wordStart();

  for (i = 0; i < l; i++) {
    character = text.charAt(i);

    if (specialChars && (testResult = specialChars(text.substr(i), vars.specialChars))) {
      // look for any specialChars that were declared. Remember, they can be passed in like {specialChars:["मी", "पा", "है"]} or a function could be defined instead. Either way, the function should return the number of characters that should be grouped together for this "character".
      character = text.substr(i, testResult || 1);
      splitText += chars && character !== " " ? charStart() + character + "</" + tag + ">" : character;
      i += testResult - 1;
    } else if (character === wordDelimiter && text.charAt(i - 1) !== wordDelimiter && i) {
      splitText += wordIsOpen ? wordEnd : "";
      wordIsOpen = 0;

      while (text.charAt(i + 1) === wordDelimiter) {
        //skip over empty spaces (to avoid making them words)
        splitText += space;
        i++;
      }

      if (i === l - 1) {
        splitText += space;
      } else if (text.charAt(i + 1) !== ")") {
        splitText += space + wordStart();
        wordIsOpen = 1;
      }
    } else if (character === "{" && text.substr(i, 6) === "{{LT}}") {
      splitText += chars ? charStart() + "{{LT}}" + "</" + tag + ">" : "{{LT}}";
      i += 5;
    } else if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {
      //special emoji characters use 2 or 4 unicode characters that we must keep together.
      j = ((text.substr(i, 12).split(_strings_js__WEBPACK_IMPORTED_MODULE_0__.emojiExp) || [])[1] || "").length || 2;
      splitText += chars && character !== " " ? charStart() + text.substr(i, j) + "</" + tag + ">" : text.substr(i, j);
      i += j - 1;
    } else {
      splitText += chars && character !== " " ? charStart() + character + "</" + tag + ">" : character;
    }
  }

  element.outerHTML = splitText + (wordIsOpen ? wordEnd : "");
  hasTagStart && _swapText(parent, "{{LT}}", "<"); //note: don't perform this on "element" because that gets replaced with all new elements when we set element.outerHTML.
},
    _split = function _split(element, vars, wordStart, charStart) {
  var children = _toArray(element.childNodes),
      l = children.length,
      absolute = _isAbsolute(vars),
      i,
      child;

  if (element.nodeType !== 3 || l > 1) {
    vars.absolute = false;

    for (i = 0; i < l; i++) {
      child = children[i];
      child._next = child._isFirst = child._parent = child._wordEnd = null;

      if (child.nodeType !== 3 || /\S+/.test(child.nodeValue)) {
        if (absolute && child.nodeType !== 3 && _getComputedStyle(child).display === "inline") {
          //if there's a child node that's display:inline, switch it to inline-block so that absolute positioning works properly (most browsers don't report offsetTop/offsetLeft properly inside a <span> for example)
          child.style.display = "inline-block";
          child.style.position = "relative";
        }

        child._isSplit = true;

        _split(child, vars, wordStart, charStart); //don't split lines on child elements

      }
    }

    vars.absolute = absolute;
    element._isSplit = true;
    return;
  }

  _splitRawText(element, vars, wordStart, charStart);
};

var SplitText = /*#__PURE__*/function () {
  function SplitText(element, vars) {
    _classCallCheck(this, SplitText);

    _coreInitted || _initCore();
    this.elements = _toArray(element);
    this.chars = [];
    this.words = [];
    this.lines = [];
    this._originals = [];
    this.vars = vars || {};
    _bonusValidated && this.split(vars);
  }

  _createClass(SplitText, [{
    key: "split",
    value: function split(vars) {
      this.isSplit && this.revert();
      this.vars = vars = vars || this.vars;
      this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;

      var i = this.elements.length,
          tag = vars.tag ? vars.tag : vars.span ? "span" : "div",
          wordStart = _cssClassFunc(vars.wordsClass, tag),
          charStart = _cssClassFunc(vars.charsClass, tag),
          origHeight,
          origWidth,
          e; //we split in reversed order so that if/when we position:absolute elements, they don't affect the position of the ones after them in the document flow (shifting them up as they're taken out of the document flow).


      while (--i > -1) {
        e = this.elements[i];
        this._originals[i] = e.innerHTML;
        origHeight = e.clientHeight;
        origWidth = e.clientWidth;

        _split(e, vars, wordStart, charStart);

        _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);
      }

      this.chars.reverse();
      this.words.reverse();
      this.lines.reverse();
      this.isSplit = true;
      return this;
    }
  }, {
    key: "revert",
    value: function revert() {
      var originals = this._originals;

      if (!originals) {
        throw "revert() call wasn't scoped properly.";
      }

      this.elements.forEach(function (e, i) {
        return e.innerHTML = originals[i];
      });
      this.chars = [];
      this.words = [];
      this.lines = [];
      this.isSplit = false;
      return this;
    }
  }], [{
    key: "create",
    value: function create(element, vars) {
      return new SplitText(element, vars);
    }
  }]);

  return SplitText;
}();
SplitText.version = "3.10.4";


/***/ }),

/***/ "./src/scripts/inc/_gsap.js":
/*!**********************************!*\
  !*** ./src/scripts/inc/_gsap.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Back": () => (/* binding */ Back),
/* harmony export */   "Bounce": () => (/* binding */ Bounce),
/* harmony export */   "Circ": () => (/* binding */ Circ),
/* harmony export */   "Cubic": () => (/* binding */ Cubic),
/* harmony export */   "Elastic": () => (/* binding */ Elastic),
/* harmony export */   "Expo": () => (/* binding */ Expo),
/* harmony export */   "GSCache": () => (/* binding */ GSCache),
/* harmony export */   "Linear": () => (/* binding */ Linear),
/* harmony export */   "Power0": () => (/* binding */ Power0),
/* harmony export */   "Power1": () => (/* binding */ Power1),
/* harmony export */   "Power2": () => (/* binding */ Power2),
/* harmony export */   "Power3": () => (/* binding */ Power3),
/* harmony export */   "Power4": () => (/* binding */ Power4),
/* harmony export */   "PropTween": () => (/* binding */ PropTween),
/* harmony export */   "Quad": () => (/* binding */ Quad),
/* harmony export */   "Quart": () => (/* binding */ Quart),
/* harmony export */   "Quint": () => (/* binding */ Quint),
/* harmony export */   "Sine": () => (/* binding */ Sine),
/* harmony export */   "SteppedEase": () => (/* binding */ SteppedEase),
/* harmony export */   "Strong": () => (/* binding */ Strong),
/* harmony export */   "Timeline": () => (/* binding */ Timeline),
/* harmony export */   "TimelineLite": () => (/* binding */ Timeline),
/* harmony export */   "TimelineMax": () => (/* binding */ Timeline),
/* harmony export */   "Tween": () => (/* binding */ Tween),
/* harmony export */   "TweenLite": () => (/* binding */ Tween),
/* harmony export */   "TweenMax": () => (/* binding */ Tween),
/* harmony export */   "_checkPlugin": () => (/* binding */ _checkPlugin),
/* harmony export */   "_colorExp": () => (/* binding */ _colorExp),
/* harmony export */   "_colorStringFilter": () => (/* binding */ _colorStringFilter),
/* harmony export */   "_config": () => (/* binding */ _config),
/* harmony export */   "_forEachName": () => (/* binding */ _forEachName),
/* harmony export */   "_getCache": () => (/* binding */ _getCache),
/* harmony export */   "_getProperty": () => (/* binding */ _getProperty),
/* harmony export */   "_getSetter": () => (/* binding */ _getSetter),
/* harmony export */   "_isString": () => (/* binding */ _isString),
/* harmony export */   "_isUndefined": () => (/* binding */ _isUndefined),
/* harmony export */   "_missingPlugin": () => (/* binding */ _missingPlugin),
/* harmony export */   "_numExp": () => (/* binding */ _numExp),
/* harmony export */   "_numWithUnitExp": () => (/* binding */ _numWithUnitExp),
/* harmony export */   "_parseRelative": () => (/* binding */ _parseRelative),
/* harmony export */   "_plugins": () => (/* binding */ _plugins),
/* harmony export */   "_relExp": () => (/* binding */ _relExp),
/* harmony export */   "_removeLinkedListItem": () => (/* binding */ _removeLinkedListItem),
/* harmony export */   "_renderComplexString": () => (/* binding */ _renderComplexString),
/* harmony export */   "_replaceRandom": () => (/* binding */ _replaceRandom),
/* harmony export */   "_round": () => (/* binding */ _round),
/* harmony export */   "_roundModifier": () => (/* binding */ _roundModifier),
/* harmony export */   "_setDefaults": () => (/* binding */ _setDefaults),
/* harmony export */   "_sortPropTweensByPriority": () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   "_ticker": () => (/* binding */ _ticker),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   "distribute": () => (/* binding */ distribute),
/* harmony export */   "getUnit": () => (/* binding */ getUnit),
/* harmony export */   "gsap": () => (/* binding */ gsap),
/* harmony export */   "interpolate": () => (/* binding */ interpolate),
/* harmony export */   "mapRange": () => (/* binding */ mapRange),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "selector": () => (/* binding */ selector),
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "snap": () => (/* binding */ snap),
/* harmony export */   "splitColor": () => (/* binding */ splitColor),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "unitize": () => (/* binding */ unitize),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapYoyo": () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * GSAP 3.10.4
 * https://greensock.com
 *
 * @license Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
  autoSleep: 120,
  force3D: "auto",
  nullTargetWarn: 1,
  units: {
    lineHeight: ""
  }
},
    _defaults = {
  duration: .5,
  overwrite: false,
  delay: 0
},
    _suppressOverwrites,
    _bigNum = 1e8,
    _tinyNum = 1 / _bigNum,
    _2PI = Math.PI * 2,
    _HALF_PI = _2PI / 4,
    _gsID = 0,
    _sqrt = Math.sqrt,
    _cos = Math.cos,
    _sin = Math.sin,
    _isString = function _isString(value) {
  return typeof value === "string";
},
    _isFunction = function _isFunction(value) {
  return typeof value === "function";
},
    _isNumber = function _isNumber(value) {
  return typeof value === "number";
},
    _isUndefined = function _isUndefined(value) {
  return typeof value === "undefined";
},
    _isObject = function _isObject(value) {
  return _typeof(value) === "object";
},
    _isNotFalse = function _isNotFalse(value) {
  return value !== false;
},
    _windowExists = function _windowExists() {
  return typeof window !== "undefined";
},
    _isFuncOrString = function _isFuncOrString(value) {
  return _isFunction(value) || _isString(value);
},
    _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
    // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
_isArray = Array.isArray,
    _strictNumExp = /(?:-?\.?\d|\.)+/gi,
    //only numbers (including negatives and decimals) but NOT relative values.
_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
    _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
    //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
_relExp = /[+-]=-?[.\d]+/,
    _delimitedValueExp = /[^,'"\[\]\s]+/gi,
    // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
    _globalTimeline,
    _win,
    _coreInitted,
    _doc,
    _globals = {},
    _installScope = {},
    _coreReady,
    _install = function _install(scope) {
  return (_installScope = _merge(scope, _globals)) && gsap;
},
    _missingPlugin = function _missingPlugin(property, value) {
  return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
},
    _warn = function _warn(message, suppress) {
  return !suppress && console.warn(message);
},
    _addGlobal = function _addGlobal(name, obj) {
  return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
},
    _emptyFunc = function _emptyFunc() {
  return 0;
},
    _reservedProps = {},
    _lazyTweens = [],
    _lazyLookup = {},
    _lastRenderedFrame,
    _plugins = {},
    _effects = {},
    _nextGCFrame = 30,
    _harnessPlugins = [],
    _callbackNames = "",
    _harness = function _harness(targets) {
  var target = targets[0],
      harnessPlugin,
      i;
  _isObject(target) || _isFunction(target) || (targets = [targets]);

  if (!(harnessPlugin = (target._gsap || {}).harness)) {
    // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
    i = _harnessPlugins.length;

    while (i-- && !_harnessPlugins[i].targetTest(target)) {}

    harnessPlugin = _harnessPlugins[i];
  }

  i = targets.length;

  while (i--) {
    targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
  }

  return targets;
},
    _getCache = function _getCache(target) {
  return target._gsap || _harness(toArray(target))[0]._gsap;
},
    _getProperty = function _getProperty(target, property, v) {
  return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
},
    _forEachName = function _forEachName(names, func) {
  return (names = names.split(",")).forEach(func) || names;
},
    //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
_round = function _round(value) {
  return Math.round(value * 100000) / 100000 || 0;
},
    _roundPrecise = function _roundPrecise(value) {
  return Math.round(value * 10000000) / 10000000 || 0;
},
    // increased precision mostly for timing values.
_parseRelative = function _parseRelative(start, value) {
  var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
  start = parseFloat(start);
  return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
},
    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
  //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
  var l = toFind.length,
      i = 0;

  for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

  return i < l;
},
    _lazyRender = function _lazyRender() {
  var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;

  _lazyLookup = {};
  _lazyTweens.length = 0;

  for (i = 0; i < l; i++) {
    tween = a[i];
    tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
  }
},
    _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
  _lazyTweens.length && _lazyRender();
  animation.render(time, suppressEvents, force);
  _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
},
    _numericIfPossible = function _numericIfPossible(value) {
  var n = parseFloat(value);
  return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
},
    _passThrough = function _passThrough(p) {
  return p;
},
    _setDefaults = function _setDefaults(obj, defaults) {
  for (var p in defaults) {
    p in obj || (obj[p] = defaults[p]);
  }

  return obj;
},
    _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
  return function (obj, defaults) {
    for (var p in defaults) {
      p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
    }
  };
},
    _merge = function _merge(base, toMerge) {
  for (var p in toMerge) {
    base[p] = toMerge[p];
  }

  return base;
},
    _mergeDeep = function _mergeDeep(base, toMerge) {
  for (var p in toMerge) {
    p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
  }

  return base;
},
    _copyExcluding = function _copyExcluding(obj, excluding) {
  var copy = {},
      p;

  for (p in obj) {
    p in excluding || (copy[p] = obj[p]);
  }

  return copy;
},
    _inheritDefaults = function _inheritDefaults(vars) {
  var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

  if (_isNotFalse(vars.inherit)) {
    while (parent) {
      func(vars, parent.vars.defaults);
      parent = parent.parent || parent._dp;
    }
  }

  return vars;
},
    _arraysMatch = function _arraysMatch(a1, a2) {
  var i = a1.length,
      match = i === a2.length;

  while (match && i-- && a1[i] === a2[i]) {}

  return i < 0;
},
    _addLinkedListItem = function _addLinkedListItem(parent, child) {
  var firstProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "_first";
  var lastProp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "_last";
  var sortBy = arguments.length > 4 ? arguments[4] : undefined;
  var prev = parent[lastProp],
      t;

  if (sortBy) {
    t = child[sortBy];

    while (prev && prev[sortBy] > t) {
      prev = prev._prev;
    }
  }

  if (prev) {
    child._next = prev._next;
    prev._next = child;
  } else {
    child._next = parent[firstProp];
    parent[firstProp] = child;
  }

  if (child._next) {
    child._next._prev = child;
  } else {
    parent[lastProp] = child;
  }

  child._prev = prev;
  child.parent = child._dp = parent;
  return child;
},
    _removeLinkedListItem = function _removeLinkedListItem(parent, child) {
  var firstProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "_first";
  var lastProp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "_last";
  var prev = child._prev,
      next = child._next;

  if (prev) {
    prev._next = next;
  } else if (parent[firstProp] === child) {
    parent[firstProp] = next;
  }

  if (next) {
    next._prev = prev;
  } else if (parent[lastProp] === child) {
    parent[lastProp] = prev;
  }

  child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
},
    _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
  child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
  child._act = 0;
},
    _uncache = function _uncache(animation, child) {
  if (animation && (!child || child._end > animation._dur || child._start < 0)) {
    // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
    var a = animation;

    while (a) {
      a._dirty = 1;
      a = a.parent;
    }
  }

  return animation;
},
    _recacheAncestors = function _recacheAncestors(animation) {
  var parent = animation.parent;

  while (parent && parent.parent) {
    //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
    parent._dirty = 1;
    parent.totalDuration();
    parent = parent.parent;
  }

  return animation;
},
    _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
  return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
},
    _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
  return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
},
    // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
_animationCycle = function _animationCycle(tTime, cycleDuration) {
  var whole = Math.floor(tTime /= cycleDuration);
  return tTime && whole === tTime ? whole - 1 : whole;
},
    _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
  return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
},
    _setEnd = function _setEnd(animation) {
  return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
},
    _alignPlayhead = function _alignPlayhead(animation, totalTime) {
  // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
  var parent = animation._dp;

  if (parent && parent.smoothChildTiming && animation._ts) {
    animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

    _setEnd(animation);

    parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
  }

  return animation;
},

/*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/
_postAddChecks = function _postAddChecks(timeline, child) {
  var t;

  if (child._time || child._initted && !child._dur) {
    //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
    t = _parentToChildTotalTime(timeline.rawTime(), child);

    if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
      child.render(t, true);
    }
  } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


  if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
    //in case any of the ancestors had completed but should now be enabled...
    if (timeline._dur < timeline.duration()) {
      t = timeline;

      while (t._dp) {
        t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

        t = t._dp;
      }
    }

    timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
  }
},
    _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
  child.parent && _removeFromParent(child);
  child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
  child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

  _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

  _isFromOrFromStart(child) || (timeline._recent = child);
  skipChecks || _postAddChecks(timeline, child);
  return timeline;
},
    _scrollTrigger = function _scrollTrigger(animation, trigger) {
  return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
},
    _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
  _initTween(tween, totalTime);

  if (!tween._initted) {
    return 1;
  }

  if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
    _lazyTweens.push(tween);

    tween._lazy = [totalTime, suppressEvents];
    return 1;
  }
},
    _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
  var parent = _ref.parent;
  return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
},
    // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
_isFromOrFromStart = function _isFromOrFromStart(_ref2) {
  var data = _ref2.data;
  return data === "isFromStart" || data === "isStart";
},
    _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
  var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
  repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;

  if (repeatDelay && tween._repeat) {
    // in case there's a zero-duration tween that has a repeat with a repeatDelay
    tTime = _clamp(0, tween._tDur, totalTime);
    iteration = _animationCycle(tTime, repeatDelay);
    tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

    if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
      // if iteration changed
      prevRatio = 1 - ratio;
      tween.vars.repeatRefresh && tween._initted && tween.invalidate();
    }
  }

  if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {
      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
      return;
    }

    prevIteration = tween._zTime;
    tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

    suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

    tween.ratio = ratio;
    tween._from && (ratio = 1 - ratio);
    tween._time = 0;
    tween._tTime = tTime;
    pt = tween._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }

    tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
    tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
    tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

    if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
      ratio && _removeFromParent(tween, 1);

      if (!suppressEvents) {
        _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

        tween._prom && tween._prom();
      }
    }
  } else if (!tween._zTime) {
    tween._zTime = totalTime;
  }
},
    _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
  var child;

  if (time > prevTime) {
    child = animation._first;

    while (child && child._start <= time) {
      if (child.data === "isPause" && child._start > prevTime) {
        return child;
      }

      child = child._next;
    }
  } else {
    child = animation._last;

    while (child && child._start >= time) {
      if (child.data === "isPause" && child._start < prevTime) {
        return child;
      }

      child = child._prev;
    }
  }
},
    _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
  var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
  totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
  animation._dur = dur;
  animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
  totalProgress > 0 && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);
  skipUncache || _uncache(animation.parent, animation);
  return animation;
},
    _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
  return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
},
    _zeroPosition = {
  _start: 0,
  endTime: _emptyFunc,
  totalDuration: _emptyFunc
},
    _parsePosition = function _parsePosition(animation, position, percentAnimation) {
  var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
  i,
      offset,
      isPercent;

  if (_isString(position) && (isNaN(position) || position in labels)) {
    //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
    offset = position.charAt(0);
    isPercent = position.substr(-1) === "%";
    i = position.indexOf("=");

    if (offset === "<" || offset === ">") {
      i >= 0 && (position = position.replace(/=/, ""));
      return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
    }

    if (i < 0) {
      position in labels || (labels[position] = clippedDuration);
      return labels[position];
    }

    offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

    if (isPercent && percentAnimation) {
      offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
    }

    return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
  }

  return position == null ? clippedDuration : +position;
},
    _createTweenType = function _createTweenType(type, params, timeline) {
  var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;

  isLegacy && (vars.duration = params[1]);
  vars.parent = timeline;

  if (type) {
    irVars = vars;
    parent = timeline;

    while (parent && !("immediateRender" in irVars)) {
      // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
      irVars = parent.vars.defaults || {};
      parent = _isNotFalse(parent.vars.inherit) && parent.parent;
    }

    vars.immediateRender = _isNotFalse(irVars.immediateRender);
    type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
  }

  return new Tween(params[0], vars, params[varsIndex + 1]);
},
    _conditionalReturn = function _conditionalReturn(value, func) {
  return value || value === 0 ? func(value) : func;
},
    _clamp = function _clamp(min, max, value) {
  return value < min ? min : value > max ? max : value;
},
    getUnit = function getUnit(value, v) {
  return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
},
    // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
clamp = function clamp(min, max, value) {
  return _conditionalReturn(value, function (v) {
    return _clamp(min, max, v);
  });
},
    _slice = [].slice,
    _isArrayLike = function _isArrayLike(value, nonEmpty) {
  return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
},
    _flatten = function _flatten(ar, leaveStrings) {
  var accumulator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return ar.forEach(function (value) {
    return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? accumulator.push.apply(accumulator, _toConsumableArray(toArray(value))) : accumulator.push(value);
  }) || accumulator;
},
    //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
toArray = function toArray(value, scope, leaveStrings) {
  return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
},
    selector = function selector(value) {
  value = toArray(value)[0] || _warn("Invalid scope") || {};
  return function (v) {
    var el = value.current || value.nativeElement || value;
    return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
  };
},
    shuffle = function shuffle(a) {
  return a.sort(function () {
    return .5 - Math.random();
  });
},
    // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
distribute = function distribute(v) {
  if (_isFunction(v)) {
    return v;
  }

  var vars = _isObject(v) ? v : {
    each: v
  },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
  ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;

  if (_isString(from)) {
    ratioX = ratioY = {
      center: .5,
      edges: .5,
      end: 1
    }[from] || 0;
  } else if (!isDecimal && ratios) {
    ratioX = from[0];
    ratioY = from[1];
  }

  return function (i, target, a) {
    var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;

    if (!distances) {
      wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

      if (!wrapAt) {
        max = -_bigNum;

        while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

        wrapAt--;
      }

      distances = cache[l] = [];
      originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
      originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
      max = 0;
      min = _bigNum;

      for (j = 0; j < l; j++) {
        x = j % wrapAt - originX;
        y = originY - (j / wrapAt | 0);
        distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
        d > max && (max = d);
        d < min && (min = d);
      }

      from === "random" && shuffle(distances);
      distances.max = max - min;
      distances.min = min;
      distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
      distances.b = l < 0 ? base - l : base;
      distances.u = getUnit(vars.amount || vars.each) || 0; //unit

      ease = ease && l < 0 ? _invertEase(ease) : ease;
    }

    l = (distances[i] - distances.min) / distances.max || 0;
    return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
  };
},
    _roundModifier = function _roundModifier(v) {
  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
  var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

  return function (raw) {
    var n = Math.round(parseFloat(raw) / v) * v * p;
    return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
  };
},
    snap = function snap(snapTo, value) {
  var isArray = _isArray(snapTo),
      radius,
      is2D;

  if (!isArray && _isObject(snapTo)) {
    radius = isArray = snapTo.radius || _bigNum;

    if (snapTo.values) {
      snapTo = toArray(snapTo.values);

      if (is2D = !_isNumber(snapTo[0])) {
        radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
      }
    } else {
      snapTo = _roundModifier(snapTo.increment);
    }
  }

  return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
    is2D = snapTo(raw);
    return Math.abs(is2D - raw) <= radius ? is2D : raw;
  } : function (raw) {
    var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;

    while (i--) {
      if (is2D) {
        dx = snapTo[i].x - x;
        dy = snapTo[i].y - y;
        dx = dx * dx + dy * dy;
      } else {
        dx = Math.abs(snapTo[i] - x);
      }

      if (dx < min) {
        min = dx;
        closest = i;
      }
    }

    closest = !radius || min <= radius ? snapTo[closest] : raw;
    return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
  });
},
    random = function random(min, max, roundingIncrement, returnFunction) {
  return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
    return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
  });
},
    pipe = function pipe() {
  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
    functions[_key] = arguments[_key];
  }

  return function (value) {
    return functions.reduce(function (v, f) {
      return f(v);
    }, value);
  };
},
    unitize = function unitize(func, unit) {
  return function (value) {
    return func(parseFloat(value)) + (unit || getUnit(value));
  };
},
    normalize = function normalize(min, max, value) {
  return mapRange(min, max, 0, 1, value);
},
    _wrapArray = function _wrapArray(a, wrapper, value) {
  return _conditionalReturn(value, function (index) {
    return a[~~wrapper(index)];
  });
},
    wrap = function wrap(min, max, value) {
  // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
  var range = max - min;
  return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
    return (range + (value - min) % range) % range + min;
  });
},
    wrapYoyo = function wrapYoyo(min, max, value) {
  var range = max - min,
      total = range * 2;
  return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
    value = (total + (value - min) % total) % total || 0;
    return min + (value > range ? total - value : value);
  });
},
    _replaceRandom = function _replaceRandom(value) {
  //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
  var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;

  while (~(i = value.indexOf("random(", prev))) {
    end = value.indexOf(")", i);
    isArray = value.charAt(i + 7) === "[";
    nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
    s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
    prev = end + 1;
  }

  return s + value.substr(prev, value.length - prev);
},
    mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
  var inRange = inMax - inMin,
      outRange = outMax - outMin;
  return _conditionalReturn(value, function (value) {
    return outMin + ((value - inMin) / inRange * outRange || 0);
  });
},
    interpolate = function interpolate(start, end, progress, mutate) {
  var func = isNaN(start + end) ? 0 : function (p) {
    return (1 - p) * start + p * end;
  };

  if (!func) {
    var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;

    progress === true && (mutate = 1) && (progress = null);

    if (isString) {
      start = {
        p: start
      };
      end = {
        p: end
      };
    } else if (_isArray(start) && !_isArray(end)) {
      interpolators = [];
      l = start.length;
      il = l - 2;

      for (i = 1; i < l; i++) {
        interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
      }

      l--;

      func = function func(p) {
        p *= l;
        var i = Math.min(il, ~~p);
        return interpolators[i](p - i);
      };

      progress = end;
    } else if (!mutate) {
      start = _merge(_isArray(start) ? [] : {}, start);
    }

    if (!interpolators) {
      for (p in end) {
        _addPropTween.call(master, start, p, "get", end[p]);
      }

      func = function func(p) {
        return _renderPropTweens(p, master) || (isString ? start.p : start);
      };
    }
  }

  return _conditionalReturn(progress, func);
},
    _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
  //used for nextLabel() and previousLabel()
  var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;

  for (p in labels) {
    distance = labels[p] - fromTime;

    if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
      label = p;
      min = distance;
    }
  }

  return label;
},
    _callback = function _callback(animation, type, executeLazyFirst) {
  var v = animation.vars,
      callback = v[type],
      params,
      scope;

  if (!callback) {
    return;
  }

  params = v[type + "Params"];
  scope = v.callbackScope || animation;
  executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

  return params ? callback.apply(scope, params) : callback.call(scope);
},
    _interrupt = function _interrupt(animation) {
  _removeFromParent(animation);

  animation.scrollTrigger && animation.scrollTrigger.kill(false);
  animation.progress() < 1 && _callback(animation, "onInterrupt");
  return animation;
},
    _quickTween,
    _createPlugin = function _createPlugin(config) {
  config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

  var name = config.name,
      isFunc = _isFunction(config),
      Plugin = name && !isFunc && config.init ? function () {
    this._props = [];
  } : config,
      //in case someone passes in an object that's not a plugin, like CustomEase
  instanceDefaults = {
    init: _emptyFunc,
    render: _renderPropTweens,
    add: _addPropTween,
    kill: _killPropTweensOf,
    modifier: _addPluginModifier,
    rawVars: 0
  },
      statics = {
    targetTest: 0,
    get: 0,
    getSetter: _getSetter,
    aliases: {},
    register: 0
  };

  _wake();

  if (config !== Plugin) {
    if (_plugins[name]) {
      return;
    }

    _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


    _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


    _plugins[Plugin.prop = name] = Plugin;

    if (config.targetTest) {
      _harnessPlugins.push(Plugin);

      _reservedProps[name] = 1;
    }

    name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
  }

  _addGlobal(name, Plugin);

  config.register && config.register(gsap, Plugin, PropTween);
},

/*
 * --------------------------------------------------------------------------------------
 * COLORS
 * --------------------------------------------------------------------------------------
 */
_255 = 255,
    _colorLookup = {
  aqua: [0, _255, _255],
  lime: [0, _255, 0],
  silver: [192, 192, 192],
  black: [0, 0, 0],
  maroon: [128, 0, 0],
  teal: [0, 128, 128],
  blue: [0, 0, _255],
  navy: [0, 0, 128],
  white: [_255, _255, _255],
  olive: [128, 128, 0],
  yellow: [_255, _255, 0],
  orange: [_255, 165, 0],
  gray: [128, 128, 128],
  purple: [128, 0, 128],
  green: [0, 128, 0],
  red: [_255, 0, 0],
  pink: [_255, 192, 203],
  cyan: [0, _255, _255],
  transparent: [_255, _255, _255, 0]
},
    // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
// let ctx = _doc.createElement("canvas").getContext("2d");
// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
_hue = function _hue(h, m1, m2) {
  h += h < 0 ? 1 : h > 1 ? -1 : 0;
  return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
},
    splitColor = function splitColor(v, toHSL, forceAlpha) {
  var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;

  if (!a) {
    if (v.substr(-1) === ",") {
      //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
      v = v.substr(0, v.length - 1);
    }

    if (_colorLookup[v]) {
      a = _colorLookup[v];
    } else if (v.charAt(0) === "#") {
      if (v.length < 6) {
        //for shorthand like #9F0 or #9F0F (could have alpha)
        r = v.charAt(1);
        g = v.charAt(2);
        b = v.charAt(3);
        v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
      }

      if (v.length === 9) {
        // hex with alpha, like #fd5e53ff
        a = parseInt(v.substr(1, 6), 16);
        return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
      }

      v = parseInt(v.substr(1), 16);
      a = [v >> 16, v >> 8 & _255, v & _255];
    } else if (v.substr(0, 3) === "hsl") {
      a = wasHSL = v.match(_strictNumExp);

      if (!toHSL) {
        h = +a[0] % 360 / 360;
        s = +a[1] / 100;
        l = +a[2] / 100;
        g = l <= .5 ? l * (s + 1) : l + s - l * s;
        r = l * 2 - g;
        a.length > 3 && (a[3] *= 1); //cast as number

        a[0] = _hue(h + 1 / 3, r, g);
        a[1] = _hue(h, r, g);
        a[2] = _hue(h - 1 / 3, r, g);
      } else if (~v.indexOf("=")) {
        //if relative values are found, just return the raw strings with the relative prefixes in place.
        a = v.match(_numExp);
        forceAlpha && a.length < 4 && (a[3] = 1);
        return a;
      }
    } else {
      a = v.match(_strictNumExp) || _colorLookup.transparent;
    }

    a = a.map(Number);
  }

  if (toHSL && !wasHSL) {
    r = a[0] / _255;
    g = a[1] / _255;
    b = a[2] / _255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
      h *= 60;
    }

    a[0] = ~~(h + .5);
    a[1] = ~~(s * 100 + .5);
    a[2] = ~~(l * 100 + .5);
  }

  forceAlpha && a.length < 4 && (a[3] = 1);
  return a;
},
    _colorOrderData = function _colorOrderData(v) {
  // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
  var values = [],
      c = [],
      i = -1;
  v.split(_colorExp).forEach(function (v) {
    var a = v.match(_numWithUnitExp) || [];
    values.push.apply(values, _toConsumableArray(a));
    c.push(i += a.length + 1);
  });
  values.c = c;
  return values;
},
    _formatColors = function _formatColors(s, toHSL, orderMatchData) {
  var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;

  if (!colors) {
    return s;
  }

  colors = colors.map(function (color) {
    return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
  });

  if (orderMatchData) {
    d = _colorOrderData(s);
    c = orderMatchData.c;

    if (c.join(result) !== d.c.join(result)) {
      shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
      }
    }
  }

  if (!shell) {
    shell = s.split(_colorExp);
    l = shell.length - 1;

    for (; i < l; i++) {
      result += shell[i] + colors[i];
    }
  }

  return result + shell[l];
},
    _colorExp = function () {
  var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
  p;

  for (p in _colorLookup) {
    s += "|" + p + "\\b";
  }

  return new RegExp(s + ")", "gi");
}(),
    _hslExp = /hsl[a]?\(/,
    _colorStringFilter = function _colorStringFilter(a) {
  var combined = a.join(" "),
      toHSL;
  _colorExp.lastIndex = 0;

  if (_colorExp.test(combined)) {
    toHSL = _hslExp.test(combined);
    a[1] = _formatColors(a[1], toHSL);
    a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

    return true;
  }
},

/*
 * --------------------------------------------------------------------------------------
 * TICKER
 * --------------------------------------------------------------------------------------
 */
_tickerActive,
    _ticker = function () {
  var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
    var elapsed = _getTime() - _lastUpdate,
        manual = v === true,
        overlap,
        dispatch,
        time,
        frame;

    elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
    _lastUpdate += elapsed;
    time = _lastUpdate - _startTime;
    overlap = time - _nextTime;

    if (overlap > 0 || manual) {
      frame = ++_self.frame;
      _delta = time - _self.time * 1000;
      _self.time = time = time / 1000;
      _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
      dispatch = 1;
    }

    manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

    if (dispatch) {
      for (_i = 0; _i < _listeners.length; _i++) {
        // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
        _listeners[_i](time, _delta, frame, v);
      }
    }
  };

  _self = {
    time: 0,
    frame: 0,
    tick: function tick() {
      _tick(true);
    },
    deltaRatio: function deltaRatio(fps) {
      return _delta / (1000 / (fps || 60));
    },
    wake: function wake() {
      if (_coreReady) {
        if (!_coreInitted && _windowExists()) {
          _win = _coreInitted = window;
          _doc = _win.document || {};
          _globals.gsap = gsap;
          (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

          _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

          _raf = _win.requestAnimationFrame;
        }

        _id && _self.sleep();

        _req = _raf || function (f) {
          return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
        };

        _tickerActive = 1;

        _tick(2);
      }
    },
    sleep: function sleep() {
      (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
      _tickerActive = 0;
      _req = _emptyFunc;
    },
    lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
      _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited

      _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
    },
    fps: function fps(_fps) {
      _gap = 1000 / (_fps || 240);
      _nextTime = _self.time * 1000 + _gap;
    },
    add: function add(callback, once, prioritize) {
      var func = once ? function (t, d, f, v) {
        callback(t, d, f, v);

        _self.remove(func);
      } : callback;

      _self.remove(callback);

      _listeners[prioritize ? "unshift" : "push"](func);

      _wake();

      return func;
    },
    remove: function remove(callback, i) {
      ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
    },
    _listeners: _listeners
  };
  return _self;
}(),
    _wake = function _wake() {
  return !_tickerActive && _ticker.wake();
},
    //also ensures the core classes are initialized.

/*
* -------------------------------------------------
* EASING
* -------------------------------------------------
*/
_easeMap = {},
    _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
    _quotesExp = /["']/g,
    _parseObjectInString = function _parseObjectInString(value) {
  //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
  var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;

  for (; i < l; i++) {
    val = split[i];
    index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
    parsedVal = val.substr(0, index);
    obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
    key = val.substr(index + 1).trim();
  }

  return obj;
},
    _valueInParentheses = function _valueInParentheses(value) {
  var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
  return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
},
    _configEaseFromString = function _configEaseFromString(name) {
  //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
  var split = (name + "").split("("),
      ease = _easeMap[split[0]];
  return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
},
    _invertEase = function _invertEase(ease) {
  return function (p) {
    return 1 - ease(1 - p);
  };
},
    // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
  var child = timeline._first,
      ease;

  while (child) {
    if (child instanceof Timeline) {
      _propagateYoyoEase(child, isYoyo);
    } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
      if (child.timeline) {
        _propagateYoyoEase(child.timeline, isYoyo);
      } else {
        ease = child._ease;
        child._ease = child._yEase;
        child._yEase = ease;
        child._yoyo = isYoyo;
      }
    }

    child = child._next;
  }
},
    _parseEase = function _parseEase(ease, defaultEase) {
  return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
},
    _insertEase = function _insertEase(names, easeIn) {
  var easeOut = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (p) {
    return 1 - easeIn(1 - p);
  };
  var easeInOut = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (p) {
    return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
  };
  var ease = {
    easeIn: easeIn,
    easeOut: easeOut,
    easeInOut: easeInOut
  },
      lowercaseName;

  _forEachName(names, function (name) {
    _easeMap[name] = _globals[name] = ease;
    _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

    for (var p in ease) {
      _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
    }
  });

  return ease;
},
    _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
  return function (p) {
    return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
  };
},
    _configElastic = function _configElastic(type, amplitude, period) {
  var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
  p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
    return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  p2 = _2PI / p2; //precalculate to optimize

  ease.config = function (amplitude, period) {
    return _configElastic(type, amplitude, period);
  };

  return ease;
},
    _configBack = function _configBack(type) {
  var overshoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.70158;

  var easeOut = function easeOut(p) {
    return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
  },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
    return 1 - easeOut(1 - p);
  } : _easeInOutFromOut(easeOut);

  ease.config = function (overshoot) {
    return _configBack(type, overshoot);
  };

  return ease;
}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };


_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;

  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});

_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

(function (n, c) {
  var n1 = 1 / c,
      n2 = 2 * n1,
      n3 = 2.5 * n1,
      easeOut = function easeOut(p) {
    return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
  };

  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);

_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});

_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});

_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});

_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config() {
    var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var immediateStart = arguments.length > 1 ? arguments[1] : undefined;
    var p1 = 1 / steps,
        p2 = steps + (immediateStart ? 0 : 1),
        p3 = immediateStart ? 1 : 0,
        max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];

_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */


var GSCache = /*#__PURE__*/_createClass(function GSCache(target, harness) {
  _classCallCheck(this, GSCache);

  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
});
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    _classCallCheck(this, Animation);

    this.vars = vars;
    this._delay = +vars.delay || 0;

    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }

    this._ts = 1;

    _setDuration(this, +vars.duration, 1, 1);

    this.data = vars.data;
    _tickerActive || _ticker.wake();
  }

  _createClass(Animation, [{
    key: "delay",
    value: function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    }
  }, {
    key: "duration",
    value: function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    }
  }, {
    key: "totalDuration",
    value: function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    }
  }, {
    key: "totalTime",
    value: function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);

        !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
        //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

        while (parent && parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
        // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
        this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
        //   this._lock = 1;

        _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
        //}

      }

      return this;
    }
  }, {
    key: "time",
    value: function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
    }
  }, {
    key: "totalProgress",
    value: function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    }
  }, {
    key: "progress",
    value: function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    }
  }, {
    key: "iteration",
    value: function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    } // potential future addition:
    // isPlayingBackwards() {
    // 	let animation = this,
    // 		orientation = 1; // 1 = forward, -1 = backward
    // 	while (animation) {
    // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
    // 		animation = animation.parent;
    // 	}
    // 	return orientation < 0;
    // }

  }, {
    key: "timeScale",
    value: function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
      // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
      //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
      // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

      this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);

      _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.


      return _recacheAncestors(this);
    }
  }, {
    key: "paused",
    value: function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

          this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
        } else {
          _wake();

          this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
        }
      }

      return this;
    }
  }, {
    key: "startTime",
    value: function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    }
  }, {
    key: "endTime",
    value: function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    }
  }, {
    key: "rawTime",
    value: function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp; // _dp = detached parent

      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    }
  }, {
    key: "globalTime",
    value: function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return time;
    }
  }, {
    key: "repeat",
    value: function repeat(value) {
      if (arguments.length) {
        this._repeat = value === Infinity ? -2 : value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat === -2 ? Infinity : this._repeat;
    }
  }, {
    key: "repeatDelay",
    value: function repeatDelay(value) {
      if (arguments.length) {
        var time = this._time;
        this._rDelay = value;

        _onUpdateTotalDuration(this);

        return time ? this.time(time) : this;
      }

      return this._rDelay;
    }
  }, {
    key: "yoyo",
    value: function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    }
  }, {
    key: "seek",
    value: function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    }
  }, {
    key: "restart",
    value: function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    }
  }, {
    key: "play",
    value: function play(from, suppressEvents) {
      from != null && this.seek(from, suppressEvents);
      return this.reversed(false).paused(false);
    }
  }, {
    key: "reverse",
    value: function reverse(from, suppressEvents) {
      from != null && this.seek(from || this.totalDuration(), suppressEvents);
      return this.reversed(true).paused(false);
    }
  }, {
    key: "pause",
    value: function pause(atTime, suppressEvents) {
      atTime != null && this.seek(atTime, suppressEvents);
      return this.paused(true);
    }
  }, {
    key: "resume",
    value: function resume() {
      return this.paused(false);
    }
  }, {
    key: "reversed",
    value: function reversed(value) {
      if (arguments.length) {
        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

        return this;
      }

      return this._rts < 0;
    }
  }, {
    key: "invalidate",
    value: function invalidate() {
      this._initted = this._act = 0;
      this._zTime = -_tinyNum;
      return this;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    }
  }, {
    key: "eventCallback",
    value: function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;
          params && (vars[type + "Params"] = params);
          type === "onUpdate" && (this._onUpdate = callback);
        }

        return this;
      }

      return vars[type];
    }
  }, {
    key: "then",
    value: function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    }
  }, {
    key: "kill",
    value: function kill() {
      _interrupt(this);
    }
  }]);

  return Animation;
}();

_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */


var Timeline = /*#__PURE__*/function (_Animation) {
  _inherits(Timeline, _Animation);

  var _super = _createSuper(Timeline);

  function Timeline() {
    var _this;

    var vars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var position = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, Timeline);

    _this = _super.call(this, vars);
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }

  _createClass(Timeline, [{
    key: "to",
    value: function to(targets, vars, position) {
      _createTweenType(0, arguments, this);

      return this;
    }
  }, {
    key: "from",
    value: function from(targets, vars, position) {
      _createTweenType(1, arguments, this);

      return this;
    }
  }, {
    key: "fromTo",
    value: function fromTo(targets, fromVars, toVars, position) {
      _createTweenType(2, arguments, this);

      return this;
    }
  }, {
    key: "set",
    value: function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    }
  }, {
    key: "call",
    value: function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
    } //ONLY for backward compatibility! Maybe delete?

  }, {
    key: "staggerTo",
    value: function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    }
  }, {
    key: "staggerFrom",
    value: function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    }
  }, {
    key: "staggerFromTo",
    value: function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    }
  }, {
    key: "render",
    value: function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
          // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;
      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          //adjust the time for repeats and yoyos
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

          if (tTime === tDur) {
            // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }
          /*
          make sure children at the end/beginning of the timeline are rendered properly. If, for example,
          a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
          would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
          could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
          we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
          ensure that zero-duration tweens at the very beginning or end of the Timeline work.
          */


          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);
            iteration < prevIteration && (rewinding = !rewinding);
            prevTime = rewinding ? 0 : dur;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
            this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

            !suppressEvents && this.parent && _callback(this, "onRepeat");
            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
              // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
              return this;
            }

            dur = this._dur; // in case the duration changed in the onRepeat

            tDur = this._tDur;

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
          prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
        }

        if (!prevTime && time && !suppressEvents) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
            return this;
          }
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
            this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    }
  }, {
    key: "add",
    value: function add(child, position) {
      var _this2 = this;

      _isNumber(position) || (position = _parsePosition(this, position, child));

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return this;
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      var nested = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var tweens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var timelines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var ignoreBeforeTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -_bigNum;
      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, _toConsumableArray(child.getChildren(true, tweens, timelines)));
          }
        }

        child = child._next;
      }

      return a;
    }
  }, {
    key: "getById",
    value: function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    }
  }, {
    key: "remove",
    value: function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    }
  }, {
    key: "totalTime",
    value: function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        //special case for the global timeline (or any other that has no parent or detached parent).
        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _get(_getPrototypeOf(Timeline.prototype), "totalTime", this).call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    }
  }, {
    key: "addLabel",
    value: function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    }
  }, {
    key: "removeLabel",
    value: function removeLabel(label) {
      delete this.labels[label];
      return this;
    }
  }, {
    key: "addPause",
    value: function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    }
  }, {
    key: "removePause",
    value: function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    }
  }, {
    key: "killTweensOf",
    value: function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    }
  }, {
    key: "getTweensOf",
    value: function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          // a number is interpreted as a global time. If the animation spans
      children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, _toConsumableArray(children));
        }

        child = child._next;
      }

      return a;
    } // potential future feature - targets() on timelines
    // targets() {
    // 	let result = [];
    // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
    // 	return result.filter((v, i) => result.indexOf(v) === i);
    // }

  }, {
    key: "tweenTo",
    value: function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          immediateRender = _vars.immediateRender,
          initted,
          tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();

          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }

          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));

      return immediateRender ? tween.render(0) : tween;
    }
  }, {
    key: "tweenFromTo",
    value: function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    }
  }, {
    key: "recent",
    value: function recent() {
      return this._recent;
    }
  }, {
    key: "nextLabel",
    value: function nextLabel() {
      var afterTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._time;
      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    }
  }, {
    key: "previousLabel",
    value: function previousLabel() {
      var beforeTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._time;
      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    }
  }, {
    key: "currentLabel",
    value: function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    }
  }, {
    key: "shiftChildren",
    value: function shiftChildren(amount, adjustLabels) {
      var ignoreBeforeTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
          child._end += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    }
  }, {
    key: "invalidate",
    value: function invalidate() {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate();
        child = child._next;
      }

      return _get(_getPrototypeOf(Timeline.prototype), "invalidate", this).call(this);
    }
  }, {
    key: "clear",
    value: function clear() {
      var includeLabels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._dp && (this._time = this._tTime = this._pTime = 0);
      includeLabels && (this.labels = {});
      return _uncache(this);
    }
  }, {
    key: "totalDuration",
    value: function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev; //record it here in case the tween changes position in the sequence...

          child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
            self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          child._end > max && child._ts && (max = child._end);
          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

        self._dirty = 0;
      }

      return self._tDur;
    }
  }], [{
    key: "updateRoot",
    value: function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    }
  }]);

  return Timeline;
}(Animation);

_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});

var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
  //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
  var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
  pt.b = start;
  pt.e = end;
  start += ""; //ensure values are strings

  end += "";

  if (hasRandom = ~end.indexOf("random(")) {
    end = _replaceRandom(end);
  }

  if (stringFilter) {
    a = [start, end];
    stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

    start = a[0];
    end = a[1];
  }

  startNums = start.match(_complexStringNumExp) || [];

  while (result = _complexStringNumExp.exec(end)) {
    endNum = result[0];
    chunk = end.substring(index, result.index);

    if (color) {
      color = (color + 1) % 5;
    } else if (chunk.substr(-5) === "rgba(") {
      color = 1;
    }

    if (endNum !== startNums[matchIndex++]) {
      startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

      pt._pt = {
        _next: pt._pt,
        p: chunk || matchIndex === 1 ? chunk : ",",
        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
        s: startNum,
        c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
        m: color && color < 4 ? Math.round : 0
      };
      index = _complexStringNumExp.lastIndex;
    }
  }

  pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

  pt.fp = funcParam;

  if (_relExp.test(end) || hasRandom) {
    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
  }

  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

  return pt;
},
    _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
  _isFunction(end) && (end = end(index || 0, target, targets));
  var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;

  if (_isString(end)) {
    if (~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (end.charAt(1) === "=") {
      pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

      if (pt || pt === 0) {
        // to avoid isNaN, like if someone passes in a value like "!= whatever"
        end = pt;
      }
    }
  }

  if (parsedStart !== end || _forceAllPropTweens) {
    if (!isNaN(parsedStart * end) && end !== "") {
      // fun fact: any number multiplied by "" is evaluated as the number 0!
      pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
      funcParam && (pt.fp = funcParam);
      modifier && pt.modifier(modifier, this, target);
      return this._pt = pt;
    }

    !currentValue && !(prop in target) && _missingPlugin(prop, end);
    return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
  }
},
    //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
_processVars = function _processVars(vars, index, target, targets, tween) {
  _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

  if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
    return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
  }

  var copy = {},
      p;

  for (p in vars) {
    copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
  }

  return copy;
},
    _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
  var plugin, pt, ptLookup, i;

  if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
    tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

    if (tween !== _quickTween) {
      ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

      i = plugin._props.length;

      while (i--) {
        ptLookup[plugin._props[i]] = pt;
      }
    }
  }

  return plugin;
},
    _overwritingTween,
    //store a reference temporarily so we can avoid overwriting itself.
_forceAllPropTweens,
    _initTween = function _initTween(tween, time) {
  var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      onUpdateParams = vars.onUpdateParams,
      callbackScope = vars.callbackScope,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
  tl && (!keyframes || !ease) && (ease = "none");
  tween._ease = _parseEase(ease, _defaults.ease);
  tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

  if (yoyoEase && tween._yoyo && !tween._repeat) {
    //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
    yoyoEase = tween._yEase;
    tween._yEase = tween._ease;
    tween._ease = yoyoEase;
  }

  tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

  if (!tl || keyframes && !vars.stagger) {
    //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
    harness = targets[0] ? _getCache(targets[0]).harness : 0;
    harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

    cleanVars = _copyExcluding(vars, _reservedProps);

    if (prevStartAt) {
      _removeFromParent(prevStartAt.render(-1, true));

      prevStartAt._lazy = 0;
    }

    if (startAt) {
      _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
        data: "isStart",
        overwrite: false,
        parent: parent,
        immediateRender: true,
        lazy: _isNotFalse(lazy),
        startAt: null,
        delay: 0,
        onUpdate: onUpdate,
        onUpdateParams: onUpdateParams,
        callbackScope: callbackScope,
        stagger: 0
      }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


      time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

      if (immediateRender) {
        time > 0 && !autoRevert && (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.

        if (dur && time <= 0) {
          time && (tween._zTime = time);
          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
        } // if (time > 0) {
        // 	autoRevert || (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
        // } else if (dur && !(time < 0 && prevStartAt)) {
        // 	time && (tween._zTime = time);
        // 	return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
        // }

      } else if (autoRevert === false) {
        tween._startAt = 0;
      }
    } else if (runBackwards && dur) {
      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
      if (prevStartAt) {
        !autoRevert && (tween._startAt = 0);
      } else {
        time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

        p = _setDefaults({
          overwrite: false,
          data: "isFromStart",
          //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
          lazy: immediateRender && _isNotFalse(lazy),
          immediateRender: immediateRender,
          //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
          stagger: 0,
          parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})

        }, cleanVars);
        harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

        _removeFromParent(tween._startAt = Tween.set(targets, p));

        time < 0 && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted from() tween.

        tween._zTime = time;

        if (!immediateRender) {
          _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded

        } else if (!time) {
          return;
        }
      }
    }

    tween._pt = tween._ptCache = 0;
    lazy = dur && _isNotFalse(lazy) || lazy && !dur;

    for (i = 0; i < targets.length; i++) {
      target = targets[i];
      gsData = target._gsap || _harness(targets)[i]._gsap;
      tween._ptLookup[i] = ptLookup = {};
      _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

      index = fullTargets === targets ? i : fullTargets.indexOf(target);

      if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

        plugin._props.forEach(function (name) {
          ptLookup[name] = pt;
        });

        plugin.priority && (hasPriority = 1);
      }

      if (!harness || harnessVars) {
        for (p in cleanVars) {
          if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
            plugin.priority && (hasPriority = 1);
          } else {
            ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
          }
        }
      }

      tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

      if (autoOverwrite && tween._pt) {
        _overwritingTween = tween;

        _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!


        overwritten = !tween.parent;
        _overwritingTween = 0;
      }

      tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
    }

    hasPriority && _sortPropTweensByPriority(tween);
    tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
  }

  tween._onUpdate = onUpdate;
  tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

  keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
},
    _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
  var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      lookup,
      i;

  if (!ptCache) {
    ptCache = tween._ptCache[property] = [];
    lookup = tween._ptLookup;
    i = tween._targets.length;

    while (i--) {
      pt = lookup[i][property];

      if (pt && pt.d && pt.d._pt) {
        // it's a plugin, so find the nested PropTween
        pt = pt.d._pt;

        while (pt && pt.p !== property) {
          pt = pt._next;
        }
      }

      if (!pt) {
        // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
        // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
        _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

        tween.vars[property] = "+=0";

        _initTween(tween, time);

        _forceAllPropTweens = 0;
        return 1;
      }

      ptCache.push(pt);
    }
  }

  i = ptCache.length;

  while (i--) {
    pt = ptCache[i];
    pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
    pt.c = value - pt.s;
    pt.e && (pt.e = _round(value) + getUnit(pt.e)); // mainly for CSSPlugin (end value)

    pt.b && (pt.b = pt.s + getUnit(pt.b)); // (beginning value)
  }
},
    _addAliasesToVars = function _addAliasesToVars(targets, vars) {
  var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;

  if (!propertyAliases) {
    return vars;
  }

  copy = _merge({}, vars);

  for (p in propertyAliases) {
    if (p in copy) {
      aliases = propertyAliases[p].split(",");
      i = aliases.length;

      while (i--) {
        copy[aliases[i]] = copy[p];
      }
    }
  }

  return copy;
},
    // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
  var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;

  if (_isArray(obj)) {
    a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

    obj.forEach(function (value, i) {
      return a.push({
        t: i / (obj.length - 1) * 100,
        v: value,
        e: ease
      });
    });
  } else {
    for (p in obj) {
      a = allProps[p] || (allProps[p] = []);
      p === "ease" || a.push({
        t: parseFloat(prop),
        v: obj[p],
        e: ease
      });
    }
  }
},
    _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
  return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
},
    _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
    _staggerPropsToSkip = {};

_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */


var Tween = /*#__PURE__*/function (_Animation2) {
  _inherits(Tween, _Animation2);

  var _super2 = _createSuper(Tween);

  function Tween(targets, vars, position, skipInherit) {
    var _this3;

    _classCallCheck(this, Tween);

    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }

    _this3 = _super2.call(this, skipInherit ? vars : _inheritDefaults(vars));
    var _this3$vars = _this3.vars,
        duration = _this3$vars.duration,
        delay = _this3$vars.delay,
        immediateRender = _this3$vars.immediateRender,
        stagger = _this3$vars.stagger,
        overwrite = _this3$vars.overwrite,
        keyframes = _this3$vars.keyframes,
        defaults = _this3$vars.defaults,
        scrollTrigger = _this3$vars.scrollTrigger,
        yoyoEase = _this3$vars.yoyoEase,
        parent = vars.parent || _globalTimeline,
        parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
        tl,
        i,
        copy,
        l,
        p,
        curTarget,
        staggerFunc,
        staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;

    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {}
      });
      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;

      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);

        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }

        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }

          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }

        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));

        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
            a,
            kf,
            v;

        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
        } else {
          copy = {};

          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }

          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;

            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }

          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }

      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }

    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);

      _globalTimeline.killTweensOf(parsedTargets);

      _overwritingTween = 0;
    }

    _addToTimeline(parent, _assertThisInitialized(_this3), position);

    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);

    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay)); //in case delay is negative

    }

    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }

  _createClass(Tween, [{
    key: "render",
    value: function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {
        //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          //adjust the time for repeats and yoyos
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

          if (tTime === tDur) {
            // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            //could be during the repeatDelay part. No need to render and fire callbacks.
            this._tTime = tTime;
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
            this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

            return this;
          }

          if (prevTime !== this._time) {
            // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.
            return this;
          }

          if (dur !== this._dur) {
            // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        if (time && !prevTime && !suppressEvents) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
            return this;
          }
        }

        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
            // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    }
  }, {
    key: "targets",
    value: function targets() {
      return this._targets;
    }
  }, {
    key: "invalidate",
    value: function invalidate() {
      this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate();
      return _get(_getPrototypeOf(Tween.prototype), "invalidate", this).call(this);
    }
  }, {
    key: "resetTo",
    value: function resetTo(property, value, start, startIsRelative) {
      _tickerActive || _ticker.wake();
      this._ts || this.play();
      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
          ratio;
      this._initted || _initTween(this, time);
      ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
      // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
      // if (_isObject(property)) { // performance optimization
      // 	for (p in property) {
      // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
      // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
      // 		}
      // 	}
      // } else {

      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
        return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
      } //}


      _alignPlayhead(this, 0);

      this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
      return this.render(0);
    }
  }, {
    key: "kill",
    value: function kill(targets) {
      var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "all";

      if (!targets && (!vars || vars === "all")) {
        this._lazy = this._pt = 0;
        return this.parent ? _interrupt(this) : this;
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        //so people can pass in a comma-delimited list of property names
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

      return this;
    }
  }], [{
    key: "to",
    value: function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    }
  }, {
    key: "from",
    value: function from(targets, vars) {
      return _createTweenType(1, arguments);
    }
  }, {
    key: "delayedCall",
    value: function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    }
  }, {
    key: "fromTo",
    value: function fromTo(targets, fromVars, toVars) {
      return _createTweenType(2, arguments);
    }
  }, {
    key: "set",
    value: function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    }
  }, {
    key: "killTweensOf",
    value: function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    }
  }]);

  return Tween;
}(Animation);

_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.


_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
        params = _slice.call(arguments, 0);

    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */


var _setterPlain = function _setterPlain(target, property, value) {
  return target[property] = value;
},
    _setterFunc = function _setterFunc(target, property, value) {
  return target[property](value);
},
    _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
  return target[property](data.fp, value);
},
    _setterAttribute = function _setterAttribute(target, property, value) {
  return target.setAttribute(property, value);
},
    _getSetter = function _getSetter(target, property) {
  return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
},
    _renderPlain = function _renderPlain(ratio, data) {
  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
},
    _renderBoolean = function _renderBoolean(ratio, data) {
  return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
},
    _renderComplexString = function _renderComplexString(ratio, data) {
  var pt = data._pt,
      s = "";

  if (!ratio && data.b) {
    //b = beginning string
    s = data.b;
  } else if (ratio === 1 && data.e) {
    //e = ending string
    s = data.e;
  } else {
    while (pt) {
      s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

      pt = pt._next;
    }

    s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
  }

  data.set(data.t, data.p, s, data);
},
    _renderPropTweens = function _renderPropTweens(ratio, data) {
  var pt = data._pt;

  while (pt) {
    pt.r(ratio, pt.d);
    pt = pt._next;
  }
},
    _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
  var pt = this._pt,
      next;

  while (pt) {
    next = pt._next;
    pt.p === property && pt.modifier(modifier, tween, target);
    pt = next;
  }
},
    _killPropTweensOf = function _killPropTweensOf(property) {
  var pt = this._pt,
      hasNonDependentRemaining,
      next;

  while (pt) {
    next = pt._next;

    if (pt.p === property && !pt.op || pt.op === property) {
      _removeLinkedListItem(this, pt, "_pt");
    } else if (!pt.dep) {
      hasNonDependentRemaining = 1;
    }

    pt = next;
  }

  return !hasNonDependentRemaining;
},
    _setterWithModifier = function _setterWithModifier(target, property, value, data) {
  data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
},
    _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
  var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

  while (pt) {
    next = pt._next;
    pt2 = first;

    while (pt2 && pt2.pr > pt.pr) {
      pt2 = pt2._next;
    }

    if (pt._prev = pt2 ? pt2._prev : last) {
      pt._prev._next = pt;
    } else {
      first = pt;
    }

    if (pt._next = pt2) {
      pt2._prev = pt;
    } else {
      last = pt;
    }

    pt = next;
  }

  parent._pt = first;
}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    _classCallCheck(this, PropTween);

    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;

    if (next) {
      next._prev = this;
    }
  }

  _createClass(PropTween, [{
    key: "modifier",
    value: function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target; //modifier target

      this.tween = tween;
    }
  }]);

  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});

_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
        format = unit ? _passThrough : _numericIfPossible;

    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);

    if (target.length > 1) {
      var setters = target.map(function (t) {
        return gsap.quickSetter(t, property, unit);
      }),
          l = setters.length;
      return function (value) {
        var i = l;

        while (i--) {
          setters[i](value);
        }
      };
    }

    target = target[0] || {};

    var Plugin = _plugins[property],
        cache = _getCache(target),
        p = cache.harness && (cache.harness.aliases || {})[property] || property,
        // in case it's an alias, like "rotate" for "rotation".
    setter = Plugin ? function (value) {
      var p = new Plugin();
      _quickTween._pt = 0;
      p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
      p.render(1, p);
      _quickTween._pt && _renderPropTweens(1, _quickTween);
    } : cache.set(target, p);

    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;

    var tween = gsap.to(target, _merge((_merge2 = {}, _defineProperty(_merge2, property, "+=0.1"), _defineProperty(_merge2, "paused", true), _merge2), vars || {})),
        func = function func(value, start, startIsRelative) {
      return tween.resetTo(property, value, start, startIsRelative);
    };

    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
        effect = _ref3.effect,
        plugins = _ref3.plugins,
        defaults = _ref3.defaults,
        extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });

    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };

    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot() {
    var vars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var includeDelayedCalls = arguments.length > 1 ? arguments[1] : undefined;
    var tl = new Timeline(vars),
        child,
        next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

    _globalTimeline.remove(tl);

    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;

    while (child) {
      next = child._next;

      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }

      child = next;
    }

    _addToTimeline(_globalTimeline, tl, 0);

    return tl;
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};

_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});

_ticker.add(Timeline.updateRoot);

_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
  var pt = plugin._pt;

  while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
    pt = pt._next;
  }

  return pt;
},
    _addModifiers = function _addModifiers(tween, modifiers) {
  var targets = tween._targets,
      p,
      i,
      pt;

  for (p in modifiers) {
    i = targets.length;

    while (i--) {
      pt = tween._ptLookup[i][p];

      if (pt && (pt = pt.d)) {
        if (pt._pt) {
          // is a plugin
          pt = _getPluginPropTween(pt, p);
        }

        pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
      }
    }
  }
},
    _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
  return {
    name: name,
    rawVars: 1,
    //don't pre-process function-based values or "random()" strings.
    init: function init(target, vars, tween) {
      tween._onInit = function (tween) {
        var temp, p;

        if (_isString(vars)) {
          temp = {};

          _forEachName(vars, function (name) {
            return temp[name] = 1;
          }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


          vars = temp;
        }

        if (modifier) {
          temp = {};

          for (p in vars) {
            temp[p] = modifier(vars[p]);
          }

          vars = temp;
        }

        _addModifiers(tween, vars);
      };
    }
  };
}; //register core plugins


var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt;

    for (p in vars) {
      pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
      pt && (pt.op = p);

      this._props.push(p);
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;

    while (i--) {
      this.add(target, i, target[i] || 0, value[i]);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.10.4";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
    Power1 = _easeMap.Power1,
    Power2 = _easeMap.Power2,
    Power3 = _easeMap.Power3,
    Power4 = _easeMap.Power4,
    Linear = _easeMap.Linear,
    Quad = _easeMap.Quad,
    Cubic = _easeMap.Cubic,
    Quart = _easeMap.Quart,
    Quint = _easeMap.Quint,
    Strong = _easeMap.Strong,
    Elastic = _easeMap.Elastic,
    Back = _easeMap.Back,
    SteppedEase = _easeMap.SteppedEase,
    Bounce = _easeMap.Bounce,
    Sine = _easeMap.Sine,
    Expo = _easeMap.Expo,
    Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./src/scripts/inc/_strings.js":
/*!*************************************!*\
  !*** ./src/scripts/inc/_strings.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emojiExp": () => (/* binding */ emojiExp),
/* harmony export */   "emojiSafeSplit": () => (/* binding */ emojiSafeSplit),
/* harmony export */   "getText": () => (/* binding */ getText),
/* harmony export */   "splitInnerHTML": () => (/* binding */ splitInnerHTML)
/* harmony export */ });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 * strings: 3.10.4
 * https://greensock.com
 *
 * Copyright 2008-2022, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _trimExp = /(^\s+|\s+$)/g;
var emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
function getText(e) {
  var type = e.nodeType,
      result = "";

  if (type === 1 || type === 9 || type === 11) {
    if (typeof e.textContent === "string") {
      return e.textContent;
    } else {
      for (e = e.firstChild; e; e = e.nextSibling) {
        result += getText(e);
      }
    }
  } else if (type === 3 || type === 4) {
    return e.nodeValue;
  }

  return result;
}
function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
  var node = element.firstChild,
      result = [],
      s;

  while (node) {
    if (node.nodeType === 3) {
      s = (node.nodeValue + "").replace(/^\n+/g, "");

      if (!preserveSpaces) {
        s = s.replace(/\s+/g, " ");
      }

      result.push.apply(result, _toConsumableArray(emojiSafeSplit(s, delimiter, trim, preserveSpaces)));
    } else if ((node.nodeName + "").toLowerCase() === "br") {
      result[result.length - 1] += "<br>";
    } else {
      result.push(node.outerHTML);
    }

    node = node.nextSibling;
  }

  s = result.length;

  while (s--) {
    result[s] === "&" && result.splice(s, 1, "&amp;");
  }

  return result;
}
/*
//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.

let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
	_emojiExp = new RegExp(_emoji),
	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
	_emojiSafeSplit = (text, delimiter, trim) => {
		if (trim) {
			text = text.replace(_trimExp, "");
		}
		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
	};
 */

function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
  text += ""; // make sure it's cast as a string. Someone may pass in a number.

  if (trim) {
    text = text.replace(_trimExp, "");
  }

  if (delimiter && delimiter !== "") {
    return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
  }

  var result = [],
      l = text.length,
      i = 0,
      j,
      character;

  for (; i < l; i++) {
    character = text.charAt(i);

    if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {
      //special emoji characters use 2 or 4 unicode characters that we must keep together.
      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
      character = text.substr(i, j);
      result.emoji = 1;
      i += j - 1;
    }

    result.push(character === ">" ? "&gt;" : character === "<" ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i - 1) === " " || text.charAt(i + 1) === " ") ? "&nbsp;" : character);
  }

  return result;
}

/***/ }),

/***/ "./src/scripts/modules/_animations.js":
/*!********************************************!*\
  !*** ./src/scripts/modules/_animations.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bgZoom": () => (/* binding */ bgZoom),
/* harmony export */   "lineLeft": () => (/* binding */ lineLeft),
/* harmony export */   "lineReveal": () => (/* binding */ lineReveal),
/* harmony export */   "opening": () => (/* binding */ opening),
/* harmony export */   "revealFromLeft": () => (/* binding */ revealFromLeft),
/* harmony export */   "revealFromRight": () => (/* binding */ revealFromRight),
/* harmony export */   "revealImage": () => (/* binding */ revealImage),
/* harmony export */   "revealSimple": () => (/* binding */ revealSimple)
/* harmony export */ });
/* harmony import */ var _inc_gsap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../inc/_gsap */ "./src/scripts/inc/_gsap.js");
/* harmony import */ var _inc_SplitText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../inc/_SplitText */ "./src/scripts/inc/_SplitText.js");



var opening = function opening() {
  var curtain = document.querySelector('[data-curtain]'),
      title = document.querySelector('[data-banner-title]'),
      filmBars = document.querySelectorAll('[data-film-bar]'),
      emptyBg = document.querySelector('[data-banner-bg="empty"]'),
      bg = document.querySelectorAll('[data-banner-bg]');
  var openingTl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline();
  openingTl.to(curtain, {
    autoAlpha: 0,
    duration: 1.2
  }, "+=0.5").to(bg, {
    scale: 1,
    duration: 4
  }, "-=0.7").from(title, {
    opacity: 0,
    ease: "power3.in",
    duration: 1.5
  }, "-=2.8").to(filmBars, {
    scaleY: 0,
    duration: 2.15,
    ease: "power3.in"
  }, "-=2.9").to(emptyBg, {
    clip: 'rect(auto auto 0vw auto)',
    ease: "power3.out",
    duration: 1.2
  }, "=-1.6");
};

var lineReveal = function lineReveal() {
  var lineTitle = document.querySelectorAll('[data-line-reveal] > *');
  lineTitle.forEach(function (text, i) {
    var splitText = new _inc_SplitText__WEBPACK_IMPORTED_MODULE_1__.SplitText(text, {
      type: "lines"
    });
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: text,
        start: 'bottom 90%'
      }
    });
    tl.from(splitText.lines, {
      duration: 1.2,
      y: 75,
      opacity: 0,
      ease: "power3.out",
      stagger: 0.12
    });
  });
};

var revealFromLeft = function revealFromLeft() {
  var elements = document.querySelectorAll('[data-reveal-left]');
  elements.forEach(function (el, i) {
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: el
      }
    });
    tl.from(el, {
      x: -80,
      duration: 5,
      ease: "power3.out"
    }, "+=0.2");
  });
};

var revealFromRight = function revealFromRight() {
  var elements = document.querySelectorAll('[data-reveal-right]');
  elements.forEach(function (el, i) {
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: el
      }
    });
    tl.from(el, {
      x: 80,
      duration: 5,
      ease: "power3.out"
    }, "+=0.2");
  });
};

var revealSimple = function revealSimple() {
  var elements = document.querySelectorAll('[data-reveal-simple]');
  elements.forEach(function (el, i) {
    var delay = el.dataset.revealSimple || '0';
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: el
      }
    });
    tl.from(el, {
      opacity: 0,
      duration: 1.2,
      ease: "power3.out"
    }, "+=".concat(delay));
  });
};

var revealImage = function revealImage() {
  var reveal = document.querySelectorAll('[data-reveal-image]');
  reveal.forEach(function (block, i) {
    var image = block.querySelector('.the-image__img'),
        curtain = block.querySelector('.the-image__curtain');
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: block
      }
    });
    tl.from(curtain, {
      duration: 1.2,
      scaleX: 1,
      ease: "power3.out"
    }, "+=0");
  });
};

var bgZoom = function bgZoom() {
  var bg = document.querySelectorAll('[data-bg-zoom]');
  bg.forEach(function (block, i) {
    var image = block.querySelector('.zoom');
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: block
      }
    });
    tl.from(image, {
      duration: 8,
      scale: 1.2,
      ease: "power1.out"
    }, "+=0");
  });
};

var lineLeft = function lineLeft() {
  var lines = document.querySelectorAll('[data-line]');
  lines.forEach(function (line, i) {
    var direction = line.dataset.line;
    var tl = _inc_gsap__WEBPACK_IMPORTED_MODULE_0__.gsap.timeline({
      scrollTrigger: {
        trigger: line,
        start: 'bottom 90%'
      }
    });
    tl.from(line, {
      duration: 0.8,
      scale: 0,
      transformOrigin: direction,
      ease: "power3.out"
    }, "+=0.2");
  });
};



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[4].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/index.scss":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[4].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/index.scss ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".grid, .grid--mobile, .grid--tablet {\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n}\n@media (min-width: 493px) {\n  .grid, .grid--mobile, .grid--tablet {\n    grid-template-columns: repeat(17, 1fr);\n  }\n}\n@media (min-width: 769px) {\n  .grid, .grid--mobile, .grid--tablet {\n    grid-template-columns: repeat(23, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .grid--tablet {\n    display: block;\n  }\n}\n\n@media (max-width: 492px) {\n  .grid--mobile {\n    display: block;\n  }\n}\n\n.grid_1_1 {\n  grid-column-start: 1;\n  grid-column-end: 1;\n}\n\n.grid_1_2 {\n  grid-column-start: 1;\n  grid-column-end: 2;\n}\n\n.grid_1_3 {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n\n.grid_1_4 {\n  grid-column-start: 1;\n  grid-column-end: 4;\n}\n\n.grid_1_5 {\n  grid-column-start: 1;\n  grid-column-end: 5;\n}\n\n.grid_1_6 {\n  grid-column-start: 1;\n  grid-column-end: 6;\n}\n\n.grid_1_7 {\n  grid-column-start: 1;\n  grid-column-end: 7;\n}\n\n.grid_1_8 {\n  grid-column-start: 1;\n  grid-column-end: 8;\n}\n\n.grid_1_9 {\n  grid-column-start: 1;\n  grid-column-end: 9;\n}\n\n.grid_1_10 {\n  grid-column-start: 1;\n  grid-column-end: 10;\n}\n\n.grid_1_11 {\n  grid-column-start: 1;\n  grid-column-end: 11;\n}\n\n.grid_1_12 {\n  grid-column-start: 1;\n  grid-column-end: 12;\n}\n\n.grid_1_13 {\n  grid-column-start: 1;\n  grid-column-end: 13;\n}\n\n.grid_1_14 {\n  grid-column-start: 1;\n  grid-column-end: 14;\n}\n\n.grid_1_15 {\n  grid-column-start: 1;\n  grid-column-end: 15;\n}\n\n.grid_1_16 {\n  grid-column-start: 1;\n  grid-column-end: 16;\n}\n\n.grid_1_17 {\n  grid-column-start: 1;\n  grid-column-end: 17;\n}\n\n.grid_1_18 {\n  grid-column-start: 1;\n  grid-column-end: 18;\n}\n\n.grid_1_19 {\n  grid-column-start: 1;\n  grid-column-end: 19;\n}\n\n.grid_1_20 {\n  grid-column-start: 1;\n  grid-column-end: 20;\n}\n\n.grid_1_21 {\n  grid-column-start: 1;\n  grid-column-end: 21;\n}\n\n.grid_1_22 {\n  grid-column-start: 1;\n  grid-column-end: 22;\n}\n\n.grid_1_23 {\n  grid-column-start: 1;\n  grid-column-end: 23;\n}\n\n.grid_1_24 {\n  grid-column-start: 1;\n  grid-column-end: 24;\n}\n\n.grid_2_1 {\n  grid-column-start: 2;\n  grid-column-end: 1;\n}\n\n.grid_2_2 {\n  grid-column-start: 2;\n  grid-column-end: 2;\n}\n\n.grid_2_3 {\n  grid-column-start: 2;\n  grid-column-end: 3;\n}\n\n.grid_2_4 {\n  grid-column-start: 2;\n  grid-column-end: 4;\n}\n\n.grid_2_5 {\n  grid-column-start: 2;\n  grid-column-end: 5;\n}\n\n.grid_2_6 {\n  grid-column-start: 2;\n  grid-column-end: 6;\n}\n\n.grid_2_7 {\n  grid-column-start: 2;\n  grid-column-end: 7;\n}\n\n.grid_2_8 {\n  grid-column-start: 2;\n  grid-column-end: 8;\n}\n\n.grid_2_9 {\n  grid-column-start: 2;\n  grid-column-end: 9;\n}\n\n.grid_2_10 {\n  grid-column-start: 2;\n  grid-column-end: 10;\n}\n\n.grid_2_11 {\n  grid-column-start: 2;\n  grid-column-end: 11;\n}\n\n.grid_2_12 {\n  grid-column-start: 2;\n  grid-column-end: 12;\n}\n\n.grid_2_13 {\n  grid-column-start: 2;\n  grid-column-end: 13;\n}\n\n.grid_2_14 {\n  grid-column-start: 2;\n  grid-column-end: 14;\n}\n\n.grid_2_15 {\n  grid-column-start: 2;\n  grid-column-end: 15;\n}\n\n.grid_2_16 {\n  grid-column-start: 2;\n  grid-column-end: 16;\n}\n\n.grid_2_17 {\n  grid-column-start: 2;\n  grid-column-end: 17;\n}\n\n.grid_2_18 {\n  grid-column-start: 2;\n  grid-column-end: 18;\n}\n\n.grid_2_19 {\n  grid-column-start: 2;\n  grid-column-end: 19;\n}\n\n.grid_2_20 {\n  grid-column-start: 2;\n  grid-column-end: 20;\n}\n\n.grid_2_21 {\n  grid-column-start: 2;\n  grid-column-end: 21;\n}\n\n.grid_2_22 {\n  grid-column-start: 2;\n  grid-column-end: 22;\n}\n\n.grid_2_23 {\n  grid-column-start: 2;\n  grid-column-end: 23;\n}\n\n.grid_2_24 {\n  grid-column-start: 2;\n  grid-column-end: 24;\n}\n\n.grid_3_1 {\n  grid-column-start: 3;\n  grid-column-end: 1;\n}\n\n.grid_3_2 {\n  grid-column-start: 3;\n  grid-column-end: 2;\n}\n\n.grid_3_3 {\n  grid-column-start: 3;\n  grid-column-end: 3;\n}\n\n.grid_3_4 {\n  grid-column-start: 3;\n  grid-column-end: 4;\n}\n\n.grid_3_5 {\n  grid-column-start: 3;\n  grid-column-end: 5;\n}\n\n.grid_3_6 {\n  grid-column-start: 3;\n  grid-column-end: 6;\n}\n\n.grid_3_7 {\n  grid-column-start: 3;\n  grid-column-end: 7;\n}\n\n.grid_3_8 {\n  grid-column-start: 3;\n  grid-column-end: 8;\n}\n\n.grid_3_9 {\n  grid-column-start: 3;\n  grid-column-end: 9;\n}\n\n.grid_3_10 {\n  grid-column-start: 3;\n  grid-column-end: 10;\n}\n\n.grid_3_11 {\n  grid-column-start: 3;\n  grid-column-end: 11;\n}\n\n.grid_3_12 {\n  grid-column-start: 3;\n  grid-column-end: 12;\n}\n\n.grid_3_13 {\n  grid-column-start: 3;\n  grid-column-end: 13;\n}\n\n.grid_3_14 {\n  grid-column-start: 3;\n  grid-column-end: 14;\n}\n\n.grid_3_15 {\n  grid-column-start: 3;\n  grid-column-end: 15;\n}\n\n.grid_3_16 {\n  grid-column-start: 3;\n  grid-column-end: 16;\n}\n\n.grid_3_17 {\n  grid-column-start: 3;\n  grid-column-end: 17;\n}\n\n.grid_3_18 {\n  grid-column-start: 3;\n  grid-column-end: 18;\n}\n\n.grid_3_19 {\n  grid-column-start: 3;\n  grid-column-end: 19;\n}\n\n.grid_3_20 {\n  grid-column-start: 3;\n  grid-column-end: 20;\n}\n\n.grid_3_21 {\n  grid-column-start: 3;\n  grid-column-end: 21;\n}\n\n.grid_3_22 {\n  grid-column-start: 3;\n  grid-column-end: 22;\n}\n\n.grid_3_23 {\n  grid-column-start: 3;\n  grid-column-end: 23;\n}\n\n.grid_3_24 {\n  grid-column-start: 3;\n  grid-column-end: 24;\n}\n\n.grid_4_1 {\n  grid-column-start: 4;\n  grid-column-end: 1;\n}\n\n.grid_4_2 {\n  grid-column-start: 4;\n  grid-column-end: 2;\n}\n\n.grid_4_3 {\n  grid-column-start: 4;\n  grid-column-end: 3;\n}\n\n.grid_4_4 {\n  grid-column-start: 4;\n  grid-column-end: 4;\n}\n\n.grid_4_5 {\n  grid-column-start: 4;\n  grid-column-end: 5;\n}\n\n.grid_4_6 {\n  grid-column-start: 4;\n  grid-column-end: 6;\n}\n\n.grid_4_7 {\n  grid-column-start: 4;\n  grid-column-end: 7;\n}\n\n.grid_4_8 {\n  grid-column-start: 4;\n  grid-column-end: 8;\n}\n\n.grid_4_9 {\n  grid-column-start: 4;\n  grid-column-end: 9;\n}\n\n.grid_4_10 {\n  grid-column-start: 4;\n  grid-column-end: 10;\n}\n\n.grid_4_11 {\n  grid-column-start: 4;\n  grid-column-end: 11;\n}\n\n.grid_4_12 {\n  grid-column-start: 4;\n  grid-column-end: 12;\n}\n\n.grid_4_13 {\n  grid-column-start: 4;\n  grid-column-end: 13;\n}\n\n.grid_4_14 {\n  grid-column-start: 4;\n  grid-column-end: 14;\n}\n\n.grid_4_15 {\n  grid-column-start: 4;\n  grid-column-end: 15;\n}\n\n.grid_4_16 {\n  grid-column-start: 4;\n  grid-column-end: 16;\n}\n\n.grid_4_17 {\n  grid-column-start: 4;\n  grid-column-end: 17;\n}\n\n.grid_4_18 {\n  grid-column-start: 4;\n  grid-column-end: 18;\n}\n\n.grid_4_19 {\n  grid-column-start: 4;\n  grid-column-end: 19;\n}\n\n.grid_4_20 {\n  grid-column-start: 4;\n  grid-column-end: 20;\n}\n\n.grid_4_21 {\n  grid-column-start: 4;\n  grid-column-end: 21;\n}\n\n.grid_4_22 {\n  grid-column-start: 4;\n  grid-column-end: 22;\n}\n\n.grid_4_23 {\n  grid-column-start: 4;\n  grid-column-end: 23;\n}\n\n.grid_4_24 {\n  grid-column-start: 4;\n  grid-column-end: 24;\n}\n\n.grid_5_1 {\n  grid-column-start: 5;\n  grid-column-end: 1;\n}\n\n.grid_5_2 {\n  grid-column-start: 5;\n  grid-column-end: 2;\n}\n\n.grid_5_3 {\n  grid-column-start: 5;\n  grid-column-end: 3;\n}\n\n.grid_5_4 {\n  grid-column-start: 5;\n  grid-column-end: 4;\n}\n\n.grid_5_5 {\n  grid-column-start: 5;\n  grid-column-end: 5;\n}\n\n.grid_5_6 {\n  grid-column-start: 5;\n  grid-column-end: 6;\n}\n\n.grid_5_7 {\n  grid-column-start: 5;\n  grid-column-end: 7;\n}\n\n.grid_5_8 {\n  grid-column-start: 5;\n  grid-column-end: 8;\n}\n\n.grid_5_9 {\n  grid-column-start: 5;\n  grid-column-end: 9;\n}\n\n.grid_5_10 {\n  grid-column-start: 5;\n  grid-column-end: 10;\n}\n\n.grid_5_11 {\n  grid-column-start: 5;\n  grid-column-end: 11;\n}\n\n.grid_5_12 {\n  grid-column-start: 5;\n  grid-column-end: 12;\n}\n\n.grid_5_13 {\n  grid-column-start: 5;\n  grid-column-end: 13;\n}\n\n.grid_5_14 {\n  grid-column-start: 5;\n  grid-column-end: 14;\n}\n\n.grid_5_15 {\n  grid-column-start: 5;\n  grid-column-end: 15;\n}\n\n.grid_5_16 {\n  grid-column-start: 5;\n  grid-column-end: 16;\n}\n\n.grid_5_17 {\n  grid-column-start: 5;\n  grid-column-end: 17;\n}\n\n.grid_5_18 {\n  grid-column-start: 5;\n  grid-column-end: 18;\n}\n\n.grid_5_19 {\n  grid-column-start: 5;\n  grid-column-end: 19;\n}\n\n.grid_5_20 {\n  grid-column-start: 5;\n  grid-column-end: 20;\n}\n\n.grid_5_21 {\n  grid-column-start: 5;\n  grid-column-end: 21;\n}\n\n.grid_5_22 {\n  grid-column-start: 5;\n  grid-column-end: 22;\n}\n\n.grid_5_23 {\n  grid-column-start: 5;\n  grid-column-end: 23;\n}\n\n.grid_5_24 {\n  grid-column-start: 5;\n  grid-column-end: 24;\n}\n\n.grid_6_1 {\n  grid-column-start: 6;\n  grid-column-end: 1;\n}\n\n.grid_6_2 {\n  grid-column-start: 6;\n  grid-column-end: 2;\n}\n\n.grid_6_3 {\n  grid-column-start: 6;\n  grid-column-end: 3;\n}\n\n.grid_6_4 {\n  grid-column-start: 6;\n  grid-column-end: 4;\n}\n\n.grid_6_5 {\n  grid-column-start: 6;\n  grid-column-end: 5;\n}\n\n.grid_6_6 {\n  grid-column-start: 6;\n  grid-column-end: 6;\n}\n\n.grid_6_7 {\n  grid-column-start: 6;\n  grid-column-end: 7;\n}\n\n.grid_6_8 {\n  grid-column-start: 6;\n  grid-column-end: 8;\n}\n\n.grid_6_9 {\n  grid-column-start: 6;\n  grid-column-end: 9;\n}\n\n.grid_6_10 {\n  grid-column-start: 6;\n  grid-column-end: 10;\n}\n\n.grid_6_11 {\n  grid-column-start: 6;\n  grid-column-end: 11;\n}\n\n.grid_6_12 {\n  grid-column-start: 6;\n  grid-column-end: 12;\n}\n\n.grid_6_13 {\n  grid-column-start: 6;\n  grid-column-end: 13;\n}\n\n.grid_6_14 {\n  grid-column-start: 6;\n  grid-column-end: 14;\n}\n\n.grid_6_15 {\n  grid-column-start: 6;\n  grid-column-end: 15;\n}\n\n.grid_6_16 {\n  grid-column-start: 6;\n  grid-column-end: 16;\n}\n\n.grid_6_17 {\n  grid-column-start: 6;\n  grid-column-end: 17;\n}\n\n.grid_6_18 {\n  grid-column-start: 6;\n  grid-column-end: 18;\n}\n\n.grid_6_19 {\n  grid-column-start: 6;\n  grid-column-end: 19;\n}\n\n.grid_6_20 {\n  grid-column-start: 6;\n  grid-column-end: 20;\n}\n\n.grid_6_21 {\n  grid-column-start: 6;\n  grid-column-end: 21;\n}\n\n.grid_6_22 {\n  grid-column-start: 6;\n  grid-column-end: 22;\n}\n\n.grid_6_23 {\n  grid-column-start: 6;\n  grid-column-end: 23;\n}\n\n.grid_6_24 {\n  grid-column-start: 6;\n  grid-column-end: 24;\n}\n\n.grid_7_1 {\n  grid-column-start: 7;\n  grid-column-end: 1;\n}\n\n.grid_7_2 {\n  grid-column-start: 7;\n  grid-column-end: 2;\n}\n\n.grid_7_3 {\n  grid-column-start: 7;\n  grid-column-end: 3;\n}\n\n.grid_7_4 {\n  grid-column-start: 7;\n  grid-column-end: 4;\n}\n\n.grid_7_5 {\n  grid-column-start: 7;\n  grid-column-end: 5;\n}\n\n.grid_7_6 {\n  grid-column-start: 7;\n  grid-column-end: 6;\n}\n\n.grid_7_7 {\n  grid-column-start: 7;\n  grid-column-end: 7;\n}\n\n.grid_7_8 {\n  grid-column-start: 7;\n  grid-column-end: 8;\n}\n\n.grid_7_9 {\n  grid-column-start: 7;\n  grid-column-end: 9;\n}\n\n.grid_7_10 {\n  grid-column-start: 7;\n  grid-column-end: 10;\n}\n\n.grid_7_11 {\n  grid-column-start: 7;\n  grid-column-end: 11;\n}\n\n.grid_7_12 {\n  grid-column-start: 7;\n  grid-column-end: 12;\n}\n\n.grid_7_13 {\n  grid-column-start: 7;\n  grid-column-end: 13;\n}\n\n.grid_7_14 {\n  grid-column-start: 7;\n  grid-column-end: 14;\n}\n\n.grid_7_15 {\n  grid-column-start: 7;\n  grid-column-end: 15;\n}\n\n.grid_7_16 {\n  grid-column-start: 7;\n  grid-column-end: 16;\n}\n\n.grid_7_17 {\n  grid-column-start: 7;\n  grid-column-end: 17;\n}\n\n.grid_7_18 {\n  grid-column-start: 7;\n  grid-column-end: 18;\n}\n\n.grid_7_19 {\n  grid-column-start: 7;\n  grid-column-end: 19;\n}\n\n.grid_7_20 {\n  grid-column-start: 7;\n  grid-column-end: 20;\n}\n\n.grid_7_21 {\n  grid-column-start: 7;\n  grid-column-end: 21;\n}\n\n.grid_7_22 {\n  grid-column-start: 7;\n  grid-column-end: 22;\n}\n\n.grid_7_23 {\n  grid-column-start: 7;\n  grid-column-end: 23;\n}\n\n.grid_7_24 {\n  grid-column-start: 7;\n  grid-column-end: 24;\n}\n\n.grid_8_1 {\n  grid-column-start: 8;\n  grid-column-end: 1;\n}\n\n.grid_8_2 {\n  grid-column-start: 8;\n  grid-column-end: 2;\n}\n\n.grid_8_3 {\n  grid-column-start: 8;\n  grid-column-end: 3;\n}\n\n.grid_8_4 {\n  grid-column-start: 8;\n  grid-column-end: 4;\n}\n\n.grid_8_5 {\n  grid-column-start: 8;\n  grid-column-end: 5;\n}\n\n.grid_8_6 {\n  grid-column-start: 8;\n  grid-column-end: 6;\n}\n\n.grid_8_7 {\n  grid-column-start: 8;\n  grid-column-end: 7;\n}\n\n.grid_8_8 {\n  grid-column-start: 8;\n  grid-column-end: 8;\n}\n\n.grid_8_9 {\n  grid-column-start: 8;\n  grid-column-end: 9;\n}\n\n.grid_8_10 {\n  grid-column-start: 8;\n  grid-column-end: 10;\n}\n\n.grid_8_11 {\n  grid-column-start: 8;\n  grid-column-end: 11;\n}\n\n.grid_8_12 {\n  grid-column-start: 8;\n  grid-column-end: 12;\n}\n\n.grid_8_13 {\n  grid-column-start: 8;\n  grid-column-end: 13;\n}\n\n.grid_8_14 {\n  grid-column-start: 8;\n  grid-column-end: 14;\n}\n\n.grid_8_15 {\n  grid-column-start: 8;\n  grid-column-end: 15;\n}\n\n.grid_8_16 {\n  grid-column-start: 8;\n  grid-column-end: 16;\n}\n\n.grid_8_17 {\n  grid-column-start: 8;\n  grid-column-end: 17;\n}\n\n.grid_8_18 {\n  grid-column-start: 8;\n  grid-column-end: 18;\n}\n\n.grid_8_19 {\n  grid-column-start: 8;\n  grid-column-end: 19;\n}\n\n.grid_8_20 {\n  grid-column-start: 8;\n  grid-column-end: 20;\n}\n\n.grid_8_21 {\n  grid-column-start: 8;\n  grid-column-end: 21;\n}\n\n.grid_8_22 {\n  grid-column-start: 8;\n  grid-column-end: 22;\n}\n\n.grid_8_23 {\n  grid-column-start: 8;\n  grid-column-end: 23;\n}\n\n.grid_8_24 {\n  grid-column-start: 8;\n  grid-column-end: 24;\n}\n\n.grid_9_1 {\n  grid-column-start: 9;\n  grid-column-end: 1;\n}\n\n.grid_9_2 {\n  grid-column-start: 9;\n  grid-column-end: 2;\n}\n\n.grid_9_3 {\n  grid-column-start: 9;\n  grid-column-end: 3;\n}\n\n.grid_9_4 {\n  grid-column-start: 9;\n  grid-column-end: 4;\n}\n\n.grid_9_5 {\n  grid-column-start: 9;\n  grid-column-end: 5;\n}\n\n.grid_9_6 {\n  grid-column-start: 9;\n  grid-column-end: 6;\n}\n\n.grid_9_7 {\n  grid-column-start: 9;\n  grid-column-end: 7;\n}\n\n.grid_9_8 {\n  grid-column-start: 9;\n  grid-column-end: 8;\n}\n\n.grid_9_9 {\n  grid-column-start: 9;\n  grid-column-end: 9;\n}\n\n.grid_9_10 {\n  grid-column-start: 9;\n  grid-column-end: 10;\n}\n\n.grid_9_11 {\n  grid-column-start: 9;\n  grid-column-end: 11;\n}\n\n.grid_9_12 {\n  grid-column-start: 9;\n  grid-column-end: 12;\n}\n\n.grid_9_13 {\n  grid-column-start: 9;\n  grid-column-end: 13;\n}\n\n.grid_9_14 {\n  grid-column-start: 9;\n  grid-column-end: 14;\n}\n\n.grid_9_15 {\n  grid-column-start: 9;\n  grid-column-end: 15;\n}\n\n.grid_9_16 {\n  grid-column-start: 9;\n  grid-column-end: 16;\n}\n\n.grid_9_17 {\n  grid-column-start: 9;\n  grid-column-end: 17;\n}\n\n.grid_9_18 {\n  grid-column-start: 9;\n  grid-column-end: 18;\n}\n\n.grid_9_19 {\n  grid-column-start: 9;\n  grid-column-end: 19;\n}\n\n.grid_9_20 {\n  grid-column-start: 9;\n  grid-column-end: 20;\n}\n\n.grid_9_21 {\n  grid-column-start: 9;\n  grid-column-end: 21;\n}\n\n.grid_9_22 {\n  grid-column-start: 9;\n  grid-column-end: 22;\n}\n\n.grid_9_23 {\n  grid-column-start: 9;\n  grid-column-end: 23;\n}\n\n.grid_9_24 {\n  grid-column-start: 9;\n  grid-column-end: 24;\n}\n\n.grid_10_1 {\n  grid-column-start: 10;\n  grid-column-end: 1;\n}\n\n.grid_10_2 {\n  grid-column-start: 10;\n  grid-column-end: 2;\n}\n\n.grid_10_3 {\n  grid-column-start: 10;\n  grid-column-end: 3;\n}\n\n.grid_10_4 {\n  grid-column-start: 10;\n  grid-column-end: 4;\n}\n\n.grid_10_5 {\n  grid-column-start: 10;\n  grid-column-end: 5;\n}\n\n.grid_10_6 {\n  grid-column-start: 10;\n  grid-column-end: 6;\n}\n\n.grid_10_7 {\n  grid-column-start: 10;\n  grid-column-end: 7;\n}\n\n.grid_10_8 {\n  grid-column-start: 10;\n  grid-column-end: 8;\n}\n\n.grid_10_9 {\n  grid-column-start: 10;\n  grid-column-end: 9;\n}\n\n.grid_10_10 {\n  grid-column-start: 10;\n  grid-column-end: 10;\n}\n\n.grid_10_11 {\n  grid-column-start: 10;\n  grid-column-end: 11;\n}\n\n.grid_10_12 {\n  grid-column-start: 10;\n  grid-column-end: 12;\n}\n\n.grid_10_13 {\n  grid-column-start: 10;\n  grid-column-end: 13;\n}\n\n.grid_10_14 {\n  grid-column-start: 10;\n  grid-column-end: 14;\n}\n\n.grid_10_15 {\n  grid-column-start: 10;\n  grid-column-end: 15;\n}\n\n.grid_10_16 {\n  grid-column-start: 10;\n  grid-column-end: 16;\n}\n\n.grid_10_17 {\n  grid-column-start: 10;\n  grid-column-end: 17;\n}\n\n.grid_10_18 {\n  grid-column-start: 10;\n  grid-column-end: 18;\n}\n\n.grid_10_19 {\n  grid-column-start: 10;\n  grid-column-end: 19;\n}\n\n.grid_10_20 {\n  grid-column-start: 10;\n  grid-column-end: 20;\n}\n\n.grid_10_21 {\n  grid-column-start: 10;\n  grid-column-end: 21;\n}\n\n.grid_10_22 {\n  grid-column-start: 10;\n  grid-column-end: 22;\n}\n\n.grid_10_23 {\n  grid-column-start: 10;\n  grid-column-end: 23;\n}\n\n.grid_10_24 {\n  grid-column-start: 10;\n  grid-column-end: 24;\n}\n\n.grid_11_1 {\n  grid-column-start: 11;\n  grid-column-end: 1;\n}\n\n.grid_11_2 {\n  grid-column-start: 11;\n  grid-column-end: 2;\n}\n\n.grid_11_3 {\n  grid-column-start: 11;\n  grid-column-end: 3;\n}\n\n.grid_11_4 {\n  grid-column-start: 11;\n  grid-column-end: 4;\n}\n\n.grid_11_5 {\n  grid-column-start: 11;\n  grid-column-end: 5;\n}\n\n.grid_11_6 {\n  grid-column-start: 11;\n  grid-column-end: 6;\n}\n\n.grid_11_7 {\n  grid-column-start: 11;\n  grid-column-end: 7;\n}\n\n.grid_11_8 {\n  grid-column-start: 11;\n  grid-column-end: 8;\n}\n\n.grid_11_9 {\n  grid-column-start: 11;\n  grid-column-end: 9;\n}\n\n.grid_11_10 {\n  grid-column-start: 11;\n  grid-column-end: 10;\n}\n\n.grid_11_11 {\n  grid-column-start: 11;\n  grid-column-end: 11;\n}\n\n.grid_11_12 {\n  grid-column-start: 11;\n  grid-column-end: 12;\n}\n\n.grid_11_13 {\n  grid-column-start: 11;\n  grid-column-end: 13;\n}\n\n.grid_11_14 {\n  grid-column-start: 11;\n  grid-column-end: 14;\n}\n\n.grid_11_15 {\n  grid-column-start: 11;\n  grid-column-end: 15;\n}\n\n.grid_11_16 {\n  grid-column-start: 11;\n  grid-column-end: 16;\n}\n\n.grid_11_17 {\n  grid-column-start: 11;\n  grid-column-end: 17;\n}\n\n.grid_11_18 {\n  grid-column-start: 11;\n  grid-column-end: 18;\n}\n\n.grid_11_19 {\n  grid-column-start: 11;\n  grid-column-end: 19;\n}\n\n.grid_11_20 {\n  grid-column-start: 11;\n  grid-column-end: 20;\n}\n\n.grid_11_21 {\n  grid-column-start: 11;\n  grid-column-end: 21;\n}\n\n.grid_11_22 {\n  grid-column-start: 11;\n  grid-column-end: 22;\n}\n\n.grid_11_23 {\n  grid-column-start: 11;\n  grid-column-end: 23;\n}\n\n.grid_11_24 {\n  grid-column-start: 11;\n  grid-column-end: 24;\n}\n\n.grid_12_1 {\n  grid-column-start: 12;\n  grid-column-end: 1;\n}\n\n.grid_12_2 {\n  grid-column-start: 12;\n  grid-column-end: 2;\n}\n\n.grid_12_3 {\n  grid-column-start: 12;\n  grid-column-end: 3;\n}\n\n.grid_12_4 {\n  grid-column-start: 12;\n  grid-column-end: 4;\n}\n\n.grid_12_5 {\n  grid-column-start: 12;\n  grid-column-end: 5;\n}\n\n.grid_12_6 {\n  grid-column-start: 12;\n  grid-column-end: 6;\n}\n\n.grid_12_7 {\n  grid-column-start: 12;\n  grid-column-end: 7;\n}\n\n.grid_12_8 {\n  grid-column-start: 12;\n  grid-column-end: 8;\n}\n\n.grid_12_9 {\n  grid-column-start: 12;\n  grid-column-end: 9;\n}\n\n.grid_12_10 {\n  grid-column-start: 12;\n  grid-column-end: 10;\n}\n\n.grid_12_11 {\n  grid-column-start: 12;\n  grid-column-end: 11;\n}\n\n.grid_12_12 {\n  grid-column-start: 12;\n  grid-column-end: 12;\n}\n\n.grid_12_13 {\n  grid-column-start: 12;\n  grid-column-end: 13;\n}\n\n.grid_12_14 {\n  grid-column-start: 12;\n  grid-column-end: 14;\n}\n\n.grid_12_15 {\n  grid-column-start: 12;\n  grid-column-end: 15;\n}\n\n.grid_12_16 {\n  grid-column-start: 12;\n  grid-column-end: 16;\n}\n\n.grid_12_17 {\n  grid-column-start: 12;\n  grid-column-end: 17;\n}\n\n.grid_12_18 {\n  grid-column-start: 12;\n  grid-column-end: 18;\n}\n\n.grid_12_19 {\n  grid-column-start: 12;\n  grid-column-end: 19;\n}\n\n.grid_12_20 {\n  grid-column-start: 12;\n  grid-column-end: 20;\n}\n\n.grid_12_21 {\n  grid-column-start: 12;\n  grid-column-end: 21;\n}\n\n.grid_12_22 {\n  grid-column-start: 12;\n  grid-column-end: 22;\n}\n\n.grid_12_23 {\n  grid-column-start: 12;\n  grid-column-end: 23;\n}\n\n.grid_12_24 {\n  grid-column-start: 12;\n  grid-column-end: 24;\n}\n\n.grid_13_1 {\n  grid-column-start: 13;\n  grid-column-end: 1;\n}\n\n.grid_13_2 {\n  grid-column-start: 13;\n  grid-column-end: 2;\n}\n\n.grid_13_3 {\n  grid-column-start: 13;\n  grid-column-end: 3;\n}\n\n.grid_13_4 {\n  grid-column-start: 13;\n  grid-column-end: 4;\n}\n\n.grid_13_5 {\n  grid-column-start: 13;\n  grid-column-end: 5;\n}\n\n.grid_13_6 {\n  grid-column-start: 13;\n  grid-column-end: 6;\n}\n\n.grid_13_7 {\n  grid-column-start: 13;\n  grid-column-end: 7;\n}\n\n.grid_13_8 {\n  grid-column-start: 13;\n  grid-column-end: 8;\n}\n\n.grid_13_9 {\n  grid-column-start: 13;\n  grid-column-end: 9;\n}\n\n.grid_13_10 {\n  grid-column-start: 13;\n  grid-column-end: 10;\n}\n\n.grid_13_11 {\n  grid-column-start: 13;\n  grid-column-end: 11;\n}\n\n.grid_13_12 {\n  grid-column-start: 13;\n  grid-column-end: 12;\n}\n\n.grid_13_13 {\n  grid-column-start: 13;\n  grid-column-end: 13;\n}\n\n.grid_13_14 {\n  grid-column-start: 13;\n  grid-column-end: 14;\n}\n\n.grid_13_15 {\n  grid-column-start: 13;\n  grid-column-end: 15;\n}\n\n.grid_13_16 {\n  grid-column-start: 13;\n  grid-column-end: 16;\n}\n\n.grid_13_17 {\n  grid-column-start: 13;\n  grid-column-end: 17;\n}\n\n.grid_13_18 {\n  grid-column-start: 13;\n  grid-column-end: 18;\n}\n\n.grid_13_19 {\n  grid-column-start: 13;\n  grid-column-end: 19;\n}\n\n.grid_13_20 {\n  grid-column-start: 13;\n  grid-column-end: 20;\n}\n\n.grid_13_21 {\n  grid-column-start: 13;\n  grid-column-end: 21;\n}\n\n.grid_13_22 {\n  grid-column-start: 13;\n  grid-column-end: 22;\n}\n\n.grid_13_23 {\n  grid-column-start: 13;\n  grid-column-end: 23;\n}\n\n.grid_13_24 {\n  grid-column-start: 13;\n  grid-column-end: 24;\n}\n\n.grid_14_1 {\n  grid-column-start: 14;\n  grid-column-end: 1;\n}\n\n.grid_14_2 {\n  grid-column-start: 14;\n  grid-column-end: 2;\n}\n\n.grid_14_3 {\n  grid-column-start: 14;\n  grid-column-end: 3;\n}\n\n.grid_14_4 {\n  grid-column-start: 14;\n  grid-column-end: 4;\n}\n\n.grid_14_5 {\n  grid-column-start: 14;\n  grid-column-end: 5;\n}\n\n.grid_14_6 {\n  grid-column-start: 14;\n  grid-column-end: 6;\n}\n\n.grid_14_7 {\n  grid-column-start: 14;\n  grid-column-end: 7;\n}\n\n.grid_14_8 {\n  grid-column-start: 14;\n  grid-column-end: 8;\n}\n\n.grid_14_9 {\n  grid-column-start: 14;\n  grid-column-end: 9;\n}\n\n.grid_14_10 {\n  grid-column-start: 14;\n  grid-column-end: 10;\n}\n\n.grid_14_11 {\n  grid-column-start: 14;\n  grid-column-end: 11;\n}\n\n.grid_14_12 {\n  grid-column-start: 14;\n  grid-column-end: 12;\n}\n\n.grid_14_13 {\n  grid-column-start: 14;\n  grid-column-end: 13;\n}\n\n.grid_14_14 {\n  grid-column-start: 14;\n  grid-column-end: 14;\n}\n\n.grid_14_15 {\n  grid-column-start: 14;\n  grid-column-end: 15;\n}\n\n.grid_14_16 {\n  grid-column-start: 14;\n  grid-column-end: 16;\n}\n\n.grid_14_17 {\n  grid-column-start: 14;\n  grid-column-end: 17;\n}\n\n.grid_14_18 {\n  grid-column-start: 14;\n  grid-column-end: 18;\n}\n\n.grid_14_19 {\n  grid-column-start: 14;\n  grid-column-end: 19;\n}\n\n.grid_14_20 {\n  grid-column-start: 14;\n  grid-column-end: 20;\n}\n\n.grid_14_21 {\n  grid-column-start: 14;\n  grid-column-end: 21;\n}\n\n.grid_14_22 {\n  grid-column-start: 14;\n  grid-column-end: 22;\n}\n\n.grid_14_23 {\n  grid-column-start: 14;\n  grid-column-end: 23;\n}\n\n.grid_14_24 {\n  grid-column-start: 14;\n  grid-column-end: 24;\n}\n\n.grid_15_1 {\n  grid-column-start: 15;\n  grid-column-end: 1;\n}\n\n.grid_15_2 {\n  grid-column-start: 15;\n  grid-column-end: 2;\n}\n\n.grid_15_3 {\n  grid-column-start: 15;\n  grid-column-end: 3;\n}\n\n.grid_15_4 {\n  grid-column-start: 15;\n  grid-column-end: 4;\n}\n\n.grid_15_5 {\n  grid-column-start: 15;\n  grid-column-end: 5;\n}\n\n.grid_15_6 {\n  grid-column-start: 15;\n  grid-column-end: 6;\n}\n\n.grid_15_7 {\n  grid-column-start: 15;\n  grid-column-end: 7;\n}\n\n.grid_15_8 {\n  grid-column-start: 15;\n  grid-column-end: 8;\n}\n\n.grid_15_9 {\n  grid-column-start: 15;\n  grid-column-end: 9;\n}\n\n.grid_15_10 {\n  grid-column-start: 15;\n  grid-column-end: 10;\n}\n\n.grid_15_11 {\n  grid-column-start: 15;\n  grid-column-end: 11;\n}\n\n.grid_15_12 {\n  grid-column-start: 15;\n  grid-column-end: 12;\n}\n\n.grid_15_13 {\n  grid-column-start: 15;\n  grid-column-end: 13;\n}\n\n.grid_15_14 {\n  grid-column-start: 15;\n  grid-column-end: 14;\n}\n\n.grid_15_15 {\n  grid-column-start: 15;\n  grid-column-end: 15;\n}\n\n.grid_15_16 {\n  grid-column-start: 15;\n  grid-column-end: 16;\n}\n\n.grid_15_17 {\n  grid-column-start: 15;\n  grid-column-end: 17;\n}\n\n.grid_15_18 {\n  grid-column-start: 15;\n  grid-column-end: 18;\n}\n\n.grid_15_19 {\n  grid-column-start: 15;\n  grid-column-end: 19;\n}\n\n.grid_15_20 {\n  grid-column-start: 15;\n  grid-column-end: 20;\n}\n\n.grid_15_21 {\n  grid-column-start: 15;\n  grid-column-end: 21;\n}\n\n.grid_15_22 {\n  grid-column-start: 15;\n  grid-column-end: 22;\n}\n\n.grid_15_23 {\n  grid-column-start: 15;\n  grid-column-end: 23;\n}\n\n.grid_15_24 {\n  grid-column-start: 15;\n  grid-column-end: 24;\n}\n\n.grid_16_1 {\n  grid-column-start: 16;\n  grid-column-end: 1;\n}\n\n.grid_16_2 {\n  grid-column-start: 16;\n  grid-column-end: 2;\n}\n\n.grid_16_3 {\n  grid-column-start: 16;\n  grid-column-end: 3;\n}\n\n.grid_16_4 {\n  grid-column-start: 16;\n  grid-column-end: 4;\n}\n\n.grid_16_5 {\n  grid-column-start: 16;\n  grid-column-end: 5;\n}\n\n.grid_16_6 {\n  grid-column-start: 16;\n  grid-column-end: 6;\n}\n\n.grid_16_7 {\n  grid-column-start: 16;\n  grid-column-end: 7;\n}\n\n.grid_16_8 {\n  grid-column-start: 16;\n  grid-column-end: 8;\n}\n\n.grid_16_9 {\n  grid-column-start: 16;\n  grid-column-end: 9;\n}\n\n.grid_16_10 {\n  grid-column-start: 16;\n  grid-column-end: 10;\n}\n\n.grid_16_11 {\n  grid-column-start: 16;\n  grid-column-end: 11;\n}\n\n.grid_16_12 {\n  grid-column-start: 16;\n  grid-column-end: 12;\n}\n\n.grid_16_13 {\n  grid-column-start: 16;\n  grid-column-end: 13;\n}\n\n.grid_16_14 {\n  grid-column-start: 16;\n  grid-column-end: 14;\n}\n\n.grid_16_15 {\n  grid-column-start: 16;\n  grid-column-end: 15;\n}\n\n.grid_16_16 {\n  grid-column-start: 16;\n  grid-column-end: 16;\n}\n\n.grid_16_17 {\n  grid-column-start: 16;\n  grid-column-end: 17;\n}\n\n.grid_16_18 {\n  grid-column-start: 16;\n  grid-column-end: 18;\n}\n\n.grid_16_19 {\n  grid-column-start: 16;\n  grid-column-end: 19;\n}\n\n.grid_16_20 {\n  grid-column-start: 16;\n  grid-column-end: 20;\n}\n\n.grid_16_21 {\n  grid-column-start: 16;\n  grid-column-end: 21;\n}\n\n.grid_16_22 {\n  grid-column-start: 16;\n  grid-column-end: 22;\n}\n\n.grid_16_23 {\n  grid-column-start: 16;\n  grid-column-end: 23;\n}\n\n.grid_16_24 {\n  grid-column-start: 16;\n  grid-column-end: 24;\n}\n\n.grid_17_1 {\n  grid-column-start: 17;\n  grid-column-end: 1;\n}\n\n.grid_17_2 {\n  grid-column-start: 17;\n  grid-column-end: 2;\n}\n\n.grid_17_3 {\n  grid-column-start: 17;\n  grid-column-end: 3;\n}\n\n.grid_17_4 {\n  grid-column-start: 17;\n  grid-column-end: 4;\n}\n\n.grid_17_5 {\n  grid-column-start: 17;\n  grid-column-end: 5;\n}\n\n.grid_17_6 {\n  grid-column-start: 17;\n  grid-column-end: 6;\n}\n\n.grid_17_7 {\n  grid-column-start: 17;\n  grid-column-end: 7;\n}\n\n.grid_17_8 {\n  grid-column-start: 17;\n  grid-column-end: 8;\n}\n\n.grid_17_9 {\n  grid-column-start: 17;\n  grid-column-end: 9;\n}\n\n.grid_17_10 {\n  grid-column-start: 17;\n  grid-column-end: 10;\n}\n\n.grid_17_11 {\n  grid-column-start: 17;\n  grid-column-end: 11;\n}\n\n.grid_17_12 {\n  grid-column-start: 17;\n  grid-column-end: 12;\n}\n\n.grid_17_13 {\n  grid-column-start: 17;\n  grid-column-end: 13;\n}\n\n.grid_17_14 {\n  grid-column-start: 17;\n  grid-column-end: 14;\n}\n\n.grid_17_15 {\n  grid-column-start: 17;\n  grid-column-end: 15;\n}\n\n.grid_17_16 {\n  grid-column-start: 17;\n  grid-column-end: 16;\n}\n\n.grid_17_17 {\n  grid-column-start: 17;\n  grid-column-end: 17;\n}\n\n.grid_17_18 {\n  grid-column-start: 17;\n  grid-column-end: 18;\n}\n\n.grid_17_19 {\n  grid-column-start: 17;\n  grid-column-end: 19;\n}\n\n.grid_17_20 {\n  grid-column-start: 17;\n  grid-column-end: 20;\n}\n\n.grid_17_21 {\n  grid-column-start: 17;\n  grid-column-end: 21;\n}\n\n.grid_17_22 {\n  grid-column-start: 17;\n  grid-column-end: 22;\n}\n\n.grid_17_23 {\n  grid-column-start: 17;\n  grid-column-end: 23;\n}\n\n.grid_17_24 {\n  grid-column-start: 17;\n  grid-column-end: 24;\n}\n\n.grid_18_1 {\n  grid-column-start: 18;\n  grid-column-end: 1;\n}\n\n.grid_18_2 {\n  grid-column-start: 18;\n  grid-column-end: 2;\n}\n\n.grid_18_3 {\n  grid-column-start: 18;\n  grid-column-end: 3;\n}\n\n.grid_18_4 {\n  grid-column-start: 18;\n  grid-column-end: 4;\n}\n\n.grid_18_5 {\n  grid-column-start: 18;\n  grid-column-end: 5;\n}\n\n.grid_18_6 {\n  grid-column-start: 18;\n  grid-column-end: 6;\n}\n\n.grid_18_7 {\n  grid-column-start: 18;\n  grid-column-end: 7;\n}\n\n.grid_18_8 {\n  grid-column-start: 18;\n  grid-column-end: 8;\n}\n\n.grid_18_9 {\n  grid-column-start: 18;\n  grid-column-end: 9;\n}\n\n.grid_18_10 {\n  grid-column-start: 18;\n  grid-column-end: 10;\n}\n\n.grid_18_11 {\n  grid-column-start: 18;\n  grid-column-end: 11;\n}\n\n.grid_18_12 {\n  grid-column-start: 18;\n  grid-column-end: 12;\n}\n\n.grid_18_13 {\n  grid-column-start: 18;\n  grid-column-end: 13;\n}\n\n.grid_18_14 {\n  grid-column-start: 18;\n  grid-column-end: 14;\n}\n\n.grid_18_15 {\n  grid-column-start: 18;\n  grid-column-end: 15;\n}\n\n.grid_18_16 {\n  grid-column-start: 18;\n  grid-column-end: 16;\n}\n\n.grid_18_17 {\n  grid-column-start: 18;\n  grid-column-end: 17;\n}\n\n.grid_18_18 {\n  grid-column-start: 18;\n  grid-column-end: 18;\n}\n\n.grid_18_19 {\n  grid-column-start: 18;\n  grid-column-end: 19;\n}\n\n.grid_18_20 {\n  grid-column-start: 18;\n  grid-column-end: 20;\n}\n\n.grid_18_21 {\n  grid-column-start: 18;\n  grid-column-end: 21;\n}\n\n.grid_18_22 {\n  grid-column-start: 18;\n  grid-column-end: 22;\n}\n\n.grid_18_23 {\n  grid-column-start: 18;\n  grid-column-end: 23;\n}\n\n.grid_18_24 {\n  grid-column-start: 18;\n  grid-column-end: 24;\n}\n\n.grid_19_1 {\n  grid-column-start: 19;\n  grid-column-end: 1;\n}\n\n.grid_19_2 {\n  grid-column-start: 19;\n  grid-column-end: 2;\n}\n\n.grid_19_3 {\n  grid-column-start: 19;\n  grid-column-end: 3;\n}\n\n.grid_19_4 {\n  grid-column-start: 19;\n  grid-column-end: 4;\n}\n\n.grid_19_5 {\n  grid-column-start: 19;\n  grid-column-end: 5;\n}\n\n.grid_19_6 {\n  grid-column-start: 19;\n  grid-column-end: 6;\n}\n\n.grid_19_7 {\n  grid-column-start: 19;\n  grid-column-end: 7;\n}\n\n.grid_19_8 {\n  grid-column-start: 19;\n  grid-column-end: 8;\n}\n\n.grid_19_9 {\n  grid-column-start: 19;\n  grid-column-end: 9;\n}\n\n.grid_19_10 {\n  grid-column-start: 19;\n  grid-column-end: 10;\n}\n\n.grid_19_11 {\n  grid-column-start: 19;\n  grid-column-end: 11;\n}\n\n.grid_19_12 {\n  grid-column-start: 19;\n  grid-column-end: 12;\n}\n\n.grid_19_13 {\n  grid-column-start: 19;\n  grid-column-end: 13;\n}\n\n.grid_19_14 {\n  grid-column-start: 19;\n  grid-column-end: 14;\n}\n\n.grid_19_15 {\n  grid-column-start: 19;\n  grid-column-end: 15;\n}\n\n.grid_19_16 {\n  grid-column-start: 19;\n  grid-column-end: 16;\n}\n\n.grid_19_17 {\n  grid-column-start: 19;\n  grid-column-end: 17;\n}\n\n.grid_19_18 {\n  grid-column-start: 19;\n  grid-column-end: 18;\n}\n\n.grid_19_19 {\n  grid-column-start: 19;\n  grid-column-end: 19;\n}\n\n.grid_19_20 {\n  grid-column-start: 19;\n  grid-column-end: 20;\n}\n\n.grid_19_21 {\n  grid-column-start: 19;\n  grid-column-end: 21;\n}\n\n.grid_19_22 {\n  grid-column-start: 19;\n  grid-column-end: 22;\n}\n\n.grid_19_23 {\n  grid-column-start: 19;\n  grid-column-end: 23;\n}\n\n.grid_19_24 {\n  grid-column-start: 19;\n  grid-column-end: 24;\n}\n\n.grid_20_1 {\n  grid-column-start: 20;\n  grid-column-end: 1;\n}\n\n.grid_20_2 {\n  grid-column-start: 20;\n  grid-column-end: 2;\n}\n\n.grid_20_3 {\n  grid-column-start: 20;\n  grid-column-end: 3;\n}\n\n.grid_20_4 {\n  grid-column-start: 20;\n  grid-column-end: 4;\n}\n\n.grid_20_5 {\n  grid-column-start: 20;\n  grid-column-end: 5;\n}\n\n.grid_20_6 {\n  grid-column-start: 20;\n  grid-column-end: 6;\n}\n\n.grid_20_7 {\n  grid-column-start: 20;\n  grid-column-end: 7;\n}\n\n.grid_20_8 {\n  grid-column-start: 20;\n  grid-column-end: 8;\n}\n\n.grid_20_9 {\n  grid-column-start: 20;\n  grid-column-end: 9;\n}\n\n.grid_20_10 {\n  grid-column-start: 20;\n  grid-column-end: 10;\n}\n\n.grid_20_11 {\n  grid-column-start: 20;\n  grid-column-end: 11;\n}\n\n.grid_20_12 {\n  grid-column-start: 20;\n  grid-column-end: 12;\n}\n\n.grid_20_13 {\n  grid-column-start: 20;\n  grid-column-end: 13;\n}\n\n.grid_20_14 {\n  grid-column-start: 20;\n  grid-column-end: 14;\n}\n\n.grid_20_15 {\n  grid-column-start: 20;\n  grid-column-end: 15;\n}\n\n.grid_20_16 {\n  grid-column-start: 20;\n  grid-column-end: 16;\n}\n\n.grid_20_17 {\n  grid-column-start: 20;\n  grid-column-end: 17;\n}\n\n.grid_20_18 {\n  grid-column-start: 20;\n  grid-column-end: 18;\n}\n\n.grid_20_19 {\n  grid-column-start: 20;\n  grid-column-end: 19;\n}\n\n.grid_20_20 {\n  grid-column-start: 20;\n  grid-column-end: 20;\n}\n\n.grid_20_21 {\n  grid-column-start: 20;\n  grid-column-end: 21;\n}\n\n.grid_20_22 {\n  grid-column-start: 20;\n  grid-column-end: 22;\n}\n\n.grid_20_23 {\n  grid-column-start: 20;\n  grid-column-end: 23;\n}\n\n.grid_20_24 {\n  grid-column-start: 20;\n  grid-column-end: 24;\n}\n\n.grid_21_1 {\n  grid-column-start: 21;\n  grid-column-end: 1;\n}\n\n.grid_21_2 {\n  grid-column-start: 21;\n  grid-column-end: 2;\n}\n\n.grid_21_3 {\n  grid-column-start: 21;\n  grid-column-end: 3;\n}\n\n.grid_21_4 {\n  grid-column-start: 21;\n  grid-column-end: 4;\n}\n\n.grid_21_5 {\n  grid-column-start: 21;\n  grid-column-end: 5;\n}\n\n.grid_21_6 {\n  grid-column-start: 21;\n  grid-column-end: 6;\n}\n\n.grid_21_7 {\n  grid-column-start: 21;\n  grid-column-end: 7;\n}\n\n.grid_21_8 {\n  grid-column-start: 21;\n  grid-column-end: 8;\n}\n\n.grid_21_9 {\n  grid-column-start: 21;\n  grid-column-end: 9;\n}\n\n.grid_21_10 {\n  grid-column-start: 21;\n  grid-column-end: 10;\n}\n\n.grid_21_11 {\n  grid-column-start: 21;\n  grid-column-end: 11;\n}\n\n.grid_21_12 {\n  grid-column-start: 21;\n  grid-column-end: 12;\n}\n\n.grid_21_13 {\n  grid-column-start: 21;\n  grid-column-end: 13;\n}\n\n.grid_21_14 {\n  grid-column-start: 21;\n  grid-column-end: 14;\n}\n\n.grid_21_15 {\n  grid-column-start: 21;\n  grid-column-end: 15;\n}\n\n.grid_21_16 {\n  grid-column-start: 21;\n  grid-column-end: 16;\n}\n\n.grid_21_17 {\n  grid-column-start: 21;\n  grid-column-end: 17;\n}\n\n.grid_21_18 {\n  grid-column-start: 21;\n  grid-column-end: 18;\n}\n\n.grid_21_19 {\n  grid-column-start: 21;\n  grid-column-end: 19;\n}\n\n.grid_21_20 {\n  grid-column-start: 21;\n  grid-column-end: 20;\n}\n\n.grid_21_21 {\n  grid-column-start: 21;\n  grid-column-end: 21;\n}\n\n.grid_21_22 {\n  grid-column-start: 21;\n  grid-column-end: 22;\n}\n\n.grid_21_23 {\n  grid-column-start: 21;\n  grid-column-end: 23;\n}\n\n.grid_21_24 {\n  grid-column-start: 21;\n  grid-column-end: 24;\n}\n\n.grid_22_1 {\n  grid-column-start: 22;\n  grid-column-end: 1;\n}\n\n.grid_22_2 {\n  grid-column-start: 22;\n  grid-column-end: 2;\n}\n\n.grid_22_3 {\n  grid-column-start: 22;\n  grid-column-end: 3;\n}\n\n.grid_22_4 {\n  grid-column-start: 22;\n  grid-column-end: 4;\n}\n\n.grid_22_5 {\n  grid-column-start: 22;\n  grid-column-end: 5;\n}\n\n.grid_22_6 {\n  grid-column-start: 22;\n  grid-column-end: 6;\n}\n\n.grid_22_7 {\n  grid-column-start: 22;\n  grid-column-end: 7;\n}\n\n.grid_22_8 {\n  grid-column-start: 22;\n  grid-column-end: 8;\n}\n\n.grid_22_9 {\n  grid-column-start: 22;\n  grid-column-end: 9;\n}\n\n.grid_22_10 {\n  grid-column-start: 22;\n  grid-column-end: 10;\n}\n\n.grid_22_11 {\n  grid-column-start: 22;\n  grid-column-end: 11;\n}\n\n.grid_22_12 {\n  grid-column-start: 22;\n  grid-column-end: 12;\n}\n\n.grid_22_13 {\n  grid-column-start: 22;\n  grid-column-end: 13;\n}\n\n.grid_22_14 {\n  grid-column-start: 22;\n  grid-column-end: 14;\n}\n\n.grid_22_15 {\n  grid-column-start: 22;\n  grid-column-end: 15;\n}\n\n.grid_22_16 {\n  grid-column-start: 22;\n  grid-column-end: 16;\n}\n\n.grid_22_17 {\n  grid-column-start: 22;\n  grid-column-end: 17;\n}\n\n.grid_22_18 {\n  grid-column-start: 22;\n  grid-column-end: 18;\n}\n\n.grid_22_19 {\n  grid-column-start: 22;\n  grid-column-end: 19;\n}\n\n.grid_22_20 {\n  grid-column-start: 22;\n  grid-column-end: 20;\n}\n\n.grid_22_21 {\n  grid-column-start: 22;\n  grid-column-end: 21;\n}\n\n.grid_22_22 {\n  grid-column-start: 22;\n  grid-column-end: 22;\n}\n\n.grid_22_23 {\n  grid-column-start: 22;\n  grid-column-end: 23;\n}\n\n.grid_22_24 {\n  grid-column-start: 22;\n  grid-column-end: 24;\n}\n\n.grid_23_1 {\n  grid-column-start: 23;\n  grid-column-end: 1;\n}\n\n.grid_23_2 {\n  grid-column-start: 23;\n  grid-column-end: 2;\n}\n\n.grid_23_3 {\n  grid-column-start: 23;\n  grid-column-end: 3;\n}\n\n.grid_23_4 {\n  grid-column-start: 23;\n  grid-column-end: 4;\n}\n\n.grid_23_5 {\n  grid-column-start: 23;\n  grid-column-end: 5;\n}\n\n.grid_23_6 {\n  grid-column-start: 23;\n  grid-column-end: 6;\n}\n\n.grid_23_7 {\n  grid-column-start: 23;\n  grid-column-end: 7;\n}\n\n.grid_23_8 {\n  grid-column-start: 23;\n  grid-column-end: 8;\n}\n\n.grid_23_9 {\n  grid-column-start: 23;\n  grid-column-end: 9;\n}\n\n.grid_23_10 {\n  grid-column-start: 23;\n  grid-column-end: 10;\n}\n\n.grid_23_11 {\n  grid-column-start: 23;\n  grid-column-end: 11;\n}\n\n.grid_23_12 {\n  grid-column-start: 23;\n  grid-column-end: 12;\n}\n\n.grid_23_13 {\n  grid-column-start: 23;\n  grid-column-end: 13;\n}\n\n.grid_23_14 {\n  grid-column-start: 23;\n  grid-column-end: 14;\n}\n\n.grid_23_15 {\n  grid-column-start: 23;\n  grid-column-end: 15;\n}\n\n.grid_23_16 {\n  grid-column-start: 23;\n  grid-column-end: 16;\n}\n\n.grid_23_17 {\n  grid-column-start: 23;\n  grid-column-end: 17;\n}\n\n.grid_23_18 {\n  grid-column-start: 23;\n  grid-column-end: 18;\n}\n\n.grid_23_19 {\n  grid-column-start: 23;\n  grid-column-end: 19;\n}\n\n.grid_23_20 {\n  grid-column-start: 23;\n  grid-column-end: 20;\n}\n\n.grid_23_21 {\n  grid-column-start: 23;\n  grid-column-end: 21;\n}\n\n.grid_23_22 {\n  grid-column-start: 23;\n  grid-column-end: 22;\n}\n\n.grid_23_23 {\n  grid-column-start: 23;\n  grid-column-end: 23;\n}\n\n.grid_23_24 {\n  grid-column-start: 23;\n  grid-column-end: 24;\n}\n\n@media (max-width: 1024px) {\n  .l-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .l-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .l-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .l-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .l-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .l-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .l-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .l-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .l-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .l-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .l-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .l-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .l-grid_1_13 {\n    grid-column-start: 1;\n    grid-column-end: 13;\n  }\n  .l-grid_1_14 {\n    grid-column-start: 1;\n    grid-column-end: 14;\n  }\n  .l-grid_1_15 {\n    grid-column-start: 1;\n    grid-column-end: 15;\n  }\n  .l-grid_1_16 {\n    grid-column-start: 1;\n    grid-column-end: 16;\n  }\n  .l-grid_1_17 {\n    grid-column-start: 1;\n    grid-column-end: 17;\n  }\n  .l-grid_1_18 {\n    grid-column-start: 1;\n    grid-column-end: 18;\n  }\n  .l-grid_1_19 {\n    grid-column-start: 1;\n    grid-column-end: 19;\n  }\n  .l-grid_1_20 {\n    grid-column-start: 1;\n    grid-column-end: 20;\n  }\n  .l-grid_1_21 {\n    grid-column-start: 1;\n    grid-column-end: 21;\n  }\n  .l-grid_1_22 {\n    grid-column-start: 1;\n    grid-column-end: 22;\n  }\n  .l-grid_1_23 {\n    grid-column-start: 1;\n    grid-column-end: 23;\n  }\n  .l-grid_1_24 {\n    grid-column-start: 1;\n    grid-column-end: 24;\n  }\n  .l-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .l-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .l-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .l-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .l-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .l-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .l-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .l-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .l-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .l-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .l-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .l-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .l-grid_2_13 {\n    grid-column-start: 2;\n    grid-column-end: 13;\n  }\n  .l-grid_2_14 {\n    grid-column-start: 2;\n    grid-column-end: 14;\n  }\n  .l-grid_2_15 {\n    grid-column-start: 2;\n    grid-column-end: 15;\n  }\n  .l-grid_2_16 {\n    grid-column-start: 2;\n    grid-column-end: 16;\n  }\n  .l-grid_2_17 {\n    grid-column-start: 2;\n    grid-column-end: 17;\n  }\n  .l-grid_2_18 {\n    grid-column-start: 2;\n    grid-column-end: 18;\n  }\n  .l-grid_2_19 {\n    grid-column-start: 2;\n    grid-column-end: 19;\n  }\n  .l-grid_2_20 {\n    grid-column-start: 2;\n    grid-column-end: 20;\n  }\n  .l-grid_2_21 {\n    grid-column-start: 2;\n    grid-column-end: 21;\n  }\n  .l-grid_2_22 {\n    grid-column-start: 2;\n    grid-column-end: 22;\n  }\n  .l-grid_2_23 {\n    grid-column-start: 2;\n    grid-column-end: 23;\n  }\n  .l-grid_2_24 {\n    grid-column-start: 2;\n    grid-column-end: 24;\n  }\n  .l-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .l-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .l-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .l-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .l-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .l-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .l-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .l-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .l-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .l-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .l-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .l-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .l-grid_3_13 {\n    grid-column-start: 3;\n    grid-column-end: 13;\n  }\n  .l-grid_3_14 {\n    grid-column-start: 3;\n    grid-column-end: 14;\n  }\n  .l-grid_3_15 {\n    grid-column-start: 3;\n    grid-column-end: 15;\n  }\n  .l-grid_3_16 {\n    grid-column-start: 3;\n    grid-column-end: 16;\n  }\n  .l-grid_3_17 {\n    grid-column-start: 3;\n    grid-column-end: 17;\n  }\n  .l-grid_3_18 {\n    grid-column-start: 3;\n    grid-column-end: 18;\n  }\n  .l-grid_3_19 {\n    grid-column-start: 3;\n    grid-column-end: 19;\n  }\n  .l-grid_3_20 {\n    grid-column-start: 3;\n    grid-column-end: 20;\n  }\n  .l-grid_3_21 {\n    grid-column-start: 3;\n    grid-column-end: 21;\n  }\n  .l-grid_3_22 {\n    grid-column-start: 3;\n    grid-column-end: 22;\n  }\n  .l-grid_3_23 {\n    grid-column-start: 3;\n    grid-column-end: 23;\n  }\n  .l-grid_3_24 {\n    grid-column-start: 3;\n    grid-column-end: 24;\n  }\n  .l-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .l-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .l-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .l-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .l-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .l-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .l-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .l-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .l-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .l-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .l-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .l-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .l-grid_4_13 {\n    grid-column-start: 4;\n    grid-column-end: 13;\n  }\n  .l-grid_4_14 {\n    grid-column-start: 4;\n    grid-column-end: 14;\n  }\n  .l-grid_4_15 {\n    grid-column-start: 4;\n    grid-column-end: 15;\n  }\n  .l-grid_4_16 {\n    grid-column-start: 4;\n    grid-column-end: 16;\n  }\n  .l-grid_4_17 {\n    grid-column-start: 4;\n    grid-column-end: 17;\n  }\n  .l-grid_4_18 {\n    grid-column-start: 4;\n    grid-column-end: 18;\n  }\n  .l-grid_4_19 {\n    grid-column-start: 4;\n    grid-column-end: 19;\n  }\n  .l-grid_4_20 {\n    grid-column-start: 4;\n    grid-column-end: 20;\n  }\n  .l-grid_4_21 {\n    grid-column-start: 4;\n    grid-column-end: 21;\n  }\n  .l-grid_4_22 {\n    grid-column-start: 4;\n    grid-column-end: 22;\n  }\n  .l-grid_4_23 {\n    grid-column-start: 4;\n    grid-column-end: 23;\n  }\n  .l-grid_4_24 {\n    grid-column-start: 4;\n    grid-column-end: 24;\n  }\n  .l-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .l-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .l-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .l-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .l-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .l-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .l-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .l-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .l-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .l-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .l-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .l-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .l-grid_5_13 {\n    grid-column-start: 5;\n    grid-column-end: 13;\n  }\n  .l-grid_5_14 {\n    grid-column-start: 5;\n    grid-column-end: 14;\n  }\n  .l-grid_5_15 {\n    grid-column-start: 5;\n    grid-column-end: 15;\n  }\n  .l-grid_5_16 {\n    grid-column-start: 5;\n    grid-column-end: 16;\n  }\n  .l-grid_5_17 {\n    grid-column-start: 5;\n    grid-column-end: 17;\n  }\n  .l-grid_5_18 {\n    grid-column-start: 5;\n    grid-column-end: 18;\n  }\n  .l-grid_5_19 {\n    grid-column-start: 5;\n    grid-column-end: 19;\n  }\n  .l-grid_5_20 {\n    grid-column-start: 5;\n    grid-column-end: 20;\n  }\n  .l-grid_5_21 {\n    grid-column-start: 5;\n    grid-column-end: 21;\n  }\n  .l-grid_5_22 {\n    grid-column-start: 5;\n    grid-column-end: 22;\n  }\n  .l-grid_5_23 {\n    grid-column-start: 5;\n    grid-column-end: 23;\n  }\n  .l-grid_5_24 {\n    grid-column-start: 5;\n    grid-column-end: 24;\n  }\n  .l-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .l-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .l-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .l-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .l-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .l-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .l-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .l-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .l-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .l-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .l-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .l-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .l-grid_6_13 {\n    grid-column-start: 6;\n    grid-column-end: 13;\n  }\n  .l-grid_6_14 {\n    grid-column-start: 6;\n    grid-column-end: 14;\n  }\n  .l-grid_6_15 {\n    grid-column-start: 6;\n    grid-column-end: 15;\n  }\n  .l-grid_6_16 {\n    grid-column-start: 6;\n    grid-column-end: 16;\n  }\n  .l-grid_6_17 {\n    grid-column-start: 6;\n    grid-column-end: 17;\n  }\n  .l-grid_6_18 {\n    grid-column-start: 6;\n    grid-column-end: 18;\n  }\n  .l-grid_6_19 {\n    grid-column-start: 6;\n    grid-column-end: 19;\n  }\n  .l-grid_6_20 {\n    grid-column-start: 6;\n    grid-column-end: 20;\n  }\n  .l-grid_6_21 {\n    grid-column-start: 6;\n    grid-column-end: 21;\n  }\n  .l-grid_6_22 {\n    grid-column-start: 6;\n    grid-column-end: 22;\n  }\n  .l-grid_6_23 {\n    grid-column-start: 6;\n    grid-column-end: 23;\n  }\n  .l-grid_6_24 {\n    grid-column-start: 6;\n    grid-column-end: 24;\n  }\n  .l-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .l-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .l-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .l-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .l-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .l-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .l-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .l-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .l-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .l-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .l-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .l-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .l-grid_7_13 {\n    grid-column-start: 7;\n    grid-column-end: 13;\n  }\n  .l-grid_7_14 {\n    grid-column-start: 7;\n    grid-column-end: 14;\n  }\n  .l-grid_7_15 {\n    grid-column-start: 7;\n    grid-column-end: 15;\n  }\n  .l-grid_7_16 {\n    grid-column-start: 7;\n    grid-column-end: 16;\n  }\n  .l-grid_7_17 {\n    grid-column-start: 7;\n    grid-column-end: 17;\n  }\n  .l-grid_7_18 {\n    grid-column-start: 7;\n    grid-column-end: 18;\n  }\n  .l-grid_7_19 {\n    grid-column-start: 7;\n    grid-column-end: 19;\n  }\n  .l-grid_7_20 {\n    grid-column-start: 7;\n    grid-column-end: 20;\n  }\n  .l-grid_7_21 {\n    grid-column-start: 7;\n    grid-column-end: 21;\n  }\n  .l-grid_7_22 {\n    grid-column-start: 7;\n    grid-column-end: 22;\n  }\n  .l-grid_7_23 {\n    grid-column-start: 7;\n    grid-column-end: 23;\n  }\n  .l-grid_7_24 {\n    grid-column-start: 7;\n    grid-column-end: 24;\n  }\n  .l-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .l-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .l-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .l-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .l-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .l-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .l-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .l-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .l-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .l-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .l-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .l-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .l-grid_8_13 {\n    grid-column-start: 8;\n    grid-column-end: 13;\n  }\n  .l-grid_8_14 {\n    grid-column-start: 8;\n    grid-column-end: 14;\n  }\n  .l-grid_8_15 {\n    grid-column-start: 8;\n    grid-column-end: 15;\n  }\n  .l-grid_8_16 {\n    grid-column-start: 8;\n    grid-column-end: 16;\n  }\n  .l-grid_8_17 {\n    grid-column-start: 8;\n    grid-column-end: 17;\n  }\n  .l-grid_8_18 {\n    grid-column-start: 8;\n    grid-column-end: 18;\n  }\n  .l-grid_8_19 {\n    grid-column-start: 8;\n    grid-column-end: 19;\n  }\n  .l-grid_8_20 {\n    grid-column-start: 8;\n    grid-column-end: 20;\n  }\n  .l-grid_8_21 {\n    grid-column-start: 8;\n    grid-column-end: 21;\n  }\n  .l-grid_8_22 {\n    grid-column-start: 8;\n    grid-column-end: 22;\n  }\n  .l-grid_8_23 {\n    grid-column-start: 8;\n    grid-column-end: 23;\n  }\n  .l-grid_8_24 {\n    grid-column-start: 8;\n    grid-column-end: 24;\n  }\n  .l-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .l-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .l-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .l-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .l-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .l-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .l-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .l-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .l-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .l-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .l-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .l-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .l-grid_9_13 {\n    grid-column-start: 9;\n    grid-column-end: 13;\n  }\n  .l-grid_9_14 {\n    grid-column-start: 9;\n    grid-column-end: 14;\n  }\n  .l-grid_9_15 {\n    grid-column-start: 9;\n    grid-column-end: 15;\n  }\n  .l-grid_9_16 {\n    grid-column-start: 9;\n    grid-column-end: 16;\n  }\n  .l-grid_9_17 {\n    grid-column-start: 9;\n    grid-column-end: 17;\n  }\n  .l-grid_9_18 {\n    grid-column-start: 9;\n    grid-column-end: 18;\n  }\n  .l-grid_9_19 {\n    grid-column-start: 9;\n    grid-column-end: 19;\n  }\n  .l-grid_9_20 {\n    grid-column-start: 9;\n    grid-column-end: 20;\n  }\n  .l-grid_9_21 {\n    grid-column-start: 9;\n    grid-column-end: 21;\n  }\n  .l-grid_9_22 {\n    grid-column-start: 9;\n    grid-column-end: 22;\n  }\n  .l-grid_9_23 {\n    grid-column-start: 9;\n    grid-column-end: 23;\n  }\n  .l-grid_9_24 {\n    grid-column-start: 9;\n    grid-column-end: 24;\n  }\n  .l-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .l-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .l-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .l-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .l-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .l-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .l-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .l-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .l-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .l-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .l-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .l-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .l-grid_10_13 {\n    grid-column-start: 10;\n    grid-column-end: 13;\n  }\n  .l-grid_10_14 {\n    grid-column-start: 10;\n    grid-column-end: 14;\n  }\n  .l-grid_10_15 {\n    grid-column-start: 10;\n    grid-column-end: 15;\n  }\n  .l-grid_10_16 {\n    grid-column-start: 10;\n    grid-column-end: 16;\n  }\n  .l-grid_10_17 {\n    grid-column-start: 10;\n    grid-column-end: 17;\n  }\n  .l-grid_10_18 {\n    grid-column-start: 10;\n    grid-column-end: 18;\n  }\n  .l-grid_10_19 {\n    grid-column-start: 10;\n    grid-column-end: 19;\n  }\n  .l-grid_10_20 {\n    grid-column-start: 10;\n    grid-column-end: 20;\n  }\n  .l-grid_10_21 {\n    grid-column-start: 10;\n    grid-column-end: 21;\n  }\n  .l-grid_10_22 {\n    grid-column-start: 10;\n    grid-column-end: 22;\n  }\n  .l-grid_10_23 {\n    grid-column-start: 10;\n    grid-column-end: 23;\n  }\n  .l-grid_10_24 {\n    grid-column-start: 10;\n    grid-column-end: 24;\n  }\n  .l-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .l-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .l-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .l-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .l-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .l-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .l-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .l-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .l-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .l-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .l-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .l-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n  .l-grid_11_13 {\n    grid-column-start: 11;\n    grid-column-end: 13;\n  }\n  .l-grid_11_14 {\n    grid-column-start: 11;\n    grid-column-end: 14;\n  }\n  .l-grid_11_15 {\n    grid-column-start: 11;\n    grid-column-end: 15;\n  }\n  .l-grid_11_16 {\n    grid-column-start: 11;\n    grid-column-end: 16;\n  }\n  .l-grid_11_17 {\n    grid-column-start: 11;\n    grid-column-end: 17;\n  }\n  .l-grid_11_18 {\n    grid-column-start: 11;\n    grid-column-end: 18;\n  }\n  .l-grid_11_19 {\n    grid-column-start: 11;\n    grid-column-end: 19;\n  }\n  .l-grid_11_20 {\n    grid-column-start: 11;\n    grid-column-end: 20;\n  }\n  .l-grid_11_21 {\n    grid-column-start: 11;\n    grid-column-end: 21;\n  }\n  .l-grid_11_22 {\n    grid-column-start: 11;\n    grid-column-end: 22;\n  }\n  .l-grid_11_23 {\n    grid-column-start: 11;\n    grid-column-end: 23;\n  }\n  .l-grid_11_24 {\n    grid-column-start: 11;\n    grid-column-end: 24;\n  }\n  .l-grid_12_1 {\n    grid-column-start: 12;\n    grid-column-end: 1;\n  }\n  .l-grid_12_2 {\n    grid-column-start: 12;\n    grid-column-end: 2;\n  }\n  .l-grid_12_3 {\n    grid-column-start: 12;\n    grid-column-end: 3;\n  }\n  .l-grid_12_4 {\n    grid-column-start: 12;\n    grid-column-end: 4;\n  }\n  .l-grid_12_5 {\n    grid-column-start: 12;\n    grid-column-end: 5;\n  }\n  .l-grid_12_6 {\n    grid-column-start: 12;\n    grid-column-end: 6;\n  }\n  .l-grid_12_7 {\n    grid-column-start: 12;\n    grid-column-end: 7;\n  }\n  .l-grid_12_8 {\n    grid-column-start: 12;\n    grid-column-end: 8;\n  }\n  .l-grid_12_9 {\n    grid-column-start: 12;\n    grid-column-end: 9;\n  }\n  .l-grid_12_10 {\n    grid-column-start: 12;\n    grid-column-end: 10;\n  }\n  .l-grid_12_11 {\n    grid-column-start: 12;\n    grid-column-end: 11;\n  }\n  .l-grid_12_12 {\n    grid-column-start: 12;\n    grid-column-end: 12;\n  }\n  .l-grid_12_13 {\n    grid-column-start: 12;\n    grid-column-end: 13;\n  }\n  .l-grid_12_14 {\n    grid-column-start: 12;\n    grid-column-end: 14;\n  }\n  .l-grid_12_15 {\n    grid-column-start: 12;\n    grid-column-end: 15;\n  }\n  .l-grid_12_16 {\n    grid-column-start: 12;\n    grid-column-end: 16;\n  }\n  .l-grid_12_17 {\n    grid-column-start: 12;\n    grid-column-end: 17;\n  }\n  .l-grid_12_18 {\n    grid-column-start: 12;\n    grid-column-end: 18;\n  }\n  .l-grid_12_19 {\n    grid-column-start: 12;\n    grid-column-end: 19;\n  }\n  .l-grid_12_20 {\n    grid-column-start: 12;\n    grid-column-end: 20;\n  }\n  .l-grid_12_21 {\n    grid-column-start: 12;\n    grid-column-end: 21;\n  }\n  .l-grid_12_22 {\n    grid-column-start: 12;\n    grid-column-end: 22;\n  }\n  .l-grid_12_23 {\n    grid-column-start: 12;\n    grid-column-end: 23;\n  }\n  .l-grid_12_24 {\n    grid-column-start: 12;\n    grid-column-end: 24;\n  }\n  .l-grid_13_1 {\n    grid-column-start: 13;\n    grid-column-end: 1;\n  }\n  .l-grid_13_2 {\n    grid-column-start: 13;\n    grid-column-end: 2;\n  }\n  .l-grid_13_3 {\n    grid-column-start: 13;\n    grid-column-end: 3;\n  }\n  .l-grid_13_4 {\n    grid-column-start: 13;\n    grid-column-end: 4;\n  }\n  .l-grid_13_5 {\n    grid-column-start: 13;\n    grid-column-end: 5;\n  }\n  .l-grid_13_6 {\n    grid-column-start: 13;\n    grid-column-end: 6;\n  }\n  .l-grid_13_7 {\n    grid-column-start: 13;\n    grid-column-end: 7;\n  }\n  .l-grid_13_8 {\n    grid-column-start: 13;\n    grid-column-end: 8;\n  }\n  .l-grid_13_9 {\n    grid-column-start: 13;\n    grid-column-end: 9;\n  }\n  .l-grid_13_10 {\n    grid-column-start: 13;\n    grid-column-end: 10;\n  }\n  .l-grid_13_11 {\n    grid-column-start: 13;\n    grid-column-end: 11;\n  }\n  .l-grid_13_12 {\n    grid-column-start: 13;\n    grid-column-end: 12;\n  }\n  .l-grid_13_13 {\n    grid-column-start: 13;\n    grid-column-end: 13;\n  }\n  .l-grid_13_14 {\n    grid-column-start: 13;\n    grid-column-end: 14;\n  }\n  .l-grid_13_15 {\n    grid-column-start: 13;\n    grid-column-end: 15;\n  }\n  .l-grid_13_16 {\n    grid-column-start: 13;\n    grid-column-end: 16;\n  }\n  .l-grid_13_17 {\n    grid-column-start: 13;\n    grid-column-end: 17;\n  }\n  .l-grid_13_18 {\n    grid-column-start: 13;\n    grid-column-end: 18;\n  }\n  .l-grid_13_19 {\n    grid-column-start: 13;\n    grid-column-end: 19;\n  }\n  .l-grid_13_20 {\n    grid-column-start: 13;\n    grid-column-end: 20;\n  }\n  .l-grid_13_21 {\n    grid-column-start: 13;\n    grid-column-end: 21;\n  }\n  .l-grid_13_22 {\n    grid-column-start: 13;\n    grid-column-end: 22;\n  }\n  .l-grid_13_23 {\n    grid-column-start: 13;\n    grid-column-end: 23;\n  }\n  .l-grid_13_24 {\n    grid-column-start: 13;\n    grid-column-end: 24;\n  }\n  .l-grid_14_1 {\n    grid-column-start: 14;\n    grid-column-end: 1;\n  }\n  .l-grid_14_2 {\n    grid-column-start: 14;\n    grid-column-end: 2;\n  }\n  .l-grid_14_3 {\n    grid-column-start: 14;\n    grid-column-end: 3;\n  }\n  .l-grid_14_4 {\n    grid-column-start: 14;\n    grid-column-end: 4;\n  }\n  .l-grid_14_5 {\n    grid-column-start: 14;\n    grid-column-end: 5;\n  }\n  .l-grid_14_6 {\n    grid-column-start: 14;\n    grid-column-end: 6;\n  }\n  .l-grid_14_7 {\n    grid-column-start: 14;\n    grid-column-end: 7;\n  }\n  .l-grid_14_8 {\n    grid-column-start: 14;\n    grid-column-end: 8;\n  }\n  .l-grid_14_9 {\n    grid-column-start: 14;\n    grid-column-end: 9;\n  }\n  .l-grid_14_10 {\n    grid-column-start: 14;\n    grid-column-end: 10;\n  }\n  .l-grid_14_11 {\n    grid-column-start: 14;\n    grid-column-end: 11;\n  }\n  .l-grid_14_12 {\n    grid-column-start: 14;\n    grid-column-end: 12;\n  }\n  .l-grid_14_13 {\n    grid-column-start: 14;\n    grid-column-end: 13;\n  }\n  .l-grid_14_14 {\n    grid-column-start: 14;\n    grid-column-end: 14;\n  }\n  .l-grid_14_15 {\n    grid-column-start: 14;\n    grid-column-end: 15;\n  }\n  .l-grid_14_16 {\n    grid-column-start: 14;\n    grid-column-end: 16;\n  }\n  .l-grid_14_17 {\n    grid-column-start: 14;\n    grid-column-end: 17;\n  }\n  .l-grid_14_18 {\n    grid-column-start: 14;\n    grid-column-end: 18;\n  }\n  .l-grid_14_19 {\n    grid-column-start: 14;\n    grid-column-end: 19;\n  }\n  .l-grid_14_20 {\n    grid-column-start: 14;\n    grid-column-end: 20;\n  }\n  .l-grid_14_21 {\n    grid-column-start: 14;\n    grid-column-end: 21;\n  }\n  .l-grid_14_22 {\n    grid-column-start: 14;\n    grid-column-end: 22;\n  }\n  .l-grid_14_23 {\n    grid-column-start: 14;\n    grid-column-end: 23;\n  }\n  .l-grid_14_24 {\n    grid-column-start: 14;\n    grid-column-end: 24;\n  }\n  .l-grid_15_1 {\n    grid-column-start: 15;\n    grid-column-end: 1;\n  }\n  .l-grid_15_2 {\n    grid-column-start: 15;\n    grid-column-end: 2;\n  }\n  .l-grid_15_3 {\n    grid-column-start: 15;\n    grid-column-end: 3;\n  }\n  .l-grid_15_4 {\n    grid-column-start: 15;\n    grid-column-end: 4;\n  }\n  .l-grid_15_5 {\n    grid-column-start: 15;\n    grid-column-end: 5;\n  }\n  .l-grid_15_6 {\n    grid-column-start: 15;\n    grid-column-end: 6;\n  }\n  .l-grid_15_7 {\n    grid-column-start: 15;\n    grid-column-end: 7;\n  }\n  .l-grid_15_8 {\n    grid-column-start: 15;\n    grid-column-end: 8;\n  }\n  .l-grid_15_9 {\n    grid-column-start: 15;\n    grid-column-end: 9;\n  }\n  .l-grid_15_10 {\n    grid-column-start: 15;\n    grid-column-end: 10;\n  }\n  .l-grid_15_11 {\n    grid-column-start: 15;\n    grid-column-end: 11;\n  }\n  .l-grid_15_12 {\n    grid-column-start: 15;\n    grid-column-end: 12;\n  }\n  .l-grid_15_13 {\n    grid-column-start: 15;\n    grid-column-end: 13;\n  }\n  .l-grid_15_14 {\n    grid-column-start: 15;\n    grid-column-end: 14;\n  }\n  .l-grid_15_15 {\n    grid-column-start: 15;\n    grid-column-end: 15;\n  }\n  .l-grid_15_16 {\n    grid-column-start: 15;\n    grid-column-end: 16;\n  }\n  .l-grid_15_17 {\n    grid-column-start: 15;\n    grid-column-end: 17;\n  }\n  .l-grid_15_18 {\n    grid-column-start: 15;\n    grid-column-end: 18;\n  }\n  .l-grid_15_19 {\n    grid-column-start: 15;\n    grid-column-end: 19;\n  }\n  .l-grid_15_20 {\n    grid-column-start: 15;\n    grid-column-end: 20;\n  }\n  .l-grid_15_21 {\n    grid-column-start: 15;\n    grid-column-end: 21;\n  }\n  .l-grid_15_22 {\n    grid-column-start: 15;\n    grid-column-end: 22;\n  }\n  .l-grid_15_23 {\n    grid-column-start: 15;\n    grid-column-end: 23;\n  }\n  .l-grid_15_24 {\n    grid-column-start: 15;\n    grid-column-end: 24;\n  }\n  .l-grid_16_1 {\n    grid-column-start: 16;\n    grid-column-end: 1;\n  }\n  .l-grid_16_2 {\n    grid-column-start: 16;\n    grid-column-end: 2;\n  }\n  .l-grid_16_3 {\n    grid-column-start: 16;\n    grid-column-end: 3;\n  }\n  .l-grid_16_4 {\n    grid-column-start: 16;\n    grid-column-end: 4;\n  }\n  .l-grid_16_5 {\n    grid-column-start: 16;\n    grid-column-end: 5;\n  }\n  .l-grid_16_6 {\n    grid-column-start: 16;\n    grid-column-end: 6;\n  }\n  .l-grid_16_7 {\n    grid-column-start: 16;\n    grid-column-end: 7;\n  }\n  .l-grid_16_8 {\n    grid-column-start: 16;\n    grid-column-end: 8;\n  }\n  .l-grid_16_9 {\n    grid-column-start: 16;\n    grid-column-end: 9;\n  }\n  .l-grid_16_10 {\n    grid-column-start: 16;\n    grid-column-end: 10;\n  }\n  .l-grid_16_11 {\n    grid-column-start: 16;\n    grid-column-end: 11;\n  }\n  .l-grid_16_12 {\n    grid-column-start: 16;\n    grid-column-end: 12;\n  }\n  .l-grid_16_13 {\n    grid-column-start: 16;\n    grid-column-end: 13;\n  }\n  .l-grid_16_14 {\n    grid-column-start: 16;\n    grid-column-end: 14;\n  }\n  .l-grid_16_15 {\n    grid-column-start: 16;\n    grid-column-end: 15;\n  }\n  .l-grid_16_16 {\n    grid-column-start: 16;\n    grid-column-end: 16;\n  }\n  .l-grid_16_17 {\n    grid-column-start: 16;\n    grid-column-end: 17;\n  }\n  .l-grid_16_18 {\n    grid-column-start: 16;\n    grid-column-end: 18;\n  }\n  .l-grid_16_19 {\n    grid-column-start: 16;\n    grid-column-end: 19;\n  }\n  .l-grid_16_20 {\n    grid-column-start: 16;\n    grid-column-end: 20;\n  }\n  .l-grid_16_21 {\n    grid-column-start: 16;\n    grid-column-end: 21;\n  }\n  .l-grid_16_22 {\n    grid-column-start: 16;\n    grid-column-end: 22;\n  }\n  .l-grid_16_23 {\n    grid-column-start: 16;\n    grid-column-end: 23;\n  }\n  .l-grid_16_24 {\n    grid-column-start: 16;\n    grid-column-end: 24;\n  }\n  .l-grid_17_1 {\n    grid-column-start: 17;\n    grid-column-end: 1;\n  }\n  .l-grid_17_2 {\n    grid-column-start: 17;\n    grid-column-end: 2;\n  }\n  .l-grid_17_3 {\n    grid-column-start: 17;\n    grid-column-end: 3;\n  }\n  .l-grid_17_4 {\n    grid-column-start: 17;\n    grid-column-end: 4;\n  }\n  .l-grid_17_5 {\n    grid-column-start: 17;\n    grid-column-end: 5;\n  }\n  .l-grid_17_6 {\n    grid-column-start: 17;\n    grid-column-end: 6;\n  }\n  .l-grid_17_7 {\n    grid-column-start: 17;\n    grid-column-end: 7;\n  }\n  .l-grid_17_8 {\n    grid-column-start: 17;\n    grid-column-end: 8;\n  }\n  .l-grid_17_9 {\n    grid-column-start: 17;\n    grid-column-end: 9;\n  }\n  .l-grid_17_10 {\n    grid-column-start: 17;\n    grid-column-end: 10;\n  }\n  .l-grid_17_11 {\n    grid-column-start: 17;\n    grid-column-end: 11;\n  }\n  .l-grid_17_12 {\n    grid-column-start: 17;\n    grid-column-end: 12;\n  }\n  .l-grid_17_13 {\n    grid-column-start: 17;\n    grid-column-end: 13;\n  }\n  .l-grid_17_14 {\n    grid-column-start: 17;\n    grid-column-end: 14;\n  }\n  .l-grid_17_15 {\n    grid-column-start: 17;\n    grid-column-end: 15;\n  }\n  .l-grid_17_16 {\n    grid-column-start: 17;\n    grid-column-end: 16;\n  }\n  .l-grid_17_17 {\n    grid-column-start: 17;\n    grid-column-end: 17;\n  }\n  .l-grid_17_18 {\n    grid-column-start: 17;\n    grid-column-end: 18;\n  }\n  .l-grid_17_19 {\n    grid-column-start: 17;\n    grid-column-end: 19;\n  }\n  .l-grid_17_20 {\n    grid-column-start: 17;\n    grid-column-end: 20;\n  }\n  .l-grid_17_21 {\n    grid-column-start: 17;\n    grid-column-end: 21;\n  }\n  .l-grid_17_22 {\n    grid-column-start: 17;\n    grid-column-end: 22;\n  }\n  .l-grid_17_23 {\n    grid-column-start: 17;\n    grid-column-end: 23;\n  }\n  .l-grid_17_24 {\n    grid-column-start: 17;\n    grid-column-end: 24;\n  }\n  .l-grid_18_1 {\n    grid-column-start: 18;\n    grid-column-end: 1;\n  }\n  .l-grid_18_2 {\n    grid-column-start: 18;\n    grid-column-end: 2;\n  }\n  .l-grid_18_3 {\n    grid-column-start: 18;\n    grid-column-end: 3;\n  }\n  .l-grid_18_4 {\n    grid-column-start: 18;\n    grid-column-end: 4;\n  }\n  .l-grid_18_5 {\n    grid-column-start: 18;\n    grid-column-end: 5;\n  }\n  .l-grid_18_6 {\n    grid-column-start: 18;\n    grid-column-end: 6;\n  }\n  .l-grid_18_7 {\n    grid-column-start: 18;\n    grid-column-end: 7;\n  }\n  .l-grid_18_8 {\n    grid-column-start: 18;\n    grid-column-end: 8;\n  }\n  .l-grid_18_9 {\n    grid-column-start: 18;\n    grid-column-end: 9;\n  }\n  .l-grid_18_10 {\n    grid-column-start: 18;\n    grid-column-end: 10;\n  }\n  .l-grid_18_11 {\n    grid-column-start: 18;\n    grid-column-end: 11;\n  }\n  .l-grid_18_12 {\n    grid-column-start: 18;\n    grid-column-end: 12;\n  }\n  .l-grid_18_13 {\n    grid-column-start: 18;\n    grid-column-end: 13;\n  }\n  .l-grid_18_14 {\n    grid-column-start: 18;\n    grid-column-end: 14;\n  }\n  .l-grid_18_15 {\n    grid-column-start: 18;\n    grid-column-end: 15;\n  }\n  .l-grid_18_16 {\n    grid-column-start: 18;\n    grid-column-end: 16;\n  }\n  .l-grid_18_17 {\n    grid-column-start: 18;\n    grid-column-end: 17;\n  }\n  .l-grid_18_18 {\n    grid-column-start: 18;\n    grid-column-end: 18;\n  }\n  .l-grid_18_19 {\n    grid-column-start: 18;\n    grid-column-end: 19;\n  }\n  .l-grid_18_20 {\n    grid-column-start: 18;\n    grid-column-end: 20;\n  }\n  .l-grid_18_21 {\n    grid-column-start: 18;\n    grid-column-end: 21;\n  }\n  .l-grid_18_22 {\n    grid-column-start: 18;\n    grid-column-end: 22;\n  }\n  .l-grid_18_23 {\n    grid-column-start: 18;\n    grid-column-end: 23;\n  }\n  .l-grid_18_24 {\n    grid-column-start: 18;\n    grid-column-end: 24;\n  }\n  .l-grid_19_1 {\n    grid-column-start: 19;\n    grid-column-end: 1;\n  }\n  .l-grid_19_2 {\n    grid-column-start: 19;\n    grid-column-end: 2;\n  }\n  .l-grid_19_3 {\n    grid-column-start: 19;\n    grid-column-end: 3;\n  }\n  .l-grid_19_4 {\n    grid-column-start: 19;\n    grid-column-end: 4;\n  }\n  .l-grid_19_5 {\n    grid-column-start: 19;\n    grid-column-end: 5;\n  }\n  .l-grid_19_6 {\n    grid-column-start: 19;\n    grid-column-end: 6;\n  }\n  .l-grid_19_7 {\n    grid-column-start: 19;\n    grid-column-end: 7;\n  }\n  .l-grid_19_8 {\n    grid-column-start: 19;\n    grid-column-end: 8;\n  }\n  .l-grid_19_9 {\n    grid-column-start: 19;\n    grid-column-end: 9;\n  }\n  .l-grid_19_10 {\n    grid-column-start: 19;\n    grid-column-end: 10;\n  }\n  .l-grid_19_11 {\n    grid-column-start: 19;\n    grid-column-end: 11;\n  }\n  .l-grid_19_12 {\n    grid-column-start: 19;\n    grid-column-end: 12;\n  }\n  .l-grid_19_13 {\n    grid-column-start: 19;\n    grid-column-end: 13;\n  }\n  .l-grid_19_14 {\n    grid-column-start: 19;\n    grid-column-end: 14;\n  }\n  .l-grid_19_15 {\n    grid-column-start: 19;\n    grid-column-end: 15;\n  }\n  .l-grid_19_16 {\n    grid-column-start: 19;\n    grid-column-end: 16;\n  }\n  .l-grid_19_17 {\n    grid-column-start: 19;\n    grid-column-end: 17;\n  }\n  .l-grid_19_18 {\n    grid-column-start: 19;\n    grid-column-end: 18;\n  }\n  .l-grid_19_19 {\n    grid-column-start: 19;\n    grid-column-end: 19;\n  }\n  .l-grid_19_20 {\n    grid-column-start: 19;\n    grid-column-end: 20;\n  }\n  .l-grid_19_21 {\n    grid-column-start: 19;\n    grid-column-end: 21;\n  }\n  .l-grid_19_22 {\n    grid-column-start: 19;\n    grid-column-end: 22;\n  }\n  .l-grid_19_23 {\n    grid-column-start: 19;\n    grid-column-end: 23;\n  }\n  .l-grid_19_24 {\n    grid-column-start: 19;\n    grid-column-end: 24;\n  }\n  .l-grid_20_1 {\n    grid-column-start: 20;\n    grid-column-end: 1;\n  }\n  .l-grid_20_2 {\n    grid-column-start: 20;\n    grid-column-end: 2;\n  }\n  .l-grid_20_3 {\n    grid-column-start: 20;\n    grid-column-end: 3;\n  }\n  .l-grid_20_4 {\n    grid-column-start: 20;\n    grid-column-end: 4;\n  }\n  .l-grid_20_5 {\n    grid-column-start: 20;\n    grid-column-end: 5;\n  }\n  .l-grid_20_6 {\n    grid-column-start: 20;\n    grid-column-end: 6;\n  }\n  .l-grid_20_7 {\n    grid-column-start: 20;\n    grid-column-end: 7;\n  }\n  .l-grid_20_8 {\n    grid-column-start: 20;\n    grid-column-end: 8;\n  }\n  .l-grid_20_9 {\n    grid-column-start: 20;\n    grid-column-end: 9;\n  }\n  .l-grid_20_10 {\n    grid-column-start: 20;\n    grid-column-end: 10;\n  }\n  .l-grid_20_11 {\n    grid-column-start: 20;\n    grid-column-end: 11;\n  }\n  .l-grid_20_12 {\n    grid-column-start: 20;\n    grid-column-end: 12;\n  }\n  .l-grid_20_13 {\n    grid-column-start: 20;\n    grid-column-end: 13;\n  }\n  .l-grid_20_14 {\n    grid-column-start: 20;\n    grid-column-end: 14;\n  }\n  .l-grid_20_15 {\n    grid-column-start: 20;\n    grid-column-end: 15;\n  }\n  .l-grid_20_16 {\n    grid-column-start: 20;\n    grid-column-end: 16;\n  }\n  .l-grid_20_17 {\n    grid-column-start: 20;\n    grid-column-end: 17;\n  }\n  .l-grid_20_18 {\n    grid-column-start: 20;\n    grid-column-end: 18;\n  }\n  .l-grid_20_19 {\n    grid-column-start: 20;\n    grid-column-end: 19;\n  }\n  .l-grid_20_20 {\n    grid-column-start: 20;\n    grid-column-end: 20;\n  }\n  .l-grid_20_21 {\n    grid-column-start: 20;\n    grid-column-end: 21;\n  }\n  .l-grid_20_22 {\n    grid-column-start: 20;\n    grid-column-end: 22;\n  }\n  .l-grid_20_23 {\n    grid-column-start: 20;\n    grid-column-end: 23;\n  }\n  .l-grid_20_24 {\n    grid-column-start: 20;\n    grid-column-end: 24;\n  }\n  .l-grid_21_1 {\n    grid-column-start: 21;\n    grid-column-end: 1;\n  }\n  .l-grid_21_2 {\n    grid-column-start: 21;\n    grid-column-end: 2;\n  }\n  .l-grid_21_3 {\n    grid-column-start: 21;\n    grid-column-end: 3;\n  }\n  .l-grid_21_4 {\n    grid-column-start: 21;\n    grid-column-end: 4;\n  }\n  .l-grid_21_5 {\n    grid-column-start: 21;\n    grid-column-end: 5;\n  }\n  .l-grid_21_6 {\n    grid-column-start: 21;\n    grid-column-end: 6;\n  }\n  .l-grid_21_7 {\n    grid-column-start: 21;\n    grid-column-end: 7;\n  }\n  .l-grid_21_8 {\n    grid-column-start: 21;\n    grid-column-end: 8;\n  }\n  .l-grid_21_9 {\n    grid-column-start: 21;\n    grid-column-end: 9;\n  }\n  .l-grid_21_10 {\n    grid-column-start: 21;\n    grid-column-end: 10;\n  }\n  .l-grid_21_11 {\n    grid-column-start: 21;\n    grid-column-end: 11;\n  }\n  .l-grid_21_12 {\n    grid-column-start: 21;\n    grid-column-end: 12;\n  }\n  .l-grid_21_13 {\n    grid-column-start: 21;\n    grid-column-end: 13;\n  }\n  .l-grid_21_14 {\n    grid-column-start: 21;\n    grid-column-end: 14;\n  }\n  .l-grid_21_15 {\n    grid-column-start: 21;\n    grid-column-end: 15;\n  }\n  .l-grid_21_16 {\n    grid-column-start: 21;\n    grid-column-end: 16;\n  }\n  .l-grid_21_17 {\n    grid-column-start: 21;\n    grid-column-end: 17;\n  }\n  .l-grid_21_18 {\n    grid-column-start: 21;\n    grid-column-end: 18;\n  }\n  .l-grid_21_19 {\n    grid-column-start: 21;\n    grid-column-end: 19;\n  }\n  .l-grid_21_20 {\n    grid-column-start: 21;\n    grid-column-end: 20;\n  }\n  .l-grid_21_21 {\n    grid-column-start: 21;\n    grid-column-end: 21;\n  }\n  .l-grid_21_22 {\n    grid-column-start: 21;\n    grid-column-end: 22;\n  }\n  .l-grid_21_23 {\n    grid-column-start: 21;\n    grid-column-end: 23;\n  }\n  .l-grid_21_24 {\n    grid-column-start: 21;\n    grid-column-end: 24;\n  }\n  .l-grid_22_1 {\n    grid-column-start: 22;\n    grid-column-end: 1;\n  }\n  .l-grid_22_2 {\n    grid-column-start: 22;\n    grid-column-end: 2;\n  }\n  .l-grid_22_3 {\n    grid-column-start: 22;\n    grid-column-end: 3;\n  }\n  .l-grid_22_4 {\n    grid-column-start: 22;\n    grid-column-end: 4;\n  }\n  .l-grid_22_5 {\n    grid-column-start: 22;\n    grid-column-end: 5;\n  }\n  .l-grid_22_6 {\n    grid-column-start: 22;\n    grid-column-end: 6;\n  }\n  .l-grid_22_7 {\n    grid-column-start: 22;\n    grid-column-end: 7;\n  }\n  .l-grid_22_8 {\n    grid-column-start: 22;\n    grid-column-end: 8;\n  }\n  .l-grid_22_9 {\n    grid-column-start: 22;\n    grid-column-end: 9;\n  }\n  .l-grid_22_10 {\n    grid-column-start: 22;\n    grid-column-end: 10;\n  }\n  .l-grid_22_11 {\n    grid-column-start: 22;\n    grid-column-end: 11;\n  }\n  .l-grid_22_12 {\n    grid-column-start: 22;\n    grid-column-end: 12;\n  }\n  .l-grid_22_13 {\n    grid-column-start: 22;\n    grid-column-end: 13;\n  }\n  .l-grid_22_14 {\n    grid-column-start: 22;\n    grid-column-end: 14;\n  }\n  .l-grid_22_15 {\n    grid-column-start: 22;\n    grid-column-end: 15;\n  }\n  .l-grid_22_16 {\n    grid-column-start: 22;\n    grid-column-end: 16;\n  }\n  .l-grid_22_17 {\n    grid-column-start: 22;\n    grid-column-end: 17;\n  }\n  .l-grid_22_18 {\n    grid-column-start: 22;\n    grid-column-end: 18;\n  }\n  .l-grid_22_19 {\n    grid-column-start: 22;\n    grid-column-end: 19;\n  }\n  .l-grid_22_20 {\n    grid-column-start: 22;\n    grid-column-end: 20;\n  }\n  .l-grid_22_21 {\n    grid-column-start: 22;\n    grid-column-end: 21;\n  }\n  .l-grid_22_22 {\n    grid-column-start: 22;\n    grid-column-end: 22;\n  }\n  .l-grid_22_23 {\n    grid-column-start: 22;\n    grid-column-end: 23;\n  }\n  .l-grid_22_24 {\n    grid-column-start: 22;\n    grid-column-end: 24;\n  }\n  .l-grid_23_1 {\n    grid-column-start: 23;\n    grid-column-end: 1;\n  }\n  .l-grid_23_2 {\n    grid-column-start: 23;\n    grid-column-end: 2;\n  }\n  .l-grid_23_3 {\n    grid-column-start: 23;\n    grid-column-end: 3;\n  }\n  .l-grid_23_4 {\n    grid-column-start: 23;\n    grid-column-end: 4;\n  }\n  .l-grid_23_5 {\n    grid-column-start: 23;\n    grid-column-end: 5;\n  }\n  .l-grid_23_6 {\n    grid-column-start: 23;\n    grid-column-end: 6;\n  }\n  .l-grid_23_7 {\n    grid-column-start: 23;\n    grid-column-end: 7;\n  }\n  .l-grid_23_8 {\n    grid-column-start: 23;\n    grid-column-end: 8;\n  }\n  .l-grid_23_9 {\n    grid-column-start: 23;\n    grid-column-end: 9;\n  }\n  .l-grid_23_10 {\n    grid-column-start: 23;\n    grid-column-end: 10;\n  }\n  .l-grid_23_11 {\n    grid-column-start: 23;\n    grid-column-end: 11;\n  }\n  .l-grid_23_12 {\n    grid-column-start: 23;\n    grid-column-end: 12;\n  }\n  .l-grid_23_13 {\n    grid-column-start: 23;\n    grid-column-end: 13;\n  }\n  .l-grid_23_14 {\n    grid-column-start: 23;\n    grid-column-end: 14;\n  }\n  .l-grid_23_15 {\n    grid-column-start: 23;\n    grid-column-end: 15;\n  }\n  .l-grid_23_16 {\n    grid-column-start: 23;\n    grid-column-end: 16;\n  }\n  .l-grid_23_17 {\n    grid-column-start: 23;\n    grid-column-end: 17;\n  }\n  .l-grid_23_18 {\n    grid-column-start: 23;\n    grid-column-end: 18;\n  }\n  .l-grid_23_19 {\n    grid-column-start: 23;\n    grid-column-end: 19;\n  }\n  .l-grid_23_20 {\n    grid-column-start: 23;\n    grid-column-end: 20;\n  }\n  .l-grid_23_21 {\n    grid-column-start: 23;\n    grid-column-end: 21;\n  }\n  .l-grid_23_22 {\n    grid-column-start: 23;\n    grid-column-end: 22;\n  }\n  .l-grid_23_23 {\n    grid-column-start: 23;\n    grid-column-end: 23;\n  }\n  .l-grid_23_24 {\n    grid-column-start: 23;\n    grid-column-end: 24;\n  }\n}\n@media (max-width: 768px) {\n  .t-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .t-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .t-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .t-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .t-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .t-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .t-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .t-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .t-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .t-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .t-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .t-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .t-grid_1_13 {\n    grid-column-start: 1;\n    grid-column-end: 13;\n  }\n  .t-grid_1_14 {\n    grid-column-start: 1;\n    grid-column-end: 14;\n  }\n  .t-grid_1_15 {\n    grid-column-start: 1;\n    grid-column-end: 15;\n  }\n  .t-grid_1_16 {\n    grid-column-start: 1;\n    grid-column-end: 16;\n  }\n  .t-grid_1_17 {\n    grid-column-start: 1;\n    grid-column-end: 17;\n  }\n  .t-grid_1_18 {\n    grid-column-start: 1;\n    grid-column-end: 18;\n  }\n  .t-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .t-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .t-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .t-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .t-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .t-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .t-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .t-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .t-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .t-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .t-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .t-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .t-grid_2_13 {\n    grid-column-start: 2;\n    grid-column-end: 13;\n  }\n  .t-grid_2_14 {\n    grid-column-start: 2;\n    grid-column-end: 14;\n  }\n  .t-grid_2_15 {\n    grid-column-start: 2;\n    grid-column-end: 15;\n  }\n  .t-grid_2_16 {\n    grid-column-start: 2;\n    grid-column-end: 16;\n  }\n  .t-grid_2_17 {\n    grid-column-start: 2;\n    grid-column-end: 17;\n  }\n  .t-grid_2_18 {\n    grid-column-start: 2;\n    grid-column-end: 18;\n  }\n  .t-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .t-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .t-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .t-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .t-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .t-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .t-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .t-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .t-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .t-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .t-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .t-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .t-grid_3_13 {\n    grid-column-start: 3;\n    grid-column-end: 13;\n  }\n  .t-grid_3_14 {\n    grid-column-start: 3;\n    grid-column-end: 14;\n  }\n  .t-grid_3_15 {\n    grid-column-start: 3;\n    grid-column-end: 15;\n  }\n  .t-grid_3_16 {\n    grid-column-start: 3;\n    grid-column-end: 16;\n  }\n  .t-grid_3_17 {\n    grid-column-start: 3;\n    grid-column-end: 17;\n  }\n  .t-grid_3_18 {\n    grid-column-start: 3;\n    grid-column-end: 18;\n  }\n  .t-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .t-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .t-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .t-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .t-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .t-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .t-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .t-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .t-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .t-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .t-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .t-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .t-grid_4_13 {\n    grid-column-start: 4;\n    grid-column-end: 13;\n  }\n  .t-grid_4_14 {\n    grid-column-start: 4;\n    grid-column-end: 14;\n  }\n  .t-grid_4_15 {\n    grid-column-start: 4;\n    grid-column-end: 15;\n  }\n  .t-grid_4_16 {\n    grid-column-start: 4;\n    grid-column-end: 16;\n  }\n  .t-grid_4_17 {\n    grid-column-start: 4;\n    grid-column-end: 17;\n  }\n  .t-grid_4_18 {\n    grid-column-start: 4;\n    grid-column-end: 18;\n  }\n  .t-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .t-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .t-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .t-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .t-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .t-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .t-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .t-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .t-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .t-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .t-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .t-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .t-grid_5_13 {\n    grid-column-start: 5;\n    grid-column-end: 13;\n  }\n  .t-grid_5_14 {\n    grid-column-start: 5;\n    grid-column-end: 14;\n  }\n  .t-grid_5_15 {\n    grid-column-start: 5;\n    grid-column-end: 15;\n  }\n  .t-grid_5_16 {\n    grid-column-start: 5;\n    grid-column-end: 16;\n  }\n  .t-grid_5_17 {\n    grid-column-start: 5;\n    grid-column-end: 17;\n  }\n  .t-grid_5_18 {\n    grid-column-start: 5;\n    grid-column-end: 18;\n  }\n  .t-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .t-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .t-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .t-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .t-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .t-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .t-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .t-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .t-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .t-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .t-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .t-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .t-grid_6_13 {\n    grid-column-start: 6;\n    grid-column-end: 13;\n  }\n  .t-grid_6_14 {\n    grid-column-start: 6;\n    grid-column-end: 14;\n  }\n  .t-grid_6_15 {\n    grid-column-start: 6;\n    grid-column-end: 15;\n  }\n  .t-grid_6_16 {\n    grid-column-start: 6;\n    grid-column-end: 16;\n  }\n  .t-grid_6_17 {\n    grid-column-start: 6;\n    grid-column-end: 17;\n  }\n  .t-grid_6_18 {\n    grid-column-start: 6;\n    grid-column-end: 18;\n  }\n  .t-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .t-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .t-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .t-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .t-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .t-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .t-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .t-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .t-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .t-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .t-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .t-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .t-grid_7_13 {\n    grid-column-start: 7;\n    grid-column-end: 13;\n  }\n  .t-grid_7_14 {\n    grid-column-start: 7;\n    grid-column-end: 14;\n  }\n  .t-grid_7_15 {\n    grid-column-start: 7;\n    grid-column-end: 15;\n  }\n  .t-grid_7_16 {\n    grid-column-start: 7;\n    grid-column-end: 16;\n  }\n  .t-grid_7_17 {\n    grid-column-start: 7;\n    grid-column-end: 17;\n  }\n  .t-grid_7_18 {\n    grid-column-start: 7;\n    grid-column-end: 18;\n  }\n  .t-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .t-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .t-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .t-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .t-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .t-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .t-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .t-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .t-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .t-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .t-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .t-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .t-grid_8_13 {\n    grid-column-start: 8;\n    grid-column-end: 13;\n  }\n  .t-grid_8_14 {\n    grid-column-start: 8;\n    grid-column-end: 14;\n  }\n  .t-grid_8_15 {\n    grid-column-start: 8;\n    grid-column-end: 15;\n  }\n  .t-grid_8_16 {\n    grid-column-start: 8;\n    grid-column-end: 16;\n  }\n  .t-grid_8_17 {\n    grid-column-start: 8;\n    grid-column-end: 17;\n  }\n  .t-grid_8_18 {\n    grid-column-start: 8;\n    grid-column-end: 18;\n  }\n  .t-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .t-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .t-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .t-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .t-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .t-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .t-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .t-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .t-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .t-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .t-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .t-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .t-grid_9_13 {\n    grid-column-start: 9;\n    grid-column-end: 13;\n  }\n  .t-grid_9_14 {\n    grid-column-start: 9;\n    grid-column-end: 14;\n  }\n  .t-grid_9_15 {\n    grid-column-start: 9;\n    grid-column-end: 15;\n  }\n  .t-grid_9_16 {\n    grid-column-start: 9;\n    grid-column-end: 16;\n  }\n  .t-grid_9_17 {\n    grid-column-start: 9;\n    grid-column-end: 17;\n  }\n  .t-grid_9_18 {\n    grid-column-start: 9;\n    grid-column-end: 18;\n  }\n  .t-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .t-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .t-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .t-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .t-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .t-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .t-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .t-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .t-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .t-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .t-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .t-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .t-grid_10_13 {\n    grid-column-start: 10;\n    grid-column-end: 13;\n  }\n  .t-grid_10_14 {\n    grid-column-start: 10;\n    grid-column-end: 14;\n  }\n  .t-grid_10_15 {\n    grid-column-start: 10;\n    grid-column-end: 15;\n  }\n  .t-grid_10_16 {\n    grid-column-start: 10;\n    grid-column-end: 16;\n  }\n  .t-grid_10_17 {\n    grid-column-start: 10;\n    grid-column-end: 17;\n  }\n  .t-grid_10_18 {\n    grid-column-start: 10;\n    grid-column-end: 18;\n  }\n  .t-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .t-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .t-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .t-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .t-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .t-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .t-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .t-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .t-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .t-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .t-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .t-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n  .t-grid_11_13 {\n    grid-column-start: 11;\n    grid-column-end: 13;\n  }\n  .t-grid_11_14 {\n    grid-column-start: 11;\n    grid-column-end: 14;\n  }\n  .t-grid_11_15 {\n    grid-column-start: 11;\n    grid-column-end: 15;\n  }\n  .t-grid_11_16 {\n    grid-column-start: 11;\n    grid-column-end: 16;\n  }\n  .t-grid_11_17 {\n    grid-column-start: 11;\n    grid-column-end: 17;\n  }\n  .t-grid_11_18 {\n    grid-column-start: 11;\n    grid-column-end: 18;\n  }\n  .t-grid_12_1 {\n    grid-column-start: 12;\n    grid-column-end: 1;\n  }\n  .t-grid_12_2 {\n    grid-column-start: 12;\n    grid-column-end: 2;\n  }\n  .t-grid_12_3 {\n    grid-column-start: 12;\n    grid-column-end: 3;\n  }\n  .t-grid_12_4 {\n    grid-column-start: 12;\n    grid-column-end: 4;\n  }\n  .t-grid_12_5 {\n    grid-column-start: 12;\n    grid-column-end: 5;\n  }\n  .t-grid_12_6 {\n    grid-column-start: 12;\n    grid-column-end: 6;\n  }\n  .t-grid_12_7 {\n    grid-column-start: 12;\n    grid-column-end: 7;\n  }\n  .t-grid_12_8 {\n    grid-column-start: 12;\n    grid-column-end: 8;\n  }\n  .t-grid_12_9 {\n    grid-column-start: 12;\n    grid-column-end: 9;\n  }\n  .t-grid_12_10 {\n    grid-column-start: 12;\n    grid-column-end: 10;\n  }\n  .t-grid_12_11 {\n    grid-column-start: 12;\n    grid-column-end: 11;\n  }\n  .t-grid_12_12 {\n    grid-column-start: 12;\n    grid-column-end: 12;\n  }\n  .t-grid_12_13 {\n    grid-column-start: 12;\n    grid-column-end: 13;\n  }\n  .t-grid_12_14 {\n    grid-column-start: 12;\n    grid-column-end: 14;\n  }\n  .t-grid_12_15 {\n    grid-column-start: 12;\n    grid-column-end: 15;\n  }\n  .t-grid_12_16 {\n    grid-column-start: 12;\n    grid-column-end: 16;\n  }\n  .t-grid_12_17 {\n    grid-column-start: 12;\n    grid-column-end: 17;\n  }\n  .t-grid_12_18 {\n    grid-column-start: 12;\n    grid-column-end: 18;\n  }\n  .t-grid_13_1 {\n    grid-column-start: 13;\n    grid-column-end: 1;\n  }\n  .t-grid_13_2 {\n    grid-column-start: 13;\n    grid-column-end: 2;\n  }\n  .t-grid_13_3 {\n    grid-column-start: 13;\n    grid-column-end: 3;\n  }\n  .t-grid_13_4 {\n    grid-column-start: 13;\n    grid-column-end: 4;\n  }\n  .t-grid_13_5 {\n    grid-column-start: 13;\n    grid-column-end: 5;\n  }\n  .t-grid_13_6 {\n    grid-column-start: 13;\n    grid-column-end: 6;\n  }\n  .t-grid_13_7 {\n    grid-column-start: 13;\n    grid-column-end: 7;\n  }\n  .t-grid_13_8 {\n    grid-column-start: 13;\n    grid-column-end: 8;\n  }\n  .t-grid_13_9 {\n    grid-column-start: 13;\n    grid-column-end: 9;\n  }\n  .t-grid_13_10 {\n    grid-column-start: 13;\n    grid-column-end: 10;\n  }\n  .t-grid_13_11 {\n    grid-column-start: 13;\n    grid-column-end: 11;\n  }\n  .t-grid_13_12 {\n    grid-column-start: 13;\n    grid-column-end: 12;\n  }\n  .t-grid_13_13 {\n    grid-column-start: 13;\n    grid-column-end: 13;\n  }\n  .t-grid_13_14 {\n    grid-column-start: 13;\n    grid-column-end: 14;\n  }\n  .t-grid_13_15 {\n    grid-column-start: 13;\n    grid-column-end: 15;\n  }\n  .t-grid_13_16 {\n    grid-column-start: 13;\n    grid-column-end: 16;\n  }\n  .t-grid_13_17 {\n    grid-column-start: 13;\n    grid-column-end: 17;\n  }\n  .t-grid_13_18 {\n    grid-column-start: 13;\n    grid-column-end: 18;\n  }\n  .t-grid_14_1 {\n    grid-column-start: 14;\n    grid-column-end: 1;\n  }\n  .t-grid_14_2 {\n    grid-column-start: 14;\n    grid-column-end: 2;\n  }\n  .t-grid_14_3 {\n    grid-column-start: 14;\n    grid-column-end: 3;\n  }\n  .t-grid_14_4 {\n    grid-column-start: 14;\n    grid-column-end: 4;\n  }\n  .t-grid_14_5 {\n    grid-column-start: 14;\n    grid-column-end: 5;\n  }\n  .t-grid_14_6 {\n    grid-column-start: 14;\n    grid-column-end: 6;\n  }\n  .t-grid_14_7 {\n    grid-column-start: 14;\n    grid-column-end: 7;\n  }\n  .t-grid_14_8 {\n    grid-column-start: 14;\n    grid-column-end: 8;\n  }\n  .t-grid_14_9 {\n    grid-column-start: 14;\n    grid-column-end: 9;\n  }\n  .t-grid_14_10 {\n    grid-column-start: 14;\n    grid-column-end: 10;\n  }\n  .t-grid_14_11 {\n    grid-column-start: 14;\n    grid-column-end: 11;\n  }\n  .t-grid_14_12 {\n    grid-column-start: 14;\n    grid-column-end: 12;\n  }\n  .t-grid_14_13 {\n    grid-column-start: 14;\n    grid-column-end: 13;\n  }\n  .t-grid_14_14 {\n    grid-column-start: 14;\n    grid-column-end: 14;\n  }\n  .t-grid_14_15 {\n    grid-column-start: 14;\n    grid-column-end: 15;\n  }\n  .t-grid_14_16 {\n    grid-column-start: 14;\n    grid-column-end: 16;\n  }\n  .t-grid_14_17 {\n    grid-column-start: 14;\n    grid-column-end: 17;\n  }\n  .t-grid_14_18 {\n    grid-column-start: 14;\n    grid-column-end: 18;\n  }\n  .t-grid_15_1 {\n    grid-column-start: 15;\n    grid-column-end: 1;\n  }\n  .t-grid_15_2 {\n    grid-column-start: 15;\n    grid-column-end: 2;\n  }\n  .t-grid_15_3 {\n    grid-column-start: 15;\n    grid-column-end: 3;\n  }\n  .t-grid_15_4 {\n    grid-column-start: 15;\n    grid-column-end: 4;\n  }\n  .t-grid_15_5 {\n    grid-column-start: 15;\n    grid-column-end: 5;\n  }\n  .t-grid_15_6 {\n    grid-column-start: 15;\n    grid-column-end: 6;\n  }\n  .t-grid_15_7 {\n    grid-column-start: 15;\n    grid-column-end: 7;\n  }\n  .t-grid_15_8 {\n    grid-column-start: 15;\n    grid-column-end: 8;\n  }\n  .t-grid_15_9 {\n    grid-column-start: 15;\n    grid-column-end: 9;\n  }\n  .t-grid_15_10 {\n    grid-column-start: 15;\n    grid-column-end: 10;\n  }\n  .t-grid_15_11 {\n    grid-column-start: 15;\n    grid-column-end: 11;\n  }\n  .t-grid_15_12 {\n    grid-column-start: 15;\n    grid-column-end: 12;\n  }\n  .t-grid_15_13 {\n    grid-column-start: 15;\n    grid-column-end: 13;\n  }\n  .t-grid_15_14 {\n    grid-column-start: 15;\n    grid-column-end: 14;\n  }\n  .t-grid_15_15 {\n    grid-column-start: 15;\n    grid-column-end: 15;\n  }\n  .t-grid_15_16 {\n    grid-column-start: 15;\n    grid-column-end: 16;\n  }\n  .t-grid_15_17 {\n    grid-column-start: 15;\n    grid-column-end: 17;\n  }\n  .t-grid_15_18 {\n    grid-column-start: 15;\n    grid-column-end: 18;\n  }\n  .t-grid_16_1 {\n    grid-column-start: 16;\n    grid-column-end: 1;\n  }\n  .t-grid_16_2 {\n    grid-column-start: 16;\n    grid-column-end: 2;\n  }\n  .t-grid_16_3 {\n    grid-column-start: 16;\n    grid-column-end: 3;\n  }\n  .t-grid_16_4 {\n    grid-column-start: 16;\n    grid-column-end: 4;\n  }\n  .t-grid_16_5 {\n    grid-column-start: 16;\n    grid-column-end: 5;\n  }\n  .t-grid_16_6 {\n    grid-column-start: 16;\n    grid-column-end: 6;\n  }\n  .t-grid_16_7 {\n    grid-column-start: 16;\n    grid-column-end: 7;\n  }\n  .t-grid_16_8 {\n    grid-column-start: 16;\n    grid-column-end: 8;\n  }\n  .t-grid_16_9 {\n    grid-column-start: 16;\n    grid-column-end: 9;\n  }\n  .t-grid_16_10 {\n    grid-column-start: 16;\n    grid-column-end: 10;\n  }\n  .t-grid_16_11 {\n    grid-column-start: 16;\n    grid-column-end: 11;\n  }\n  .t-grid_16_12 {\n    grid-column-start: 16;\n    grid-column-end: 12;\n  }\n  .t-grid_16_13 {\n    grid-column-start: 16;\n    grid-column-end: 13;\n  }\n  .t-grid_16_14 {\n    grid-column-start: 16;\n    grid-column-end: 14;\n  }\n  .t-grid_16_15 {\n    grid-column-start: 16;\n    grid-column-end: 15;\n  }\n  .t-grid_16_16 {\n    grid-column-start: 16;\n    grid-column-end: 16;\n  }\n  .t-grid_16_17 {\n    grid-column-start: 16;\n    grid-column-end: 17;\n  }\n  .t-grid_16_18 {\n    grid-column-start: 16;\n    grid-column-end: 18;\n  }\n  .t-grid_17_1 {\n    grid-column-start: 17;\n    grid-column-end: 1;\n  }\n  .t-grid_17_2 {\n    grid-column-start: 17;\n    grid-column-end: 2;\n  }\n  .t-grid_17_3 {\n    grid-column-start: 17;\n    grid-column-end: 3;\n  }\n  .t-grid_17_4 {\n    grid-column-start: 17;\n    grid-column-end: 4;\n  }\n  .t-grid_17_5 {\n    grid-column-start: 17;\n    grid-column-end: 5;\n  }\n  .t-grid_17_6 {\n    grid-column-start: 17;\n    grid-column-end: 6;\n  }\n  .t-grid_17_7 {\n    grid-column-start: 17;\n    grid-column-end: 7;\n  }\n  .t-grid_17_8 {\n    grid-column-start: 17;\n    grid-column-end: 8;\n  }\n  .t-grid_17_9 {\n    grid-column-start: 17;\n    grid-column-end: 9;\n  }\n  .t-grid_17_10 {\n    grid-column-start: 17;\n    grid-column-end: 10;\n  }\n  .t-grid_17_11 {\n    grid-column-start: 17;\n    grid-column-end: 11;\n  }\n  .t-grid_17_12 {\n    grid-column-start: 17;\n    grid-column-end: 12;\n  }\n  .t-grid_17_13 {\n    grid-column-start: 17;\n    grid-column-end: 13;\n  }\n  .t-grid_17_14 {\n    grid-column-start: 17;\n    grid-column-end: 14;\n  }\n  .t-grid_17_15 {\n    grid-column-start: 17;\n    grid-column-end: 15;\n  }\n  .t-grid_17_16 {\n    grid-column-start: 17;\n    grid-column-end: 16;\n  }\n  .t-grid_17_17 {\n    grid-column-start: 17;\n    grid-column-end: 17;\n  }\n  .t-grid_17_18 {\n    grid-column-start: 17;\n    grid-column-end: 18;\n  }\n}\n@media (max-width: 492px) {\n  .t-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .t-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .t-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .t-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .t-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .t-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .t-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .t-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .t-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .t-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .t-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .t-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .t-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .t-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .t-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .t-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .t-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .t-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .t-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .t-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .t-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .t-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .t-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .t-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .t-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .t-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .t-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .t-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .t-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .t-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .t-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .t-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .t-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .t-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .t-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .t-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .t-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .t-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .t-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .t-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .t-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .t-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .t-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .t-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .t-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .t-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .t-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .t-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .t-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .t-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .t-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .t-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .t-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .t-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .t-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .t-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .t-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .t-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .t-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .t-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .t-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .t-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .t-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .t-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .t-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .t-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .t-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .t-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .t-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .t-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .t-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .t-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .t-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .t-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .t-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .t-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .t-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .t-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .t-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .t-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .t-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .t-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .t-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .t-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .t-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .t-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .t-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .t-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .t-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .t-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .t-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .t-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .t-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .t-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .t-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .t-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .t-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .t-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .t-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .t-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .t-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .t-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .t-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .t-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .t-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .t-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .t-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .t-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .t-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .t-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .t-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .t-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .t-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .t-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .t-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .t-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .t-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .t-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .t-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .t-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .t-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .t-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .t-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .t-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .t-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .t-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .t-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .t-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .t-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .t-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .t-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .t-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n}\n.flex-sym {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n\nhtml,\nbody {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  overflow: hidden;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: \"neue_machinalight\", sans-serif;\n  max-width: 100%;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.container {\n  position: relative;\n  width: 100%;\n  padding: 0px 2vw;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n}\n\nsvg {\n  fill: currentColor;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (max-width: 768px) {\n  .only-desktop {\n    display: none;\n  }\n}\n\n.only-tablet {\n  display: none;\n}\n@media (max-width: 768px) {\n  .only-tablet {\n    display: block;\n  }\n}\n@media (max-width: 492px) {\n  .only-tablet {\n    display: none;\n  }\n}\n\n@media (min-width: 769px) {\n  .only-mobile {\n    display: none;\n  }\n}\n\n.color--red {\n  color: #FF4409;\n}\n\n.font--tag, .font--true {\n  font-family: \"true_blueregular\";\n  font-weight: 100;\n}\n.font--neue {\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.font--title {\n  font-style: normal;\n  font-family: \"Noctis\", serif;\n}\n.font--up {\n  text-transform: uppercase;\n}\n\nimg {\n  max-width: 100%;\n  max-height: 100%;\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n\nbody.home {\n  background: #000000;\n}\n\n.curtain {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999;\n  background: #000000;\n  overflow: hidden;\n}\n\n.footer {\n  background: #ffffff;\n}\n.footer_top {\n  padding: 6.25rem 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.footer_nav {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 2rem 0;\n  border-top: 1px solid black;\n}\n.footer_copyright {\n  font-size: 0.9375rem;\n  color: black;\n  opacity: 0.8;\n}\n.footer_menu ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  align-items: center;\n}\n.footer_menu ul li:not(:last-child) {\n  margin-right: 0.625rem;\n}\n.footer_menu ul a {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 0.9375rem;\n  line-height: 1.625rem;\n  color: black;\n  text-decoration: none;\n}\n\n.header {\n  position: relative;\n  background: #ffffff;\n  z-index: 4;\n}\n.header_logo {\n  padding: 0;\n  height: 100%;\n  display: block;\n}\n@media (max-width: 1024px) {\n  .header_logo {\n    width: 140px;\n    height: auto;\n  }\n}\n.header_wrap {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 5vw;\n}\n@media (min-width: 1280px) {\n  .header_wrap {\n    padding: 2vh 5vw;\n  }\n}\n.header_tagline {\n  font-size: 40px;\n  transform: translateX(-20px) rotate(3deg);\n  line-height: 1.2;\n  font-weight: 400;\n  font-family: \"true_blueregular\";\n  padding-top: 20px;\n  margin: 0;\n}\n@media (min-width: 1280px) {\n  .header_tagline {\n    font-size: 3vw;\n  }\n}\n.header .corner-left {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  transform: translateY(30px);\n  z-index: 999999;\n}\n.header .corner-right {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  transform: translateY(30px) scaleX(-1);\n  z-index: 999999;\n}\n\n.banner {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10vh 0;\n  background: black;\n  text-align: center;\n}\n@media (min-width: 1024px) {\n  .banner {\n    min-height: 100vh;\n  }\n}\n.banner_bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n}\n.banner_bg--empty, .banner_bg--red {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: scaleY(1.4);\n}\n.banner_bg--empty {\n  clip: rect(auto auto 100vh auto);\n}\n.banner_bg--bottom, .banner_bg--top {\n  position: absolute;\n  z-index: 1;\n  height: 14vh;\n  width: 100%;\n  background: #000000;\n}\n.banner_bg--top {\n  top: 0;\n  transform-origin: top;\n}\n.banner_bg--bottom {\n  bottom: 0;\n  transform-origin: bottom;\n}\n.banner h1 {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  font-size: 35px;\n  line-height: 1;\n  letter-spacing: -0.04375rem;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 300;\n  text-transform: uppercase;\n  width: 40vw;\n  margin: 0px auto;\n  color: white;\n}\n@media (min-width: 1024px) {\n  .banner h1 {\n    font-size: 4.5vw;\n  }\n}\n.banner h1 div {\n  font-weight: 400;\n  display: inline-block;\n}\n\n.newsletter {\n  position: relative;\n  padding: 6.25rem 0;\n  background: black;\n  color: white;\n  overflow: hidden;\n}\n.newsletter_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.6;\n}\n.newsletter_bkg:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(180deg, #000000 26.56%, rgba(0, 0, 0, 0) 100%);\n  transform: rotate(-180deg);\n  z-index: 0;\n}\n.newsletter_bkg > div {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n.newsletter .container {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.newsletter_title {\n  max-width: 50vw;\n  margin-bottom: 6.25rem;\n  font-size: 3.5vw;\n  font-weight: 400;\n  line-height: 1.2;\n  text-transform: uppercase;\n  font-family: \"neue_machinalight\", sans-serif;\n  color: white;\n  text-align: center;\n}\n.newsletter_tag {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 0.7vw;\n  letter-spacing: 0.7em;\n  text-transform: uppercase;\n  margin-bottom: 2rem;\n  text-align: center;\n}\n.newsletter_form {\n  position: relative;\n  width: 100%;\n  max-width: 37.5rem;\n}\n.newsletter_form input[type=email],\n.newsletter_form input[type=text] {\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid white;\n  color: white;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 1.25rem;\n  line-height: 1;\n  height: 3.125rem;\n  width: 100%;\n}\n.newsletter_form button[type=submit] {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  background: transparent;\n  border: 0;\n  transform: translateY(-50%);\n}\n\n.intro {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: black;\n  max-width: 100%;\n  overflow: hidden;\n  padding: 10vw 0 5vw;\n  z-index: 3;\n}\n.intro_text {\n  position: relative;\n  z-index: 2;\n  font-size: 35px;\n  line-height: 1;\n  text-transform: uppercase;\n  font-family: \"neue_machinalight\", sans-serif;\n  color: white;\n  margin: 0;\n  margin-left: 5vw;\n  max-width: 90vw;\n}\n@media (min-width: 1024px) {\n  .intro_text {\n    font-size: 4.6vw;\n    margin-left: 40vw;\n    max-width: 42vw;\n  }\n}\n.intro_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(-10vw, -16vw);\n  z-index: 0;\n  height: auto;\n  width: 65vw;\n}\n\n.story {\n  position: relative;\n  background: black;\n  padding: 4vw 0 8vw;\n  color: white;\n  z-index: 1;\n  overflow: visible;\n}\n.story h2 {\n  position: relative;\n  font-size: 26px;\n  line-height: 1.2;\n  font-family: \"Noctis\", serif;\n  padding-left: 3vw;\n  z-index: 2;\n  font-weight: 400;\n  margin-left: 5vw;\n  max-width: 90vw;\n}\n.story h2:before {\n  content: none;\n}\n@media (min-width: 1280px) {\n  .story h2 {\n    font-size: 2.5vw;\n    margin-left: 40vw;\n    max-width: 28vw;\n  }\n}\n.story h2 .line {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 100%;\n  background: white;\n}\n.story_description {\n  font-size: 22px;\n  line-height: 1.5;\n  font-family: \"Noctis\", serif;\n  margin: 0;\n}\n@media (min-width: 1024px) {\n  .story_description {\n    font-size: 1.4vw;\n  }\n}\n.story_tag {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: bold;\n  font-size: 14px;\n  letter-spacing: 0.7em;\n  text-transform: uppercase;\n  margin: 0;\n  text-align: center;\n}\n@media (min-width: 1024px) {\n  .story_tag {\n    font-size: 0.6vw;\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: right top;\n    transform: translateX(-100%) rotate(-90deg) translateY(-5vw) translateX(-0.5vw);\n    text-align: left;\n  }\n}\n.story_content {\n  position: relative;\n  width: 100%;\n  max-width: 90vw;\n  margin: 0px auto;\n  margin-top: 5vw;\n  z-index: 2;\n}\n@media (min-width: 1024px) {\n  .story_content {\n    max-width: 50vw;\n  }\n}\n.story_bkg {\n  position: absolute;\n  top: 0%;\n  left: 35%;\n  transform: translateY(-30%);\n  z-index: 0;\n  width: 60vw;\n  height: auto;\n  max-width: none;\n  max-height: none;\n  height: auto;\n  -o-object-fit: none;\n     object-fit: none;\n  z-index: -1;\n}\n\n.heritage {\n  padding: 12vw 0;\n  overflow: hidden;\n  background: #ffffff;\n}\n.heritage_grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n.heritage_tag {\n  color: #FF4409;\n  font-size: 4.5vw;\n  line-height: 2.625rem;\n  margin-bottom: 0rem;\n  margin-top: 0;\n  transform: rotate(-4deg);\n  font-weight: 100;\n}\n.heritage_content {\n  margin: 0px auto;\n  max-width: 24vw;\n  text-align: center;\n}\n.heritage_content h2 {\n  font-size: 4vw;\n  line-height: 1;\n  margin-bottom: 2.5rem;\n  font-family: \"Noctis\", serif;\n  font-weight: 500;\n}\n.heritage_content .content p {\n  line-height: 1.5;\n  font-size: 0.8vw;\n  font-weight: 400;\n}\n.heritage_diapo {\n  position: relative;\n  width: 100%;\n  padding-top: 10vw;\n  padding-bottom: 8vw;\n}\n.heritage_diapo_1 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(-2vw, -4vw);\n  width: 15vw;\n}\n.heritage_diapo_2 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(3vw, 100%);\n  width: 25vw;\n}\n.heritage_diapo_3 {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate(15vw, -50%);\n  width: 36vw;\n  z-index: 0;\n}\n.heritage_diapo_4 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(26vw, -8vw);\n  width: 18vw;\n}\n\n.vision {\n  position: relative;\n  background: transparent;\n  color: white;\n  padding: 10vw 0 20vw;\n  display: flex;\n  align-items: center;\n}\n@media (min-width: 1440px) {\n  .vision {\n    padding: 10vw 0 10vw;\n  }\n}\n.vision_text {\n  position: relative;\n  margin-top: 2vw;\n}\n.vision_text .line {\n  position: absolute;\n  top: 0.7vw;\n  left: -100px;\n  width: 3.625rem;\n  height: 1px;\n  background: white;\n}\n.vision h2 {\n  position: relative;\n  font-size: 4.5vw;\n  line-height: 1;\n  font-family: \"Noctis\", serif;\n  max-width: 22vw;\n  z-index: 2;\n  color: white;\n  transform: translateX(-8vw);\n  margin: 0;\n  margin-top: 3vw;\n  margin-bottom: 2vw;\n  font-weight: 300;\n}\n.vision p {\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-right: auto;\n  margin-left: auto;\n  position: relative;\n  max-width: 16vw;\n  font-size: 1vw;\n  line-height: 1.5;\n}\n.vision p:after {\n  content: none;\n}\n.vision .btn_play {\n  bottom: 0;\n  left: 40vw;\n  position: absolute;\n  padding: 0;\n  background: transparent;\n  z-index: 10;\n  border: 0;\n  transform: translate(-50%, 30px) translateX(100px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.vision .btn_play:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n}\n.vision .btn_play_circle {\n  width: 6.75rem;\n  height: 6.75rem;\n  border: 1px solid #FF4409;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.vision .btn_play span {\n  font-size: 1.125rem;\n  margin-top: 1.375rem;\n  display: flex;\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.vision .vision_illu1 {\n  transform: translateY(150px);\n  margin-right: 50px;\n}\n.vision_wrap {\n  display: grid;\n  grid-template-columns: 60vw 30vw;\n}\n.vision_diapo {\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n}\n.vision_diapo img {\n  width: 20vw;\n  min-width: 348px;\n  height: auto;\n}\n.vision_content {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.vision_illu2 {\n  position: relative;\n  z-index: 1;\n}\n\n.excellence {\n  position: relative;\n  padding: 6vw 0 30vh;\n  text-align: center;\n  overflow: visible;\n  background: #ffffff;\n}\n.excellence_bkg {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 1;\n  z-index: 0;\n  overflow: hidden;\n  transform: translateY(10vw);\n}\n.excellence_bkg:before {\n  content: \"\";\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 50vh;\n  z-index: 1;\n  background: linear-gradient(180deg, #FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n}\n.excellence_bkg:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 400px;\n  z-index: 1;\n  transform: scaleY(-1);\n  background: linear-gradient(#FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n}\n.excellence_bkg .zoom {\n  width: 100%;\n  height: 100%;\n  background-size: 100%;\n  background-position: center bottom;\n  background-repeat: no-repeat;\n}\n.excellence .container {\n  position: relative;\n  z-index: 2;\n}\n.excellence h2 {\n  font-size: 4.0625rem;\n  line-height: 4.375rem;\n  font-weight: 400;\n  font-family: \"Noctis\", serif;\n  margin-bottom: 1.5625rem;\n  color: #FF4409;\n}\n.excellence_tag {\n  text-transform: uppercase;\n  letter-spacing: 0.7em;\n  margin-bottom: 1.75rem;\n  margin-top: 2.375rem;\n  font-size: 0.875rem;\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.excellence_content {\n  font-size: 0.9375rem;\n  line-height: 1.75rem;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n  max-width: 31.625rem;\n  margin: 0 auto;\n}\n\n.encart {\n  position: relative;\n  padding: 10vw 0;\n  background: black;\n  color: white;\n}\n.encart h2 {\n  position: relative;\n  font-size: 4vw;\n  line-height: 1;\n  z-index: 1;\n  font-family: \"neue_machinalight\", sans-serif;\n  max-width: 36vw;\n  margin: 0;\n  margin-left: 15vw;\n  font-weight: 300;\n}\n.encart h2 span.color--red {\n  text-transform: uppercase;\n}\n.encart_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  transform: none;\n  z-index: 0;\n}\n\n.models {\n  position: relative;\n  overflow: hidden;\n  background: #fff;\n}\n.models:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 12.5rem;\n  background: black;\n  z-index: 0;\n}\n.models-slider {\n  position: relative;\n  display: flex;\n  flex-wrap: nowrap;\n  width: 100vw;\n  min-width: 1600px;\n  justify-content: center;\n  z-index: 1;\n}\n.models_rail {\n  position: absolute;\n  display: flex;\n  -webkit-animation: rail 40s linear infinite;\n          animation: rail 40s linear infinite;\n}\n.models_title {\n  color: #FF4409;\n  font-size: 8vw;\n  margin: 0;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n  position: relative;\n  top: auto;\n  left: auto;\n  text-transform: uppercase;\n  white-space: nowrap;\n  z-index: 10;\n}\n.models_title h2 {\n  position: static;\n  transform: none;\n}\n.models-slide {\n  position: relative;\n  width: 20vw;\n  max-width: 25rem;\n  min-width: 17.5rem;\n  height: 30vw;\n  max-height: 37.5rem;\n  min-height: 25rem;\n  padding: 40px;\n  display: flex;\n  align-items: flex-end;\n  margin: 0 0.75rem;\n  background: black;\n  overflow: hidden;\n}\n.models-slide:nth-child(2n) {\n  height: 36vw;\n  max-height: 46.625rem;\n  min-height: 31.25rem;\n}\n.models-slide h3 {\n  position: relative;\n  z-index: 1;\n  color: white;\n  font-size: 1.5vw;\n  line-height: 1.2;\n  margin: 0;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n}\n.models-slide img {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: auto;\n  height: 100%;\n  transform: translate(-50%, -50%);\n  z-index: 0;\n}\n\n@-webkit-keyframes rail {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-75%);\n  }\n}\n\n@keyframes rail {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-75%);\n  }\n}\n.timeline {\n  position: relative;\n  overflow: hidden;\n  background: black;\n  color: white;\n  padding: 10vw 0;\n  display: flex;\n  align-items: center;\n}\n.timeline_bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.timeline_bg > div {\n  width: 100%;\n  height: 100%;\n  background-size: 70vw;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n.timeline_scroll {\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: space-between;\n}\n.timeline_slider {\n  transform: translateX(2vw);\n}\n.timeline_slider img {\n  width: 20vw;\n}\n.timeline_text {\n  position: relative;\n}\n.timeline_text .line {\n  position: absolute;\n  top: 5px;\n  left: 0;\n  width: 50px;\n  height: 1px;\n  background: white;\n}\n.timeline_content {\n  width: 28vw;\n  margin-left: 10vw;\n}\n.timeline_content h2 {\n  color: #FF4409;\n  font-family: \"Noctis\", serif;\n  font-size: 4vw;\n  line-height: 1.2;\n  font-weight: 400;\n  margin-bottom: 35px;\n}\n.timeline_content p {\n  position: relative;\n  font-size: 1vw;\n  line-height: 1.5;\n  width: 20vw;\n  margin-left: 100px;\n}\n.timeline_content p:before {\n  content: none;\n}\n.timeline_discover {\n  color: #FF4409;\n  font-size: 1.2vw;\n  width: 10vw;\n  height: 10vw;\n  border-radius: 50%;\n  border: 1px solid #FF4409;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.timeline_discover:after {\n  content: \"\";\n}\n\n[data-main-scroll] {\n  position: fixed;\n}\n\n[data-bg-zoom] {\n  overflow: hidden;\n}\n\n[data-line-reveal] > div {\n  overflow: hidden;\n}\n\n.the-image {\n  position: relative;\n}\n.the-image__curtain {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1;\n  background: #000000;\n  transform: scaleX(0);\n  transform-origin: left;\n}", "",{"version":3,"sources":["webpack://./src/styles/grid.scss","webpack://./src/styles/index.scss","webpack://./src/styles/mixins.scss","webpack://./src/styles/global.scss","webpack://./src/styles/core.scss","webpack://./src/styles/partials/_footer.scss","webpack://./src/styles/partials/_header.scss","webpack://./src/styles/blocks/_banner.scss","webpack://./src/styles/blocks/newsletter.scss","webpack://./src/styles/blocks/_intro.scss","webpack://./src/styles/blocks/_story.scss","webpack://./src/styles/blocks/_heritage.scss","webpack://./src/styles/blocks/_vision.scss","webpack://./src/styles/blocks/_excellence.scss","webpack://./src/styles/blocks/_encart.scss","webpack://./src/styles/blocks/_models.scss","webpack://./src/styles/blocks/_timeline.scss","webpack://./src/styles/modules/animations.scss"],"names":[],"mappings":"AACA;EACE,aAAA;EACA,sCAAA;ACAF;AC4CE;EF9CF;IAKI,sCAAA;ECCF;AACF;ACiDE;EFxDF;IASI,sCAAA;ECEF;AACF;;ACkBE;EFjBF;IAII,cAAA;ECAF;AACF;;ACKE;EFFF;IAII,cAAA;ECFF;AACF;;ADQI;EACE,oBAHO;EAIP,kBAHS;ACFf;;ADGI;EACE,oBAHO;EAIP,kBAHS;ACGf;;ADFI;EACE,oBAHO;EAIP,kBAHS;ACQf;;ADPI;EACE,oBAHO;EAIP,kBAHS;ACaf;;ADZI;EACE,oBAHO;EAIP,kBAHS;ACkBf;;ADjBI;EACE,oBAHO;EAIP,kBAHS;ACuBf;;ADtBI;EACE,oBAHO;EAIP,kBAHS;AC4Bf;;AD3BI;EACE,oBAHO;EAIP,kBAHS;ACiCf;;ADhCI;EACE,oBAHO;EAIP,kBAHS;ACsCf;;ADrCI;EACE,oBAHO;EAIP,mBAHS;AC2Cf;;AD1CI;EACE,oBAHO;EAIP,mBAHS;ACgDf;;AD/CI;EACE,oBAHO;EAIP,mBAHS;ACqDf;;ADpDI;EACE,oBAHO;EAIP,mBAHS;AC0Df;;ADzDI;EACE,oBAHO;EAIP,mBAHS;AC+Df;;AD9DI;EACE,oBAHO;EAIP,mBAHS;ACoEf;;ADnEI;EACE,oBAHO;EAIP,mBAHS;ACyEf;;ADxEI;EACE,oBAHO;EAIP,mBAHS;AC8Ef;;AD7EI;EACE,oBAHO;EAIP,mBAHS;ACmFf;;ADlFI;EACE,oBAHO;EAIP,mBAHS;ACwFf;;ADvFI;EACE,oBAHO;EAIP,mBAHS;AC6Ff;;AD5FI;EACE,oBAHO;EAIP,mBAHS;ACkGf;;ADjGI;EACE,oBAHO;EAIP,mBAHS;ACuGf;;ADtGI;EACE,oBAHO;EAIP,mBAHS;AC4Gf;;AD3GI;EACE,oBAHO;EAIP,mBAHS;ACiHf;;ADhHI;EACE,oBAHO;EAIP,kBAHS;ACsHf;;ADrHI;EACE,oBAHO;EAIP,kBAHS;AC2Hf;;AD1HI;EACE,oBAHO;EAIP,kBAHS;ACgIf;;AD/HI;EACE,oBAHO;EAIP,kBAHS;ACqIf;;ADpII;EACE,oBAHO;EAIP,kBAHS;AC0If;;ADzII;EACE,oBAHO;EAIP,kBAHS;AC+If;;AD9II;EACE,oBAHO;EAIP,kBAHS;ACoJf;;ADnJI;EACE,oBAHO;EAIP,kBAHS;ACyJf;;ADxJI;EACE,oBAHO;EAIP,kBAHS;AC8Jf;;AD7JI;EACE,oBAHO;EAIP,mBAHS;ACmKf;;ADlKI;EACE,oBAHO;EAIP,mBAHS;ACwKf;;ADvKI;EACE,oBAHO;EAIP,mBAHS;AC6Kf;;AD5KI;EACE,oBAHO;EAIP,mBAHS;ACkLf;;ADjLI;EACE,oBAHO;EAIP,mBAHS;ACuLf;;ADtLI;EACE,oBAHO;EAIP,mBAHS;AC4Lf;;AD3LI;EACE,oBAHO;EAIP,mBAHS;ACiMf;;ADhMI;EACE,oBAHO;EAIP,mBAHS;ACsMf;;ADrMI;EACE,oBAHO;EAIP,mBAHS;AC2Mf;;AD1MI;EACE,oBAHO;EAIP,mBAHS;ACgNf;;AD/MI;EACE,oBAHO;EAIP,mBAHS;ACqNf;;ADpNI;EACE,oBAHO;EAIP,mBAHS;AC0Nf;;ADzNI;EACE,oBAHO;EAIP,mBAHS;AC+Nf;;AD9NI;EACE,oBAHO;EAIP,mBAHS;ACoOf;;ADnOI;EACE,oBAHO;EAIP,mBAHS;ACyOf;;ADxOI;EACE,oBAHO;EAIP,kBAHS;AC8Of;;AD7OI;EACE,oBAHO;EAIP,kBAHS;ACmPf;;ADlPI;EACE,oBAHO;EAIP,kBAHS;ACwPf;;ADvPI;EACE,oBAHO;EAIP,kBAHS;AC6Pf;;AD5PI;EACE,oBAHO;EAIP,kBAHS;ACkQf;;ADjQI;EACE,oBAHO;EAIP,kBAHS;ACuQf;;ADtQI;EACE,oBAHO;EAIP,kBAHS;AC4Qf;;AD3QI;EACE,oBAHO;EAIP,kBAHS;ACiRf;;ADhRI;EACE,oBAHO;EAIP,kBAHS;ACsRf;;ADrRI;EACE,oBAHO;EAIP,mBAHS;AC2Rf;;AD1RI;EACE,oBAHO;EAIP,mBAHS;ACgSf;;AD/RI;EACE,oBAHO;EAIP,mBAHS;ACqSf;;ADpSI;EACE,oBAHO;EAIP,mBAHS;AC0Sf;;ADzSI;EACE,oBAHO;EAIP,mBAHS;AC+Sf;;AD9SI;EACE,oBAHO;EAIP,mBAHS;ACoTf;;ADnTI;EACE,oBAHO;EAIP,mBAHS;ACyTf;;ADxTI;EACE,oBAHO;EAIP,mBAHS;AC8Tf;;AD7TI;EACE,oBAHO;EAIP,mBAHS;ACmUf;;ADlUI;EACE,oBAHO;EAIP,mBAHS;ACwUf;;ADvUI;EACE,oBAHO;EAIP,mBAHS;AC6Uf;;AD5UI;EACE,oBAHO;EAIP,mBAHS;ACkVf;;ADjVI;EACE,oBAHO;EAIP,mBAHS;ACuVf;;ADtVI;EACE,oBAHO;EAIP,mBAHS;AC4Vf;;AD3VI;EACE,oBAHO;EAIP,mBAHS;ACiWf;;ADhWI;EACE,oBAHO;EAIP,kBAHS;ACsWf;;ADrWI;EACE,oBAHO;EAIP,kBAHS;AC2Wf;;AD1WI;EACE,oBAHO;EAIP,kBAHS;ACgXf;;AD/WI;EACE,oBAHO;EAIP,kBAHS;ACqXf;;ADpXI;EACE,oBAHO;EAIP,kBAHS;AC0Xf;;ADzXI;EACE,oBAHO;EAIP,kBAHS;AC+Xf;;AD9XI;EACE,oBAHO;EAIP,kBAHS;ACoYf;;ADnYI;EACE,oBAHO;EAIP,kBAHS;ACyYf;;ADxYI;EACE,oBAHO;EAIP,kBAHS;AC8Yf;;AD7YI;EACE,oBAHO;EAIP,mBAHS;ACmZf;;ADlZI;EACE,oBAHO;EAIP,mBAHS;ACwZf;;ADvZI;EACE,oBAHO;EAIP,mBAHS;AC6Zf;;AD5ZI;EACE,oBAHO;EAIP,mBAHS;ACkaf;;ADjaI;EACE,oBAHO;EAIP,mBAHS;ACuaf;;ADtaI;EACE,oBAHO;EAIP,mBAHS;AC4af;;AD3aI;EACE,oBAHO;EAIP,mBAHS;ACibf;;ADhbI;EACE,oBAHO;EAIP,mBAHS;ACsbf;;ADrbI;EACE,oBAHO;EAIP,mBAHS;AC2bf;;AD1bI;EACE,oBAHO;EAIP,mBAHS;ACgcf;;AD/bI;EACE,oBAHO;EAIP,mBAHS;ACqcf;;ADpcI;EACE,oBAHO;EAIP,mBAHS;AC0cf;;ADzcI;EACE,oBAHO;EAIP,mBAHS;AC+cf;;AD9cI;EACE,oBAHO;EAIP,mBAHS;ACodf;;ADndI;EACE,oBAHO;EAIP,mBAHS;ACydf;;ADxdI;EACE,oBAHO;EAIP,kBAHS;AC8df;;AD7dI;EACE,oBAHO;EAIP,kBAHS;ACmef;;ADleI;EACE,oBAHO;EAIP,kBAHS;ACwef;;ADveI;EACE,oBAHO;EAIP,kBAHS;AC6ef;;AD5eI;EACE,oBAHO;EAIP,kBAHS;ACkff;;ADjfI;EACE,oBAHO;EAIP,kBAHS;ACuff;;ADtfI;EACE,oBAHO;EAIP,kBAHS;AC4ff;;AD3fI;EACE,oBAHO;EAIP,kBAHS;ACigBf;;ADhgBI;EACE,oBAHO;EAIP,kBAHS;ACsgBf;;ADrgBI;EACE,oBAHO;EAIP,mBAHS;AC2gBf;;AD1gBI;EACE,oBAHO;EAIP,mBAHS;ACghBf;;AD/gBI;EACE,oBAHO;EAIP,mBAHS;ACqhBf;;ADphBI;EACE,oBAHO;EAIP,mBAHS;AC0hBf;;ADzhBI;EACE,oBAHO;EAIP,mBAHS;AC+hBf;;AD9hBI;EACE,oBAHO;EAIP,mBAHS;ACoiBf;;ADniBI;EACE,oBAHO;EAIP,mBAHS;ACyiBf;;ADxiBI;EACE,oBAHO;EAIP,mBAHS;AC8iBf;;AD7iBI;EACE,oBAHO;EAIP,mBAHS;ACmjBf;;ADljBI;EACE,oBAHO;EAIP,mBAHS;ACwjBf;;ADvjBI;EACE,oBAHO;EAIP,mBAHS;AC6jBf;;AD5jBI;EACE,oBAHO;EAIP,mBAHS;ACkkBf;;ADjkBI;EACE,oBAHO;EAIP,mBAHS;ACukBf;;ADtkBI;EACE,oBAHO;EAIP,mBAHS;AC4kBf;;AD3kBI;EACE,oBAHO;EAIP,mBAHS;ACilBf;;ADhlBI;EACE,oBAHO;EAIP,kBAHS;ACslBf;;ADrlBI;EACE,oBAHO;EAIP,kBAHS;AC2lBf;;AD1lBI;EACE,oBAHO;EAIP,kBAHS;ACgmBf;;AD/lBI;EACE,oBAHO;EAIP,kBAHS;ACqmBf;;ADpmBI;EACE,oBAHO;EAIP,kBAHS;AC0mBf;;ADzmBI;EACE,oBAHO;EAIP,kBAHS;AC+mBf;;AD9mBI;EACE,oBAHO;EAIP,kBAHS;AConBf;;ADnnBI;EACE,oBAHO;EAIP,kBAHS;ACynBf;;ADxnBI;EACE,oBAHO;EAIP,kBAHS;AC8nBf;;AD7nBI;EACE,oBAHO;EAIP,mBAHS;ACmoBf;;ADloBI;EACE,oBAHO;EAIP,mBAHS;ACwoBf;;ADvoBI;EACE,oBAHO;EAIP,mBAHS;AC6oBf;;AD5oBI;EACE,oBAHO;EAIP,mBAHS;ACkpBf;;ADjpBI;EACE,oBAHO;EAIP,mBAHS;ACupBf;;ADtpBI;EACE,oBAHO;EAIP,mBAHS;AC4pBf;;AD3pBI;EACE,oBAHO;EAIP,mBAHS;ACiqBf;;ADhqBI;EACE,oBAHO;EAIP,mBAHS;ACsqBf;;ADrqBI;EACE,oBAHO;EAIP,mBAHS;AC2qBf;;AD1qBI;EACE,oBAHO;EAIP,mBAHS;ACgrBf;;AD/qBI;EACE,oBAHO;EAIP,mBAHS;ACqrBf;;ADprBI;EACE,oBAHO;EAIP,mBAHS;AC0rBf;;ADzrBI;EACE,oBAHO;EAIP,mBAHS;AC+rBf;;AD9rBI;EACE,oBAHO;EAIP,mBAHS;ACosBf;;ADnsBI;EACE,oBAHO;EAIP,mBAHS;ACysBf;;ADxsBI;EACE,oBAHO;EAIP,kBAHS;AC8sBf;;AD7sBI;EACE,oBAHO;EAIP,kBAHS;ACmtBf;;ADltBI;EACE,oBAHO;EAIP,kBAHS;ACwtBf;;ADvtBI;EACE,oBAHO;EAIP,kBAHS;AC6tBf;;AD5tBI;EACE,oBAHO;EAIP,kBAHS;ACkuBf;;ADjuBI;EACE,oBAHO;EAIP,kBAHS;ACuuBf;;ADtuBI;EACE,oBAHO;EAIP,kBAHS;AC4uBf;;AD3uBI;EACE,oBAHO;EAIP,kBAHS;ACivBf;;ADhvBI;EACE,oBAHO;EAIP,kBAHS;ACsvBf;;ADrvBI;EACE,oBAHO;EAIP,mBAHS;AC2vBf;;AD1vBI;EACE,oBAHO;EAIP,mBAHS;ACgwBf;;AD/vBI;EACE,oBAHO;EAIP,mBAHS;ACqwBf;;ADpwBI;EACE,oBAHO;EAIP,mBAHS;AC0wBf;;ADzwBI;EACE,oBAHO;EAIP,mBAHS;AC+wBf;;AD9wBI;EACE,oBAHO;EAIP,mBAHS;ACoxBf;;ADnxBI;EACE,oBAHO;EAIP,mBAHS;ACyxBf;;ADxxBI;EACE,oBAHO;EAIP,mBAHS;AC8xBf;;AD7xBI;EACE,oBAHO;EAIP,mBAHS;ACmyBf;;ADlyBI;EACE,oBAHO;EAIP,mBAHS;ACwyBf;;ADvyBI;EACE,oBAHO;EAIP,mBAHS;AC6yBf;;AD5yBI;EACE,oBAHO;EAIP,mBAHS;ACkzBf;;ADjzBI;EACE,oBAHO;EAIP,mBAHS;ACuzBf;;ADtzBI;EACE,oBAHO;EAIP,mBAHS;AC4zBf;;AD3zBI;EACE,oBAHO;EAIP,mBAHS;ACi0Bf;;ADh0BI;EACE,oBAHO;EAIP,kBAHS;ACs0Bf;;ADr0BI;EACE,oBAHO;EAIP,kBAHS;AC20Bf;;AD10BI;EACE,oBAHO;EAIP,kBAHS;ACg1Bf;;AD/0BI;EACE,oBAHO;EAIP,kBAHS;ACq1Bf;;ADp1BI;EACE,oBAHO;EAIP,kBAHS;AC01Bf;;ADz1BI;EACE,oBAHO;EAIP,kBAHS;AC+1Bf;;AD91BI;EACE,oBAHO;EAIP,kBAHS;ACo2Bf;;ADn2BI;EACE,oBAHO;EAIP,kBAHS;ACy2Bf;;ADx2BI;EACE,oBAHO;EAIP,kBAHS;AC82Bf;;AD72BI;EACE,oBAHO;EAIP,mBAHS;ACm3Bf;;ADl3BI;EACE,oBAHO;EAIP,mBAHS;ACw3Bf;;ADv3BI;EACE,oBAHO;EAIP,mBAHS;AC63Bf;;AD53BI;EACE,oBAHO;EAIP,mBAHS;ACk4Bf;;ADj4BI;EACE,oBAHO;EAIP,mBAHS;ACu4Bf;;ADt4BI;EACE,oBAHO;EAIP,mBAHS;AC44Bf;;AD34BI;EACE,oBAHO;EAIP,mBAHS;ACi5Bf;;ADh5BI;EACE,oBAHO;EAIP,mBAHS;ACs5Bf;;ADr5BI;EACE,oBAHO;EAIP,mBAHS;AC25Bf;;AD15BI;EACE,oBAHO;EAIP,mBAHS;ACg6Bf;;AD/5BI;EACE,oBAHO;EAIP,mBAHS;ACq6Bf;;ADp6BI;EACE,oBAHO;EAIP,mBAHS;AC06Bf;;ADz6BI;EACE,oBAHO;EAIP,mBAHS;AC+6Bf;;AD96BI;EACE,oBAHO;EAIP,mBAHS;ACo7Bf;;ADn7BI;EACE,oBAHO;EAIP,mBAHS;ACy7Bf;;ADx7BI;EACE,oBAHO;EAIP,kBAHS;AC87Bf;;AD77BI;EACE,oBAHO;EAIP,kBAHS;ACm8Bf;;ADl8BI;EACE,oBAHO;EAIP,kBAHS;ACw8Bf;;ADv8BI;EACE,oBAHO;EAIP,kBAHS;AC68Bf;;AD58BI;EACE,oBAHO;EAIP,kBAHS;ACk9Bf;;ADj9BI;EACE,oBAHO;EAIP,kBAHS;ACu9Bf;;ADt9BI;EACE,oBAHO;EAIP,kBAHS;AC49Bf;;AD39BI;EACE,oBAHO;EAIP,kBAHS;ACi+Bf;;ADh+BI;EACE,oBAHO;EAIP,kBAHS;ACs+Bf;;ADr+BI;EACE,oBAHO;EAIP,mBAHS;AC2+Bf;;AD1+BI;EACE,oBAHO;EAIP,mBAHS;ACg/Bf;;AD/+BI;EACE,oBAHO;EAIP,mBAHS;ACq/Bf;;ADp/BI;EACE,oBAHO;EAIP,mBAHS;AC0/Bf;;ADz/BI;EACE,oBAHO;EAIP,mBAHS;AC+/Bf;;AD9/BI;EACE,oBAHO;EAIP,mBAHS;ACogCf;;ADngCI;EACE,oBAHO;EAIP,mBAHS;ACygCf;;ADxgCI;EACE,oBAHO;EAIP,mBAHS;AC8gCf;;AD7gCI;EACE,oBAHO;EAIP,mBAHS;ACmhCf;;ADlhCI;EACE,oBAHO;EAIP,mBAHS;ACwhCf;;ADvhCI;EACE,oBAHO;EAIP,mBAHS;AC6hCf;;AD5hCI;EACE,oBAHO;EAIP,mBAHS;ACkiCf;;ADjiCI;EACE,oBAHO;EAIP,mBAHS;ACuiCf;;ADtiCI;EACE,oBAHO;EAIP,mBAHS;AC4iCf;;AD3iCI;EACE,oBAHO;EAIP,mBAHS;ACijCf;;ADhjCI;EACE,qBAHO;EAIP,kBAHS;ACsjCf;;ADrjCI;EACE,qBAHO;EAIP,kBAHS;AC2jCf;;AD1jCI;EACE,qBAHO;EAIP,kBAHS;ACgkCf;;AD/jCI;EACE,qBAHO;EAIP,kBAHS;ACqkCf;;ADpkCI;EACE,qBAHO;EAIP,kBAHS;AC0kCf;;ADzkCI;EACE,qBAHO;EAIP,kBAHS;AC+kCf;;AD9kCI;EACE,qBAHO;EAIP,kBAHS;AColCf;;ADnlCI;EACE,qBAHO;EAIP,kBAHS;ACylCf;;ADxlCI;EACE,qBAHO;EAIP,kBAHS;AC8lCf;;AD7lCI;EACE,qBAHO;EAIP,mBAHS;ACmmCf;;ADlmCI;EACE,qBAHO;EAIP,mBAHS;ACwmCf;;ADvmCI;EACE,qBAHO;EAIP,mBAHS;AC6mCf;;AD5mCI;EACE,qBAHO;EAIP,mBAHS;ACknCf;;ADjnCI;EACE,qBAHO;EAIP,mBAHS;ACunCf;;ADtnCI;EACE,qBAHO;EAIP,mBAHS;AC4nCf;;AD3nCI;EACE,qBAHO;EAIP,mBAHS;ACioCf;;ADhoCI;EACE,qBAHO;EAIP,mBAHS;ACsoCf;;ADroCI;EACE,qBAHO;EAIP,mBAHS;AC2oCf;;AD1oCI;EACE,qBAHO;EAIP,mBAHS;ACgpCf;;AD/oCI;EACE,qBAHO;EAIP,mBAHS;ACqpCf;;ADppCI;EACE,qBAHO;EAIP,mBAHS;AC0pCf;;ADzpCI;EACE,qBAHO;EAIP,mBAHS;AC+pCf;;AD9pCI;EACE,qBAHO;EAIP,mBAHS;ACoqCf;;ADnqCI;EACE,qBAHO;EAIP,mBAHS;ACyqCf;;ADxqCI;EACE,qBAHO;EAIP,kBAHS;AC8qCf;;AD7qCI;EACE,qBAHO;EAIP,kBAHS;ACmrCf;;ADlrCI;EACE,qBAHO;EAIP,kBAHS;ACwrCf;;ADvrCI;EACE,qBAHO;EAIP,kBAHS;AC6rCf;;AD5rCI;EACE,qBAHO;EAIP,kBAHS;ACksCf;;ADjsCI;EACE,qBAHO;EAIP,kBAHS;ACusCf;;ADtsCI;EACE,qBAHO;EAIP,kBAHS;AC4sCf;;AD3sCI;EACE,qBAHO;EAIP,kBAHS;ACitCf;;ADhtCI;EACE,qBAHO;EAIP,kBAHS;ACstCf;;ADrtCI;EACE,qBAHO;EAIP,mBAHS;AC2tCf;;AD1tCI;EACE,qBAHO;EAIP,mBAHS;ACguCf;;AD/tCI;EACE,qBAHO;EAIP,mBAHS;ACquCf;;ADpuCI;EACE,qBAHO;EAIP,mBAHS;AC0uCf;;ADzuCI;EACE,qBAHO;EAIP,mBAHS;AC+uCf;;AD9uCI;EACE,qBAHO;EAIP,mBAHS;ACovCf;;ADnvCI;EACE,qBAHO;EAIP,mBAHS;ACyvCf;;ADxvCI;EACE,qBAHO;EAIP,mBAHS;AC8vCf;;AD7vCI;EACE,qBAHO;EAIP,mBAHS;ACmwCf;;ADlwCI;EACE,qBAHO;EAIP,mBAHS;ACwwCf;;ADvwCI;EACE,qBAHO;EAIP,mBAHS;AC6wCf;;AD5wCI;EACE,qBAHO;EAIP,mBAHS;ACkxCf;;ADjxCI;EACE,qBAHO;EAIP,mBAHS;ACuxCf;;ADtxCI;EACE,qBAHO;EAIP,mBAHS;AC4xCf;;AD3xCI;EACE,qBAHO;EAIP,mBAHS;ACiyCf;;ADhyCI;EACE,qBAHO;EAIP,kBAHS;ACsyCf;;ADryCI;EACE,qBAHO;EAIP,kBAHS;AC2yCf;;AD1yCI;EACE,qBAHO;EAIP,kBAHS;ACgzCf;;AD/yCI;EACE,qBAHO;EAIP,kBAHS;ACqzCf;;ADpzCI;EACE,qBAHO;EAIP,kBAHS;AC0zCf;;ADzzCI;EACE,qBAHO;EAIP,kBAHS;AC+zCf;;AD9zCI;EACE,qBAHO;EAIP,kBAHS;ACo0Cf;;ADn0CI;EACE,qBAHO;EAIP,kBAHS;ACy0Cf;;ADx0CI;EACE,qBAHO;EAIP,kBAHS;AC80Cf;;AD70CI;EACE,qBAHO;EAIP,mBAHS;ACm1Cf;;ADl1CI;EACE,qBAHO;EAIP,mBAHS;ACw1Cf;;ADv1CI;EACE,qBAHO;EAIP,mBAHS;AC61Cf;;AD51CI;EACE,qBAHO;EAIP,mBAHS;ACk2Cf;;ADj2CI;EACE,qBAHO;EAIP,mBAHS;ACu2Cf;;ADt2CI;EACE,qBAHO;EAIP,mBAHS;AC42Cf;;AD32CI;EACE,qBAHO;EAIP,mBAHS;ACi3Cf;;ADh3CI;EACE,qBAHO;EAIP,mBAHS;ACs3Cf;;ADr3CI;EACE,qBAHO;EAIP,mBAHS;AC23Cf;;AD13CI;EACE,qBAHO;EAIP,mBAHS;ACg4Cf;;AD/3CI;EACE,qBAHO;EAIP,mBAHS;ACq4Cf;;ADp4CI;EACE,qBAHO;EAIP,mBAHS;AC04Cf;;ADz4CI;EACE,qBAHO;EAIP,mBAHS;AC+4Cf;;AD94CI;EACE,qBAHO;EAIP,mBAHS;ACo5Cf;;ADn5CI;EACE,qBAHO;EAIP,mBAHS;ACy5Cf;;ADx5CI;EACE,qBAHO;EAIP,kBAHS;AC85Cf;;AD75CI;EACE,qBAHO;EAIP,kBAHS;ACm6Cf;;ADl6CI;EACE,qBAHO;EAIP,kBAHS;ACw6Cf;;ADv6CI;EACE,qBAHO;EAIP,kBAHS;AC66Cf;;AD56CI;EACE,qBAHO;EAIP,kBAHS;ACk7Cf;;ADj7CI;EACE,qBAHO;EAIP,kBAHS;ACu7Cf;;ADt7CI;EACE,qBAHO;EAIP,kBAHS;AC47Cf;;AD37CI;EACE,qBAHO;EAIP,kBAHS;ACi8Cf;;ADh8CI;EACE,qBAHO;EAIP,kBAHS;ACs8Cf;;ADr8CI;EACE,qBAHO;EAIP,mBAHS;AC28Cf;;AD18CI;EACE,qBAHO;EAIP,mBAHS;ACg9Cf;;AD/8CI;EACE,qBAHO;EAIP,mBAHS;ACq9Cf;;ADp9CI;EACE,qBAHO;EAIP,mBAHS;AC09Cf;;ADz9CI;EACE,qBAHO;EAIP,mBAHS;AC+9Cf;;AD99CI;EACE,qBAHO;EAIP,mBAHS;ACo+Cf;;ADn+CI;EACE,qBAHO;EAIP,mBAHS;ACy+Cf;;ADx+CI;EACE,qBAHO;EAIP,mBAHS;AC8+Cf;;AD7+CI;EACE,qBAHO;EAIP,mBAHS;ACm/Cf;;ADl/CI;EACE,qBAHO;EAIP,mBAHS;ACw/Cf;;ADv/CI;EACE,qBAHO;EAIP,mBAHS;AC6/Cf;;AD5/CI;EACE,qBAHO;EAIP,mBAHS;ACkgDf;;ADjgDI;EACE,qBAHO;EAIP,mBAHS;ACugDf;;ADtgDI;EACE,qBAHO;EAIP,mBAHS;AC4gDf;;AD3gDI;EACE,qBAHO;EAIP,mBAHS;ACihDf;;ADhhDI;EACE,qBAHO;EAIP,kBAHS;ACshDf;;ADrhDI;EACE,qBAHO;EAIP,kBAHS;AC2hDf;;AD1hDI;EACE,qBAHO;EAIP,kBAHS;ACgiDf;;AD/hDI;EACE,qBAHO;EAIP,kBAHS;ACqiDf;;ADpiDI;EACE,qBAHO;EAIP,kBAHS;AC0iDf;;ADziDI;EACE,qBAHO;EAIP,kBAHS;AC+iDf;;AD9iDI;EACE,qBAHO;EAIP,kBAHS;ACojDf;;ADnjDI;EACE,qBAHO;EAIP,kBAHS;ACyjDf;;ADxjDI;EACE,qBAHO;EAIP,kBAHS;AC8jDf;;AD7jDI;EACE,qBAHO;EAIP,mBAHS;ACmkDf;;ADlkDI;EACE,qBAHO;EAIP,mBAHS;ACwkDf;;ADvkDI;EACE,qBAHO;EAIP,mBAHS;AC6kDf;;AD5kDI;EACE,qBAHO;EAIP,mBAHS;ACklDf;;ADjlDI;EACE,qBAHO;EAIP,mBAHS;ACulDf;;ADtlDI;EACE,qBAHO;EAIP,mBAHS;AC4lDf;;AD3lDI;EACE,qBAHO;EAIP,mBAHS;ACimDf;;ADhmDI;EACE,qBAHO;EAIP,mBAHS;ACsmDf;;ADrmDI;EACE,qBAHO;EAIP,mBAHS;AC2mDf;;AD1mDI;EACE,qBAHO;EAIP,mBAHS;ACgnDf;;AD/mDI;EACE,qBAHO;EAIP,mBAHS;ACqnDf;;ADpnDI;EACE,qBAHO;EAIP,mBAHS;AC0nDf;;ADznDI;EACE,qBAHO;EAIP,mBAHS;AC+nDf;;AD9nDI;EACE,qBAHO;EAIP,mBAHS;ACooDf;;ADnoDI;EACE,qBAHO;EAIP,mBAHS;ACyoDf;;ADxoDI;EACE,qBAHO;EAIP,kBAHS;AC8oDf;;AD7oDI;EACE,qBAHO;EAIP,kBAHS;ACmpDf;;ADlpDI;EACE,qBAHO;EAIP,kBAHS;ACwpDf;;ADvpDI;EACE,qBAHO;EAIP,kBAHS;AC6pDf;;AD5pDI;EACE,qBAHO;EAIP,kBAHS;ACkqDf;;ADjqDI;EACE,qBAHO;EAIP,kBAHS;ACuqDf;;ADtqDI;EACE,qBAHO;EAIP,kBAHS;AC4qDf;;AD3qDI;EACE,qBAHO;EAIP,kBAHS;ACirDf;;ADhrDI;EACE,qBAHO;EAIP,kBAHS;ACsrDf;;ADrrDI;EACE,qBAHO;EAIP,mBAHS;AC2rDf;;AD1rDI;EACE,qBAHO;EAIP,mBAHS;ACgsDf;;AD/rDI;EACE,qBAHO;EAIP,mBAHS;ACqsDf;;ADpsDI;EACE,qBAHO;EAIP,mBAHS;AC0sDf;;ADzsDI;EACE,qBAHO;EAIP,mBAHS;AC+sDf;;AD9sDI;EACE,qBAHO;EAIP,mBAHS;ACotDf;;ADntDI;EACE,qBAHO;EAIP,mBAHS;ACytDf;;ADxtDI;EACE,qBAHO;EAIP,mBAHS;AC8tDf;;AD7tDI;EACE,qBAHO;EAIP,mBAHS;ACmuDf;;ADluDI;EACE,qBAHO;EAIP,mBAHS;ACwuDf;;ADvuDI;EACE,qBAHO;EAIP,mBAHS;AC6uDf;;AD5uDI;EACE,qBAHO;EAIP,mBAHS;ACkvDf;;ADjvDI;EACE,qBAHO;EAIP,mBAHS;ACuvDf;;ADtvDI;EACE,qBAHO;EAIP,mBAHS;AC4vDf;;AD3vDI;EACE,qBAHO;EAIP,mBAHS;ACiwDf;;ADhwDI;EACE,qBAHO;EAIP,kBAHS;ACswDf;;ADrwDI;EACE,qBAHO;EAIP,kBAHS;AC2wDf;;AD1wDI;EACE,qBAHO;EAIP,kBAHS;ACgxDf;;AD/wDI;EACE,qBAHO;EAIP,kBAHS;ACqxDf;;ADpxDI;EACE,qBAHO;EAIP,kBAHS;AC0xDf;;ADzxDI;EACE,qBAHO;EAIP,kBAHS;AC+xDf;;AD9xDI;EACE,qBAHO;EAIP,kBAHS;ACoyDf;;ADnyDI;EACE,qBAHO;EAIP,kBAHS;ACyyDf;;ADxyDI;EACE,qBAHO;EAIP,kBAHS;AC8yDf;;AD7yDI;EACE,qBAHO;EAIP,mBAHS;ACmzDf;;ADlzDI;EACE,qBAHO;EAIP,mBAHS;ACwzDf;;ADvzDI;EACE,qBAHO;EAIP,mBAHS;AC6zDf;;AD5zDI;EACE,qBAHO;EAIP,mBAHS;ACk0Df;;ADj0DI;EACE,qBAHO;EAIP,mBAHS;ACu0Df;;ADt0DI;EACE,qBAHO;EAIP,mBAHS;AC40Df;;AD30DI;EACE,qBAHO;EAIP,mBAHS;ACi1Df;;ADh1DI;EACE,qBAHO;EAIP,mBAHS;ACs1Df;;ADr1DI;EACE,qBAHO;EAIP,mBAHS;AC21Df;;AD11DI;EACE,qBAHO;EAIP,mBAHS;ACg2Df;;AD/1DI;EACE,qBAHO;EAIP,mBAHS;ACq2Df;;ADp2DI;EACE,qBAHO;EAIP,mBAHS;AC02Df;;ADz2DI;EACE,qBAHO;EAIP,mBAHS;AC+2Df;;AD92DI;EACE,qBAHO;EAIP,mBAHS;ACo3Df;;ADn3DI;EACE,qBAHO;EAIP,mBAHS;ACy3Df;;ADx3DI;EACE,qBAHO;EAIP,kBAHS;AC83Df;;AD73DI;EACE,qBAHO;EAIP,kBAHS;ACm4Df;;ADl4DI;EACE,qBAHO;EAIP,kBAHS;ACw4Df;;ADv4DI;EACE,qBAHO;EAIP,kBAHS;AC64Df;;AD54DI;EACE,qBAHO;EAIP,kBAHS;ACk5Df;;ADj5DI;EACE,qBAHO;EAIP,kBAHS;ACu5Df;;ADt5DI;EACE,qBAHO;EAIP,kBAHS;AC45Df;;AD35DI;EACE,qBAHO;EAIP,kBAHS;ACi6Df;;ADh6DI;EACE,qBAHO;EAIP,kBAHS;ACs6Df;;ADr6DI;EACE,qBAHO;EAIP,mBAHS;AC26Df;;AD16DI;EACE,qBAHO;EAIP,mBAHS;ACg7Df;;AD/6DI;EACE,qBAHO;EAIP,mBAHS;ACq7Df;;ADp7DI;EACE,qBAHO;EAIP,mBAHS;AC07Df;;ADz7DI;EACE,qBAHO;EAIP,mBAHS;AC+7Df;;AD97DI;EACE,qBAHO;EAIP,mBAHS;ACo8Df;;ADn8DI;EACE,qBAHO;EAIP,mBAHS;ACy8Df;;ADx8DI;EACE,qBAHO;EAIP,mBAHS;AC88Df;;AD78DI;EACE,qBAHO;EAIP,mBAHS;ACm9Df;;ADl9DI;EACE,qBAHO;EAIP,mBAHS;ACw9Df;;ADv9DI;EACE,qBAHO;EAIP,mBAHS;AC69Df;;AD59DI;EACE,qBAHO;EAIP,mBAHS;ACk+Df;;ADj+DI;EACE,qBAHO;EAIP,mBAHS;ACu+Df;;ADt+DI;EACE,qBAHO;EAIP,mBAHS;AC4+Df;;AD3+DI;EACE,qBAHO;EAIP,mBAHS;ACi/Df;;ADh/DI;EACE,qBAHO;EAIP,kBAHS;ACs/Df;;ADr/DI;EACE,qBAHO;EAIP,kBAHS;AC2/Df;;AD1/DI;EACE,qBAHO;EAIP,kBAHS;ACggEf;;AD//DI;EACE,qBAHO;EAIP,kBAHS;ACqgEf;;ADpgEI;EACE,qBAHO;EAIP,kBAHS;AC0gEf;;ADzgEI;EACE,qBAHO;EAIP,kBAHS;AC+gEf;;AD9gEI;EACE,qBAHO;EAIP,kBAHS;ACohEf;;ADnhEI;EACE,qBAHO;EAIP,kBAHS;ACyhEf;;ADxhEI;EACE,qBAHO;EAIP,kBAHS;AC8hEf;;AD7hEI;EACE,qBAHO;EAIP,mBAHS;ACmiEf;;ADliEI;EACE,qBAHO;EAIP,mBAHS;ACwiEf;;ADviEI;EACE,qBAHO;EAIP,mBAHS;AC6iEf;;AD5iEI;EACE,qBAHO;EAIP,mBAHS;ACkjEf;;ADjjEI;EACE,qBAHO;EAIP,mBAHS;ACujEf;;ADtjEI;EACE,qBAHO;EAIP,mBAHS;AC4jEf;;AD3jEI;EACE,qBAHO;EAIP,mBAHS;ACikEf;;ADhkEI;EACE,qBAHO;EAIP,mBAHS;ACskEf;;ADrkEI;EACE,qBAHO;EAIP,mBAHS;AC2kEf;;AD1kEI;EACE,qBAHO;EAIP,mBAHS;ACglEf;;AD/kEI;EACE,qBAHO;EAIP,mBAHS;ACqlEf;;ADplEI;EACE,qBAHO;EAIP,mBAHS;AC0lEf;;ADzlEI;EACE,qBAHO;EAIP,mBAHS;AC+lEf;;AD9lEI;EACE,qBAHO;EAIP,mBAHS;AComEf;;ADnmEI;EACE,qBAHO;EAIP,mBAHS;ACymEf;;ADxmEI;EACE,qBAHO;EAIP,kBAHS;AC8mEf;;AD7mEI;EACE,qBAHO;EAIP,kBAHS;ACmnEf;;ADlnEI;EACE,qBAHO;EAIP,kBAHS;ACwnEf;;ADvnEI;EACE,qBAHO;EAIP,kBAHS;AC6nEf;;AD5nEI;EACE,qBAHO;EAIP,kBAHS;ACkoEf;;ADjoEI;EACE,qBAHO;EAIP,kBAHS;ACuoEf;;ADtoEI;EACE,qBAHO;EAIP,kBAHS;AC4oEf;;AD3oEI;EACE,qBAHO;EAIP,kBAHS;ACipEf;;ADhpEI;EACE,qBAHO;EAIP,kBAHS;ACspEf;;ADrpEI;EACE,qBAHO;EAIP,mBAHS;AC2pEf;;AD1pEI;EACE,qBAHO;EAIP,mBAHS;ACgqEf;;AD/pEI;EACE,qBAHO;EAIP,mBAHS;ACqqEf;;ADpqEI;EACE,qBAHO;EAIP,mBAHS;AC0qEf;;ADzqEI;EACE,qBAHO;EAIP,mBAHS;AC+qEf;;AD9qEI;EACE,qBAHO;EAIP,mBAHS;ACorEf;;ADnrEI;EACE,qBAHO;EAIP,mBAHS;ACyrEf;;ADxrEI;EACE,qBAHO;EAIP,mBAHS;AC8rEf;;AD7rEI;EACE,qBAHO;EAIP,mBAHS;ACmsEf;;ADlsEI;EACE,qBAHO;EAIP,mBAHS;ACwsEf;;ADvsEI;EACE,qBAHO;EAIP,mBAHS;AC6sEf;;AD5sEI;EACE,qBAHO;EAIP,mBAHS;ACktEf;;ADjtEI;EACE,qBAHO;EAIP,mBAHS;ACutEf;;ADttEI;EACE,qBAHO;EAIP,mBAHS;AC4tEf;;AD3tEI;EACE,qBAHO;EAIP,mBAHS;ACiuEf;;ADhuEI;EACE,qBAHO;EAIP,kBAHS;ACsuEf;;ADruEI;EACE,qBAHO;EAIP,kBAHS;AC2uEf;;AD1uEI;EACE,qBAHO;EAIP,kBAHS;ACgvEf;;AD/uEI;EACE,qBAHO;EAIP,kBAHS;ACqvEf;;ADpvEI;EACE,qBAHO;EAIP,kBAHS;AC0vEf;;ADzvEI;EACE,qBAHO;EAIP,kBAHS;AC+vEf;;AD9vEI;EACE,qBAHO;EAIP,kBAHS;ACowEf;;ADnwEI;EACE,qBAHO;EAIP,kBAHS;ACywEf;;ADxwEI;EACE,qBAHO;EAIP,kBAHS;AC8wEf;;AD7wEI;EACE,qBAHO;EAIP,mBAHS;ACmxEf;;ADlxEI;EACE,qBAHO;EAIP,mBAHS;ACwxEf;;ADvxEI;EACE,qBAHO;EAIP,mBAHS;AC6xEf;;AD5xEI;EACE,qBAHO;EAIP,mBAHS;ACkyEf;;ADjyEI;EACE,qBAHO;EAIP,mBAHS;ACuyEf;;ADtyEI;EACE,qBAHO;EAIP,mBAHS;AC4yEf;;AD3yEI;EACE,qBAHO;EAIP,mBAHS;ACizEf;;ADhzEI;EACE,qBAHO;EAIP,mBAHS;ACszEf;;ADrzEI;EACE,qBAHO;EAIP,mBAHS;AC2zEf;;AD1zEI;EACE,qBAHO;EAIP,mBAHS;ACg0Ef;;AD/zEI;EACE,qBAHO;EAIP,mBAHS;ACq0Ef;;ADp0EI;EACE,qBAHO;EAIP,mBAHS;AC00Ef;;ADz0EI;EACE,qBAHO;EAIP,mBAHS;AC+0Ef;;AD90EI;EACE,qBAHO;EAIP,mBAHS;ACo1Ef;;ADn1EI;EACE,qBAHO;EAIP,mBAHS;ACy1Ef;;ADx1EI;EACE,qBAHO;EAIP,kBAHS;AC81Ef;;AD71EI;EACE,qBAHO;EAIP,kBAHS;ACm2Ef;;ADl2EI;EACE,qBAHO;EAIP,kBAHS;ACw2Ef;;ADv2EI;EACE,qBAHO;EAIP,kBAHS;AC62Ef;;AD52EI;EACE,qBAHO;EAIP,kBAHS;ACk3Ef;;ADj3EI;EACE,qBAHO;EAIP,kBAHS;ACu3Ef;;ADt3EI;EACE,qBAHO;EAIP,kBAHS;AC43Ef;;AD33EI;EACE,qBAHO;EAIP,kBAHS;ACi4Ef;;ADh4EI;EACE,qBAHO;EAIP,kBAHS;ACs4Ef;;ADr4EI;EACE,qBAHO;EAIP,mBAHS;AC24Ef;;AD14EI;EACE,qBAHO;EAIP,mBAHS;ACg5Ef;;AD/4EI;EACE,qBAHO;EAIP,mBAHS;ACq5Ef;;ADp5EI;EACE,qBAHO;EAIP,mBAHS;AC05Ef;;ADz5EI;EACE,qBAHO;EAIP,mBAHS;AC+5Ef;;AD95EI;EACE,qBAHO;EAIP,mBAHS;ACo6Ef;;ADn6EI;EACE,qBAHO;EAIP,mBAHS;ACy6Ef;;ADx6EI;EACE,qBAHO;EAIP,mBAHS;AC86Ef;;AD76EI;EACE,qBAHO;EAIP,mBAHS;ACm7Ef;;ADl7EI;EACE,qBAHO;EAIP,mBAHS;ACw7Ef;;ADv7EI;EACE,qBAHO;EAIP,mBAHS;AC67Ef;;AD57EI;EACE,qBAHO;EAIP,mBAHS;ACk8Ef;;ADj8EI;EACE,qBAHO;EAIP,mBAHS;ACu8Ef;;ADt8EI;EACE,qBAHO;EAIP,mBAHS;AC48Ef;;AD38EI;EACE,qBAHO;EAIP,mBAHS;ACi9Ef;;ADh9EI;EACE,qBAHO;EAIP,kBAHS;ACs9Ef;;ADr9EI;EACE,qBAHO;EAIP,kBAHS;AC29Ef;;AD19EI;EACE,qBAHO;EAIP,kBAHS;ACg+Ef;;AD/9EI;EACE,qBAHO;EAIP,kBAHS;ACq+Ef;;ADp+EI;EACE,qBAHO;EAIP,kBAHS;AC0+Ef;;ADz+EI;EACE,qBAHO;EAIP,kBAHS;AC++Ef;;AD9+EI;EACE,qBAHO;EAIP,kBAHS;ACo/Ef;;ADn/EI;EACE,qBAHO;EAIP,kBAHS;ACy/Ef;;ADx/EI;EACE,qBAHO;EAIP,kBAHS;AC8/Ef;;AD7/EI;EACE,qBAHO;EAIP,mBAHS;ACmgFf;;ADlgFI;EACE,qBAHO;EAIP,mBAHS;ACwgFf;;ADvgFI;EACE,qBAHO;EAIP,mBAHS;AC6gFf;;AD5gFI;EACE,qBAHO;EAIP,mBAHS;ACkhFf;;ADjhFI;EACE,qBAHO;EAIP,mBAHS;ACuhFf;;ADthFI;EACE,qBAHO;EAIP,mBAHS;AC4hFf;;AD3hFI;EACE,qBAHO;EAIP,mBAHS;ACiiFf;;ADhiFI;EACE,qBAHO;EAIP,mBAHS;ACsiFf;;ADriFI;EACE,qBAHO;EAIP,mBAHS;AC2iFf;;AD1iFI;EACE,qBAHO;EAIP,mBAHS;ACgjFf;;AD/iFI;EACE,qBAHO;EAIP,mBAHS;ACqjFf;;ADpjFI;EACE,qBAHO;EAIP,mBAHS;AC0jFf;;ADzjFI;EACE,qBAHO;EAIP,mBAHS;AC+jFf;;AD9jFI;EACE,qBAHO;EAIP,mBAHS;ACokFf;;ADnkFI;EACE,qBAHO;EAIP,mBAHS;ACykFf;;ADxkFI;EACE,qBAHO;EAIP,kBAHS;AC8kFf;;AD7kFI;EACE,qBAHO;EAIP,kBAHS;ACmlFf;;ADllFI;EACE,qBAHO;EAIP,kBAHS;ACwlFf;;ADvlFI;EACE,qBAHO;EAIP,kBAHS;AC6lFf;;AD5lFI;EACE,qBAHO;EAIP,kBAHS;ACkmFf;;ADjmFI;EACE,qBAHO;EAIP,kBAHS;ACumFf;;ADtmFI;EACE,qBAHO;EAIP,kBAHS;AC4mFf;;AD3mFI;EACE,qBAHO;EAIP,kBAHS;ACinFf;;ADhnFI;EACE,qBAHO;EAIP,kBAHS;ACsnFf;;ADrnFI;EACE,qBAHO;EAIP,mBAHS;AC2nFf;;AD1nFI;EACE,qBAHO;EAIP,mBAHS;ACgoFf;;AD/nFI;EACE,qBAHO;EAIP,mBAHS;ACqoFf;;ADpoFI;EACE,qBAHO;EAIP,mBAHS;AC0oFf;;ADzoFI;EACE,qBAHO;EAIP,mBAHS;AC+oFf;;AD9oFI;EACE,qBAHO;EAIP,mBAHS;ACopFf;;ADnpFI;EACE,qBAHO;EAIP,mBAHS;ACypFf;;ADxpFI;EACE,qBAHO;EAIP,mBAHS;AC8pFf;;AD7pFI;EACE,qBAHO;EAIP,mBAHS;ACmqFf;;ADlqFI;EACE,qBAHO;EAIP,mBAHS;ACwqFf;;ADvqFI;EACE,qBAHO;EAIP,mBAHS;AC6qFf;;AD5qFI;EACE,qBAHO;EAIP,mBAHS;ACkrFf;;ADjrFI;EACE,qBAHO;EAIP,mBAHS;ACurFf;;ADtrFI;EACE,qBAHO;EAIP,mBAHS;AC4rFf;;AD3rFI;EACE,qBAHO;EAIP,mBAHS;ACisFf;;AC5rFE;EFOI;IACE,oBAHO;IAIP,kBAHS;EC4rFf;ED3rFI;IACE,oBAHO;IAIP,kBAHS;ECgsFf;ED/rFI;IACE,oBAHO;IAIP,kBAHS;ECosFf;EDnsFI;IACE,oBAHO;IAIP,kBAHS;ECwsFf;EDvsFI;IACE,oBAHO;IAIP,kBAHS;EC4sFf;ED3sFI;IACE,oBAHO;IAIP,kBAHS;ECgtFf;ED/sFI;IACE,oBAHO;IAIP,kBAHS;ECotFf;EDntFI;IACE,oBAHO;IAIP,kBAHS;ECwtFf;EDvtFI;IACE,oBAHO;IAIP,kBAHS;EC4tFf;ED3tFI;IACE,oBAHO;IAIP,mBAHS;ECguFf;ED/tFI;IACE,oBAHO;IAIP,mBAHS;ECouFf;EDnuFI;IACE,oBAHO;IAIP,mBAHS;ECwuFf;EDvuFI;IACE,oBAHO;IAIP,mBAHS;EC4uFf;ED3uFI;IACE,oBAHO;IAIP,mBAHS;ECgvFf;ED/uFI;IACE,oBAHO;IAIP,mBAHS;ECovFf;EDnvFI;IACE,oBAHO;IAIP,mBAHS;ECwvFf;EDvvFI;IACE,oBAHO;IAIP,mBAHS;EC4vFf;ED3vFI;IACE,oBAHO;IAIP,mBAHS;ECgwFf;ED/vFI;IACE,oBAHO;IAIP,mBAHS;ECowFf;EDnwFI;IACE,oBAHO;IAIP,mBAHS;ECwwFf;EDvwFI;IACE,oBAHO;IAIP,mBAHS;EC4wFf;ED3wFI;IACE,oBAHO;IAIP,mBAHS;ECgxFf;ED/wFI;IACE,oBAHO;IAIP,mBAHS;ECoxFf;EDnxFI;IACE,oBAHO;IAIP,mBAHS;ECwxFf;EDvxFI;IACE,oBAHO;IAIP,kBAHS;EC4xFf;ED3xFI;IACE,oBAHO;IAIP,kBAHS;ECgyFf;ED/xFI;IACE,oBAHO;IAIP,kBAHS;ECoyFf;EDnyFI;IACE,oBAHO;IAIP,kBAHS;ECwyFf;EDvyFI;IACE,oBAHO;IAIP,kBAHS;EC4yFf;ED3yFI;IACE,oBAHO;IAIP,kBAHS;ECgzFf;ED/yFI;IACE,oBAHO;IAIP,kBAHS;ECozFf;EDnzFI;IACE,oBAHO;IAIP,kBAHS;ECwzFf;EDvzFI;IACE,oBAHO;IAIP,kBAHS;EC4zFf;ED3zFI;IACE,oBAHO;IAIP,mBAHS;ECg0Ff;ED/zFI;IACE,oBAHO;IAIP,mBAHS;ECo0Ff;EDn0FI;IACE,oBAHO;IAIP,mBAHS;ECw0Ff;EDv0FI;IACE,oBAHO;IAIP,mBAHS;EC40Ff;ED30FI;IACE,oBAHO;IAIP,mBAHS;ECg1Ff;ED/0FI;IACE,oBAHO;IAIP,mBAHS;ECo1Ff;EDn1FI;IACE,oBAHO;IAIP,mBAHS;ECw1Ff;EDv1FI;IACE,oBAHO;IAIP,mBAHS;EC41Ff;ED31FI;IACE,oBAHO;IAIP,mBAHS;ECg2Ff;ED/1FI;IACE,oBAHO;IAIP,mBAHS;ECo2Ff;EDn2FI;IACE,oBAHO;IAIP,mBAHS;ECw2Ff;EDv2FI;IACE,oBAHO;IAIP,mBAHS;EC42Ff;ED32FI;IACE,oBAHO;IAIP,mBAHS;ECg3Ff;ED/2FI;IACE,oBAHO;IAIP,mBAHS;ECo3Ff;EDn3FI;IACE,oBAHO;IAIP,mBAHS;ECw3Ff;EDv3FI;IACE,oBAHO;IAIP,kBAHS;EC43Ff;ED33FI;IACE,oBAHO;IAIP,kBAHS;ECg4Ff;ED/3FI;IACE,oBAHO;IAIP,kBAHS;ECo4Ff;EDn4FI;IACE,oBAHO;IAIP,kBAHS;ECw4Ff;EDv4FI;IACE,oBAHO;IAIP,kBAHS;EC44Ff;ED34FI;IACE,oBAHO;IAIP,kBAHS;ECg5Ff;ED/4FI;IACE,oBAHO;IAIP,kBAHS;ECo5Ff;EDn5FI;IACE,oBAHO;IAIP,kBAHS;ECw5Ff;EDv5FI;IACE,oBAHO;IAIP,kBAHS;EC45Ff;ED35FI;IACE,oBAHO;IAIP,mBAHS;ECg6Ff;ED/5FI;IACE,oBAHO;IAIP,mBAHS;ECo6Ff;EDn6FI;IACE,oBAHO;IAIP,mBAHS;ECw6Ff;EDv6FI;IACE,oBAHO;IAIP,mBAHS;EC46Ff;ED36FI;IACE,oBAHO;IAIP,mBAHS;ECg7Ff;ED/6FI;IACE,oBAHO;IAIP,mBAHS;ECo7Ff;EDn7FI;IACE,oBAHO;IAIP,mBAHS;ECw7Ff;EDv7FI;IACE,oBAHO;IAIP,mBAHS;EC47Ff;ED37FI;IACE,oBAHO;IAIP,mBAHS;ECg8Ff;ED/7FI;IACE,oBAHO;IAIP,mBAHS;ECo8Ff;EDn8FI;IACE,oBAHO;IAIP,mBAHS;ECw8Ff;EDv8FI;IACE,oBAHO;IAIP,mBAHS;EC48Ff;ED38FI;IACE,oBAHO;IAIP,mBAHS;ECg9Ff;ED/8FI;IACE,oBAHO;IAIP,mBAHS;ECo9Ff;EDn9FI;IACE,oBAHO;IAIP,mBAHS;ECw9Ff;EDv9FI;IACE,oBAHO;IAIP,kBAHS;EC49Ff;ED39FI;IACE,oBAHO;IAIP,kBAHS;ECg+Ff;ED/9FI;IACE,oBAHO;IAIP,kBAHS;ECo+Ff;EDn+FI;IACE,oBAHO;IAIP,kBAHS;ECw+Ff;EDv+FI;IACE,oBAHO;IAIP,kBAHS;EC4+Ff;ED3+FI;IACE,oBAHO;IAIP,kBAHS;ECg/Ff;ED/+FI;IACE,oBAHO;IAIP,kBAHS;ECo/Ff;EDn/FI;IACE,oBAHO;IAIP,kBAHS;ECw/Ff;EDv/FI;IACE,oBAHO;IAIP,kBAHS;EC4/Ff;ED3/FI;IACE,oBAHO;IAIP,mBAHS;ECggGf;ED//FI;IACE,oBAHO;IAIP,mBAHS;ECogGf;EDngGI;IACE,oBAHO;IAIP,mBAHS;ECwgGf;EDvgGI;IACE,oBAHO;IAIP,mBAHS;EC4gGf;ED3gGI;IACE,oBAHO;IAIP,mBAHS;ECghGf;ED/gGI;IACE,oBAHO;IAIP,mBAHS;ECohGf;EDnhGI;IACE,oBAHO;IAIP,mBAHS;ECwhGf;EDvhGI;IACE,oBAHO;IAIP,mBAHS;EC4hGf;ED3hGI;IACE,oBAHO;IAIP,mBAHS;ECgiGf;ED/hGI;IACE,oBAHO;IAIP,mBAHS;ECoiGf;EDniGI;IACE,oBAHO;IAIP,mBAHS;ECwiGf;EDviGI;IACE,oBAHO;IAIP,mBAHS;EC4iGf;ED3iGI;IACE,oBAHO;IAIP,mBAHS;ECgjGf;ED/iGI;IACE,oBAHO;IAIP,mBAHS;ECojGf;EDnjGI;IACE,oBAHO;IAIP,mBAHS;ECwjGf;EDvjGI;IACE,oBAHO;IAIP,kBAHS;EC4jGf;ED3jGI;IACE,oBAHO;IAIP,kBAHS;ECgkGf;ED/jGI;IACE,oBAHO;IAIP,kBAHS;ECokGf;EDnkGI;IACE,oBAHO;IAIP,kBAHS;ECwkGf;EDvkGI;IACE,oBAHO;IAIP,kBAHS;EC4kGf;ED3kGI;IACE,oBAHO;IAIP,kBAHS;ECglGf;ED/kGI;IACE,oBAHO;IAIP,kBAHS;EColGf;EDnlGI;IACE,oBAHO;IAIP,kBAHS;ECwlGf;EDvlGI;IACE,oBAHO;IAIP,kBAHS;EC4lGf;ED3lGI;IACE,oBAHO;IAIP,mBAHS;ECgmGf;ED/lGI;IACE,oBAHO;IAIP,mBAHS;EComGf;EDnmGI;IACE,oBAHO;IAIP,mBAHS;ECwmGf;EDvmGI;IACE,oBAHO;IAIP,mBAHS;EC4mGf;ED3mGI;IACE,oBAHO;IAIP,mBAHS;ECgnGf;ED/mGI;IACE,oBAHO;IAIP,mBAHS;EConGf;EDnnGI;IACE,oBAHO;IAIP,mBAHS;ECwnGf;EDvnGI;IACE,oBAHO;IAIP,mBAHS;EC4nGf;ED3nGI;IACE,oBAHO;IAIP,mBAHS;ECgoGf;ED/nGI;IACE,oBAHO;IAIP,mBAHS;ECooGf;EDnoGI;IACE,oBAHO;IAIP,mBAHS;ECwoGf;EDvoGI;IACE,oBAHO;IAIP,mBAHS;EC4oGf;ED3oGI;IACE,oBAHO;IAIP,mBAHS;ECgpGf;ED/oGI;IACE,oBAHO;IAIP,mBAHS;ECopGf;EDnpGI;IACE,oBAHO;IAIP,mBAHS;ECwpGf;EDvpGI;IACE,oBAHO;IAIP,kBAHS;EC4pGf;ED3pGI;IACE,oBAHO;IAIP,kBAHS;ECgqGf;ED/pGI;IACE,oBAHO;IAIP,kBAHS;ECoqGf;EDnqGI;IACE,oBAHO;IAIP,kBAHS;ECwqGf;EDvqGI;IACE,oBAHO;IAIP,kBAHS;EC4qGf;ED3qGI;IACE,oBAHO;IAIP,kBAHS;ECgrGf;ED/qGI;IACE,oBAHO;IAIP,kBAHS;ECorGf;EDnrGI;IACE,oBAHO;IAIP,kBAHS;ECwrGf;EDvrGI;IACE,oBAHO;IAIP,kBAHS;EC4rGf;ED3rGI;IACE,oBAHO;IAIP,mBAHS;ECgsGf;ED/rGI;IACE,oBAHO;IAIP,mBAHS;ECosGf;EDnsGI;IACE,oBAHO;IAIP,mBAHS;ECwsGf;EDvsGI;IACE,oBAHO;IAIP,mBAHS;EC4sGf;ED3sGI;IACE,oBAHO;IAIP,mBAHS;ECgtGf;ED/sGI;IACE,oBAHO;IAIP,mBAHS;ECotGf;EDntGI;IACE,oBAHO;IAIP,mBAHS;ECwtGf;EDvtGI;IACE,oBAHO;IAIP,mBAHS;EC4tGf;ED3tGI;IACE,oBAHO;IAIP,mBAHS;ECguGf;ED/tGI;IACE,oBAHO;IAIP,mBAHS;ECouGf;EDnuGI;IACE,oBAHO;IAIP,mBAHS;ECwuGf;EDvuGI;IACE,oBAHO;IAIP,mBAHS;EC4uGf;ED3uGI;IACE,oBAHO;IAIP,mBAHS;ECgvGf;ED/uGI;IACE,oBAHO;IAIP,mBAHS;ECovGf;EDnvGI;IACE,oBAHO;IAIP,mBAHS;ECwvGf;EDvvGI;IACE,oBAHO;IAIP,kBAHS;EC4vGf;ED3vGI;IACE,oBAHO;IAIP,kBAHS;ECgwGf;ED/vGI;IACE,oBAHO;IAIP,kBAHS;ECowGf;EDnwGI;IACE,oBAHO;IAIP,kBAHS;ECwwGf;EDvwGI;IACE,oBAHO;IAIP,kBAHS;EC4wGf;ED3wGI;IACE,oBAHO;IAIP,kBAHS;ECgxGf;ED/wGI;IACE,oBAHO;IAIP,kBAHS;ECoxGf;EDnxGI;IACE,oBAHO;IAIP,kBAHS;ECwxGf;EDvxGI;IACE,oBAHO;IAIP,kBAHS;EC4xGf;ED3xGI;IACE,oBAHO;IAIP,mBAHS;ECgyGf;ED/xGI;IACE,oBAHO;IAIP,mBAHS;ECoyGf;EDnyGI;IACE,oBAHO;IAIP,mBAHS;ECwyGf;EDvyGI;IACE,oBAHO;IAIP,mBAHS;EC4yGf;ED3yGI;IACE,oBAHO;IAIP,mBAHS;ECgzGf;ED/yGI;IACE,oBAHO;IAIP,mBAHS;ECozGf;EDnzGI;IACE,oBAHO;IAIP,mBAHS;ECwzGf;EDvzGI;IACE,oBAHO;IAIP,mBAHS;EC4zGf;ED3zGI;IACE,oBAHO;IAIP,mBAHS;ECg0Gf;ED/zGI;IACE,oBAHO;IAIP,mBAHS;ECo0Gf;EDn0GI;IACE,oBAHO;IAIP,mBAHS;ECw0Gf;EDv0GI;IACE,oBAHO;IAIP,mBAHS;EC40Gf;ED30GI;IACE,oBAHO;IAIP,mBAHS;ECg1Gf;ED/0GI;IACE,oBAHO;IAIP,mBAHS;ECo1Gf;EDn1GI;IACE,oBAHO;IAIP,mBAHS;ECw1Gf;EDv1GI;IACE,oBAHO;IAIP,kBAHS;EC41Gf;ED31GI;IACE,oBAHO;IAIP,kBAHS;ECg2Gf;ED/1GI;IACE,oBAHO;IAIP,kBAHS;ECo2Gf;EDn2GI;IACE,oBAHO;IAIP,kBAHS;ECw2Gf;EDv2GI;IACE,oBAHO;IAIP,kBAHS;EC42Gf;ED32GI;IACE,oBAHO;IAIP,kBAHS;ECg3Gf;ED/2GI;IACE,oBAHO;IAIP,kBAHS;ECo3Gf;EDn3GI;IACE,oBAHO;IAIP,kBAHS;ECw3Gf;EDv3GI;IACE,oBAHO;IAIP,kBAHS;EC43Gf;ED33GI;IACE,oBAHO;IAIP,mBAHS;ECg4Gf;ED/3GI;IACE,oBAHO;IAIP,mBAHS;ECo4Gf;EDn4GI;IACE,oBAHO;IAIP,mBAHS;ECw4Gf;EDv4GI;IACE,oBAHO;IAIP,mBAHS;EC44Gf;ED34GI;IACE,oBAHO;IAIP,mBAHS;ECg5Gf;ED/4GI;IACE,oBAHO;IAIP,mBAHS;ECo5Gf;EDn5GI;IACE,oBAHO;IAIP,mBAHS;ECw5Gf;EDv5GI;IACE,oBAHO;IAIP,mBAHS;EC45Gf;ED35GI;IACE,oBAHO;IAIP,mBAHS;ECg6Gf;ED/5GI;IACE,oBAHO;IAIP,mBAHS;ECo6Gf;EDn6GI;IACE,oBAHO;IAIP,mBAHS;ECw6Gf;EDv6GI;IACE,oBAHO;IAIP,mBAHS;EC46Gf;ED36GI;IACE,oBAHO;IAIP,mBAHS;ECg7Gf;ED/6GI;IACE,oBAHO;IAIP,mBAHS;ECo7Gf;EDn7GI;IACE,oBAHO;IAIP,mBAHS;ECw7Gf;EDv7GI;IACE,oBAHO;IAIP,kBAHS;EC47Gf;ED37GI;IACE,oBAHO;IAIP,kBAHS;ECg8Gf;ED/7GI;IACE,oBAHO;IAIP,kBAHS;ECo8Gf;EDn8GI;IACE,oBAHO;IAIP,kBAHS;ECw8Gf;EDv8GI;IACE,oBAHO;IAIP,kBAHS;EC48Gf;ED38GI;IACE,oBAHO;IAIP,kBAHS;ECg9Gf;ED/8GI;IACE,oBAHO;IAIP,kBAHS;ECo9Gf;EDn9GI;IACE,oBAHO;IAIP,kBAHS;ECw9Gf;EDv9GI;IACE,oBAHO;IAIP,kBAHS;EC49Gf;ED39GI;IACE,oBAHO;IAIP,mBAHS;ECg+Gf;ED/9GI;IACE,oBAHO;IAIP,mBAHS;ECo+Gf;EDn+GI;IACE,oBAHO;IAIP,mBAHS;ECw+Gf;EDv+GI;IACE,oBAHO;IAIP,mBAHS;EC4+Gf;ED3+GI;IACE,oBAHO;IAIP,mBAHS;ECg/Gf;ED/+GI;IACE,oBAHO;IAIP,mBAHS;ECo/Gf;EDn/GI;IACE,oBAHO;IAIP,mBAHS;ECw/Gf;EDv/GI;IACE,oBAHO;IAIP,mBAHS;EC4/Gf;ED3/GI;IACE,oBAHO;IAIP,mBAHS;ECggHf;ED//GI;IACE,oBAHO;IAIP,mBAHS;ECogHf;EDngHI;IACE,oBAHO;IAIP,mBAHS;ECwgHf;EDvgHI;IACE,oBAHO;IAIP,mBAHS;EC4gHf;ED3gHI;IACE,oBAHO;IAIP,mBAHS;ECghHf;ED/gHI;IACE,oBAHO;IAIP,mBAHS;ECohHf;EDnhHI;IACE,oBAHO;IAIP,mBAHS;ECwhHf;EDvhHI;IACE,qBAHO;IAIP,kBAHS;EC4hHf;ED3hHI;IACE,qBAHO;IAIP,kBAHS;ECgiHf;ED/hHI;IACE,qBAHO;IAIP,kBAHS;ECoiHf;EDniHI;IACE,qBAHO;IAIP,kBAHS;ECwiHf;EDviHI;IACE,qBAHO;IAIP,kBAHS;EC4iHf;ED3iHI;IACE,qBAHO;IAIP,kBAHS;ECgjHf;ED/iHI;IACE,qBAHO;IAIP,kBAHS;ECojHf;EDnjHI;IACE,qBAHO;IAIP,kBAHS;ECwjHf;EDvjHI;IACE,qBAHO;IAIP,kBAHS;EC4jHf;ED3jHI;IACE,qBAHO;IAIP,mBAHS;ECgkHf;ED/jHI;IACE,qBAHO;IAIP,mBAHS;ECokHf;EDnkHI;IACE,qBAHO;IAIP,mBAHS;ECwkHf;EDvkHI;IACE,qBAHO;IAIP,mBAHS;EC4kHf;ED3kHI;IACE,qBAHO;IAIP,mBAHS;ECglHf;ED/kHI;IACE,qBAHO;IAIP,mBAHS;EColHf;EDnlHI;IACE,qBAHO;IAIP,mBAHS;ECwlHf;EDvlHI;IACE,qBAHO;IAIP,mBAHS;EC4lHf;ED3lHI;IACE,qBAHO;IAIP,mBAHS;ECgmHf;ED/lHI;IACE,qBAHO;IAIP,mBAHS;EComHf;EDnmHI;IACE,qBAHO;IAIP,mBAHS;ECwmHf;EDvmHI;IACE,qBAHO;IAIP,mBAHS;EC4mHf;ED3mHI;IACE,qBAHO;IAIP,mBAHS;ECgnHf;ED/mHI;IACE,qBAHO;IAIP,mBAHS;EConHf;EDnnHI;IACE,qBAHO;IAIP,mBAHS;ECwnHf;EDvnHI;IACE,qBAHO;IAIP,kBAHS;EC4nHf;ED3nHI;IACE,qBAHO;IAIP,kBAHS;ECgoHf;ED/nHI;IACE,qBAHO;IAIP,kBAHS;ECooHf;EDnoHI;IACE,qBAHO;IAIP,kBAHS;ECwoHf;EDvoHI;IACE,qBAHO;IAIP,kBAHS;EC4oHf;ED3oHI;IACE,qBAHO;IAIP,kBAHS;ECgpHf;ED/oHI;IACE,qBAHO;IAIP,kBAHS;ECopHf;EDnpHI;IACE,qBAHO;IAIP,kBAHS;ECwpHf;EDvpHI;IACE,qBAHO;IAIP,kBAHS;EC4pHf;ED3pHI;IACE,qBAHO;IAIP,mBAHS;ECgqHf;ED/pHI;IACE,qBAHO;IAIP,mBAHS;ECoqHf;EDnqHI;IACE,qBAHO;IAIP,mBAHS;ECwqHf;EDvqHI;IACE,qBAHO;IAIP,mBAHS;EC4qHf;ED3qHI;IACE,qBAHO;IAIP,mBAHS;ECgrHf;ED/qHI;IACE,qBAHO;IAIP,mBAHS;ECorHf;EDnrHI;IACE,qBAHO;IAIP,mBAHS;ECwrHf;EDvrHI;IACE,qBAHO;IAIP,mBAHS;EC4rHf;ED3rHI;IACE,qBAHO;IAIP,mBAHS;ECgsHf;ED/rHI;IACE,qBAHO;IAIP,mBAHS;ECosHf;EDnsHI;IACE,qBAHO;IAIP,mBAHS;ECwsHf;EDvsHI;IACE,qBAHO;IAIP,mBAHS;EC4sHf;ED3sHI;IACE,qBAHO;IAIP,mBAHS;ECgtHf;ED/sHI;IACE,qBAHO;IAIP,mBAHS;ECotHf;EDntHI;IACE,qBAHO;IAIP,mBAHS;ECwtHf;EDvtHI;IACE,qBAHO;IAIP,kBAHS;EC4tHf;ED3tHI;IACE,qBAHO;IAIP,kBAHS;ECguHf;ED/tHI;IACE,qBAHO;IAIP,kBAHS;ECouHf;EDnuHI;IACE,qBAHO;IAIP,kBAHS;ECwuHf;EDvuHI;IACE,qBAHO;IAIP,kBAHS;EC4uHf;ED3uHI;IACE,qBAHO;IAIP,kBAHS;ECgvHf;ED/uHI;IACE,qBAHO;IAIP,kBAHS;ECovHf;EDnvHI;IACE,qBAHO;IAIP,kBAHS;ECwvHf;EDvvHI;IACE,qBAHO;IAIP,kBAHS;EC4vHf;ED3vHI;IACE,qBAHO;IAIP,mBAHS;ECgwHf;ED/vHI;IACE,qBAHO;IAIP,mBAHS;ECowHf;EDnwHI;IACE,qBAHO;IAIP,mBAHS;ECwwHf;EDvwHI;IACE,qBAHO;IAIP,mBAHS;EC4wHf;ED3wHI;IACE,qBAHO;IAIP,mBAHS;ECgxHf;ED/wHI;IACE,qBAHO;IAIP,mBAHS;ECoxHf;EDnxHI;IACE,qBAHO;IAIP,mBAHS;ECwxHf;EDvxHI;IACE,qBAHO;IAIP,mBAHS;EC4xHf;ED3xHI;IACE,qBAHO;IAIP,mBAHS;ECgyHf;ED/xHI;IACE,qBAHO;IAIP,mBAHS;ECoyHf;EDnyHI;IACE,qBAHO;IAIP,mBAHS;ECwyHf;EDvyHI;IACE,qBAHO;IAIP,mBAHS;EC4yHf;ED3yHI;IACE,qBAHO;IAIP,mBAHS;ECgzHf;ED/yHI;IACE,qBAHO;IAIP,mBAHS;ECozHf;EDnzHI;IACE,qBAHO;IAIP,mBAHS;ECwzHf;EDvzHI;IACE,qBAHO;IAIP,kBAHS;EC4zHf;ED3zHI;IACE,qBAHO;IAIP,kBAHS;ECg0Hf;ED/zHI;IACE,qBAHO;IAIP,kBAHS;ECo0Hf;EDn0HI;IACE,qBAHO;IAIP,kBAHS;ECw0Hf;EDv0HI;IACE,qBAHO;IAIP,kBAHS;EC40Hf;ED30HI;IACE,qBAHO;IAIP,kBAHS;ECg1Hf;ED/0HI;IACE,qBAHO;IAIP,kBAHS;ECo1Hf;EDn1HI;IACE,qBAHO;IAIP,kBAHS;ECw1Hf;EDv1HI;IACE,qBAHO;IAIP,kBAHS;EC41Hf;ED31HI;IACE,qBAHO;IAIP,mBAHS;ECg2Hf;ED/1HI;IACE,qBAHO;IAIP,mBAHS;ECo2Hf;EDn2HI;IACE,qBAHO;IAIP,mBAHS;ECw2Hf;EDv2HI;IACE,qBAHO;IAIP,mBAHS;EC42Hf;ED32HI;IACE,qBAHO;IAIP,mBAHS;ECg3Hf;ED/2HI;IACE,qBAHO;IAIP,mBAHS;ECo3Hf;EDn3HI;IACE,qBAHO;IAIP,mBAHS;ECw3Hf;EDv3HI;IACE,qBAHO;IAIP,mBAHS;EC43Hf;ED33HI;IACE,qBAHO;IAIP,mBAHS;ECg4Hf;ED/3HI;IACE,qBAHO;IAIP,mBAHS;ECo4Hf;EDn4HI;IACE,qBAHO;IAIP,mBAHS;ECw4Hf;EDv4HI;IACE,qBAHO;IAIP,mBAHS;EC44Hf;ED34HI;IACE,qBAHO;IAIP,mBAHS;ECg5Hf;ED/4HI;IACE,qBAHO;IAIP,mBAHS;ECo5Hf;EDn5HI;IACE,qBAHO;IAIP,mBAHS;ECw5Hf;EDv5HI;IACE,qBAHO;IAIP,kBAHS;EC45Hf;ED35HI;IACE,qBAHO;IAIP,kBAHS;ECg6Hf;ED/5HI;IACE,qBAHO;IAIP,kBAHS;ECo6Hf;EDn6HI;IACE,qBAHO;IAIP,kBAHS;ECw6Hf;EDv6HI;IACE,qBAHO;IAIP,kBAHS;EC46Hf;ED36HI;IACE,qBAHO;IAIP,kBAHS;ECg7Hf;ED/6HI;IACE,qBAHO;IAIP,kBAHS;ECo7Hf;EDn7HI;IACE,qBAHO;IAIP,kBAHS;ECw7Hf;EDv7HI;IACE,qBAHO;IAIP,kBAHS;EC47Hf;ED37HI;IACE,qBAHO;IAIP,mBAHS;ECg8Hf;ED/7HI;IACE,qBAHO;IAIP,mBAHS;ECo8Hf;EDn8HI;IACE,qBAHO;IAIP,mBAHS;ECw8Hf;EDv8HI;IACE,qBAHO;IAIP,mBAHS;EC48Hf;ED38HI;IACE,qBAHO;IAIP,mBAHS;ECg9Hf;ED/8HI;IACE,qBAHO;IAIP,mBAHS;ECo9Hf;EDn9HI;IACE,qBAHO;IAIP,mBAHS;ECw9Hf;EDv9HI;IACE,qBAHO;IAIP,mBAHS;EC49Hf;ED39HI;IACE,qBAHO;IAIP,mBAHS;ECg+Hf;ED/9HI;IACE,qBAHO;IAIP,mBAHS;ECo+Hf;EDn+HI;IACE,qBAHO;IAIP,mBAHS;ECw+Hf;EDv+HI;IACE,qBAHO;IAIP,mBAHS;EC4+Hf;ED3+HI;IACE,qBAHO;IAIP,mBAHS;ECg/Hf;ED/+HI;IACE,qBAHO;IAIP,mBAHS;ECo/Hf;EDn/HI;IACE,qBAHO;IAIP,mBAHS;ECw/Hf;EDv/HI;IACE,qBAHO;IAIP,kBAHS;EC4/Hf;ED3/HI;IACE,qBAHO;IAIP,kBAHS;ECggIf;ED//HI;IACE,qBAHO;IAIP,kBAHS;ECogIf;EDngII;IACE,qBAHO;IAIP,kBAHS;ECwgIf;EDvgII;IACE,qBAHO;IAIP,kBAHS;EC4gIf;ED3gII;IACE,qBAHO;IAIP,kBAHS;ECghIf;ED/gII;IACE,qBAHO;IAIP,kBAHS;ECohIf;EDnhII;IACE,qBAHO;IAIP,kBAHS;ECwhIf;EDvhII;IACE,qBAHO;IAIP,kBAHS;EC4hIf;ED3hII;IACE,qBAHO;IAIP,mBAHS;ECgiIf;ED/hII;IACE,qBAHO;IAIP,mBAHS;ECoiIf;EDniII;IACE,qBAHO;IAIP,mBAHS;ECwiIf;EDviII;IACE,qBAHO;IAIP,mBAHS;EC4iIf;ED3iII;IACE,qBAHO;IAIP,mBAHS;ECgjIf;ED/iII;IACE,qBAHO;IAIP,mBAHS;ECojIf;EDnjII;IACE,qBAHO;IAIP,mBAHS;ECwjIf;EDvjII;IACE,qBAHO;IAIP,mBAHS;EC4jIf;ED3jII;IACE,qBAHO;IAIP,mBAHS;ECgkIf;ED/jII;IACE,qBAHO;IAIP,mBAHS;ECokIf;EDnkII;IACE,qBAHO;IAIP,mBAHS;ECwkIf;EDvkII;IACE,qBAHO;IAIP,mBAHS;EC4kIf;ED3kII;IACE,qBAHO;IAIP,mBAHS;ECglIf;ED/kII;IACE,qBAHO;IAIP,mBAHS;EColIf;EDnlII;IACE,qBAHO;IAIP,mBAHS;ECwlIf;EDvlII;IACE,qBAHO;IAIP,kBAHS;EC4lIf;ED3lII;IACE,qBAHO;IAIP,kBAHS;ECgmIf;ED/lII;IACE,qBAHO;IAIP,kBAHS;EComIf;EDnmII;IACE,qBAHO;IAIP,kBAHS;ECwmIf;EDvmII;IACE,qBAHO;IAIP,kBAHS;EC4mIf;ED3mII;IACE,qBAHO;IAIP,kBAHS;ECgnIf;ED/mII;IACE,qBAHO;IAIP,kBAHS;EConIf;EDnnII;IACE,qBAHO;IAIP,kBAHS;ECwnIf;EDvnII;IACE,qBAHO;IAIP,kBAHS;EC4nIf;ED3nII;IACE,qBAHO;IAIP,mBAHS;ECgoIf;ED/nII;IACE,qBAHO;IAIP,mBAHS;ECooIf;EDnoII;IACE,qBAHO;IAIP,mBAHS;ECwoIf;EDvoII;IACE,qBAHO;IAIP,mBAHS;EC4oIf;ED3oII;IACE,qBAHO;IAIP,mBAHS;ECgpIf;ED/oII;IACE,qBAHO;IAIP,mBAHS;ECopIf;EDnpII;IACE,qBAHO;IAIP,mBAHS;ECwpIf;EDvpII;IACE,qBAHO;IAIP,mBAHS;EC4pIf;ED3pII;IACE,qBAHO;IAIP,mBAHS;ECgqIf;ED/pII;IACE,qBAHO;IAIP,mBAHS;ECoqIf;EDnqII;IACE,qBAHO;IAIP,mBAHS;ECwqIf;EDvqII;IACE,qBAHO;IAIP,mBAHS;EC4qIf;ED3qII;IACE,qBAHO;IAIP,mBAHS;ECgrIf;ED/qII;IACE,qBAHO;IAIP,mBAHS;ECorIf;EDnrII;IACE,qBAHO;IAIP,mBAHS;ECwrIf;EDvrII;IACE,qBAHO;IAIP,kBAHS;EC4rIf;ED3rII;IACE,qBAHO;IAIP,kBAHS;ECgsIf;ED/rII;IACE,qBAHO;IAIP,kBAHS;ECosIf;EDnsII;IACE,qBAHO;IAIP,kBAHS;ECwsIf;EDvsII;IACE,qBAHO;IAIP,kBAHS;EC4sIf;ED3sII;IACE,qBAHO;IAIP,kBAHS;ECgtIf;ED/sII;IACE,qBAHO;IAIP,kBAHS;ECotIf;EDntII;IACE,qBAHO;IAIP,kBAHS;ECwtIf;EDvtII;IACE,qBAHO;IAIP,kBAHS;EC4tIf;ED3tII;IACE,qBAHO;IAIP,mBAHS;ECguIf;ED/tII;IACE,qBAHO;IAIP,mBAHS;ECouIf;EDnuII;IACE,qBAHO;IAIP,mBAHS;ECwuIf;EDvuII;IACE,qBAHO;IAIP,mBAHS;EC4uIf;ED3uII;IACE,qBAHO;IAIP,mBAHS;ECgvIf;ED/uII;IACE,qBAHO;IAIP,mBAHS;ECovIf;EDnvII;IACE,qBAHO;IAIP,mBAHS;ECwvIf;EDvvII;IACE,qBAHO;IAIP,mBAHS;EC4vIf;ED3vII;IACE,qBAHO;IAIP,mBAHS;ECgwIf;ED/vII;IACE,qBAHO;IAIP,mBAHS;ECowIf;EDnwII;IACE,qBAHO;IAIP,mBAHS;ECwwIf;EDvwII;IACE,qBAHO;IAIP,mBAHS;EC4wIf;ED3wII;IACE,qBAHO;IAIP,mBAHS;ECgxIf;ED/wII;IACE,qBAHO;IAIP,mBAHS;ECoxIf;EDnxII;IACE,qBAHO;IAIP,mBAHS;ECwxIf;EDvxII;IACE,qBAHO;IAIP,kBAHS;EC4xIf;ED3xII;IACE,qBAHO;IAIP,kBAHS;ECgyIf;ED/xII;IACE,qBAHO;IAIP,kBAHS;ECoyIf;EDnyII;IACE,qBAHO;IAIP,kBAHS;ECwyIf;EDvyII;IACE,qBAHO;IAIP,kBAHS;EC4yIf;ED3yII;IACE,qBAHO;IAIP,kBAHS;ECgzIf;ED/yII;IACE,qBAHO;IAIP,kBAHS;ECozIf;EDnzII;IACE,qBAHO;IAIP,kBAHS;ECwzIf;EDvzII;IACE,qBAHO;IAIP,kBAHS;EC4zIf;ED3zII;IACE,qBAHO;IAIP,mBAHS;ECg0If;ED/zII;IACE,qBAHO;IAIP,mBAHS;ECo0If;EDn0II;IACE,qBAHO;IAIP,mBAHS;ECw0If;EDv0II;IACE,qBAHO;IAIP,mBAHS;EC40If;ED30II;IACE,qBAHO;IAIP,mBAHS;ECg1If;ED/0II;IACE,qBAHO;IAIP,mBAHS;ECo1If;EDn1II;IACE,qBAHO;IAIP,mBAHS;ECw1If;EDv1II;IACE,qBAHO;IAIP,mBAHS;EC41If;ED31II;IACE,qBAHO;IAIP,mBAHS;ECg2If;ED/1II;IACE,qBAHO;IAIP,mBAHS;ECo2If;EDn2II;IACE,qBAHO;IAIP,mBAHS;ECw2If;EDv2II;IACE,qBAHO;IAIP,mBAHS;EC42If;ED32II;IACE,qBAHO;IAIP,mBAHS;ECg3If;ED/2II;IACE,qBAHO;IAIP,mBAHS;ECo3If;EDn3II;IACE,qBAHO;IAIP,mBAHS;ECw3If;EDv3II;IACE,qBAHO;IAIP,kBAHS;EC43If;ED33II;IACE,qBAHO;IAIP,kBAHS;ECg4If;ED/3II;IACE,qBAHO;IAIP,kBAHS;ECo4If;EDn4II;IACE,qBAHO;IAIP,kBAHS;ECw4If;EDv4II;IACE,qBAHO;IAIP,kBAHS;EC44If;ED34II;IACE,qBAHO;IAIP,kBAHS;ECg5If;ED/4II;IACE,qBAHO;IAIP,kBAHS;ECo5If;EDn5II;IACE,qBAHO;IAIP,kBAHS;ECw5If;EDv5II;IACE,qBAHO;IAIP,kBAHS;EC45If;ED35II;IACE,qBAHO;IAIP,mBAHS;ECg6If;ED/5II;IACE,qBAHO;IAIP,mBAHS;ECo6If;EDn6II;IACE,qBAHO;IAIP,mBAHS;ECw6If;EDv6II;IACE,qBAHO;IAIP,mBAHS;EC46If;ED36II;IACE,qBAHO;IAIP,mBAHS;ECg7If;ED/6II;IACE,qBAHO;IAIP,mBAHS;ECo7If;EDn7II;IACE,qBAHO;IAIP,mBAHS;ECw7If;EDv7II;IACE,qBAHO;IAIP,mBAHS;EC47If;ED37II;IACE,qBAHO;IAIP,mBAHS;ECg8If;ED/7II;IACE,qBAHO;IAIP,mBAHS;ECo8If;EDn8II;IACE,qBAHO;IAIP,mBAHS;ECw8If;EDv8II;IACE,qBAHO;IAIP,mBAHS;EC48If;ED38II;IACE,qBAHO;IAIP,mBAHS;ECg9If;ED/8II;IACE,qBAHO;IAIP,mBAHS;ECo9If;EDn9II;IACE,qBAHO;IAIP,mBAHS;ECw9If;EDv9II;IACE,qBAHO;IAIP,kBAHS;EC49If;ED39II;IACE,qBAHO;IAIP,kBAHS;ECg+If;ED/9II;IACE,qBAHO;IAIP,kBAHS;ECo+If;EDn+II;IACE,qBAHO;IAIP,kBAHS;ECw+If;EDv+II;IACE,qBAHO;IAIP,kBAHS;EC4+If;ED3+II;IACE,qBAHO;IAIP,kBAHS;ECg/If;ED/+II;IACE,qBAHO;IAIP,kBAHS;ECo/If;EDn/II;IACE,qBAHO;IAIP,kBAHS;ECw/If;EDv/II;IACE,qBAHO;IAIP,kBAHS;EC4/If;ED3/II;IACE,qBAHO;IAIP,mBAHS;ECggJf;ED//II;IACE,qBAHO;IAIP,mBAHS;ECogJf;EDngJI;IACE,qBAHO;IAIP,mBAHS;ECwgJf;EDvgJI;IACE,qBAHO;IAIP,mBAHS;EC4gJf;ED3gJI;IACE,qBAHO;IAIP,mBAHS;ECghJf;ED/gJI;IACE,qBAHO;IAIP,mBAHS;ECohJf;EDnhJI;IACE,qBAHO;IAIP,mBAHS;ECwhJf;EDvhJI;IACE,qBAHO;IAIP,mBAHS;EC4hJf;ED3hJI;IACE,qBAHO;IAIP,mBAHS;ECgiJf;ED/hJI;IACE,qBAHO;IAIP,mBAHS;ECoiJf;EDniJI;IACE,qBAHO;IAIP,mBAHS;ECwiJf;EDviJI;IACE,qBAHO;IAIP,mBAHS;EC4iJf;ED3iJI;IACE,qBAHO;IAIP,mBAHS;ECgjJf;ED/iJI;IACE,qBAHO;IAIP,mBAHS;ECojJf;EDnjJI;IACE,qBAHO;IAIP,mBAHS;ECwjJf;EDvjJI;IACE,qBAHO;IAIP,kBAHS;EC4jJf;ED3jJI;IACE,qBAHO;IAIP,kBAHS;ECgkJf;ED/jJI;IACE,qBAHO;IAIP,kBAHS;ECokJf;EDnkJI;IACE,qBAHO;IAIP,kBAHS;ECwkJf;EDvkJI;IACE,qBAHO;IAIP,kBAHS;EC4kJf;ED3kJI;IACE,qBAHO;IAIP,kBAHS;ECglJf;ED/kJI;IACE,qBAHO;IAIP,kBAHS;EColJf;EDnlJI;IACE,qBAHO;IAIP,kBAHS;ECwlJf;EDvlJI;IACE,qBAHO;IAIP,kBAHS;EC4lJf;ED3lJI;IACE,qBAHO;IAIP,mBAHS;ECgmJf;ED/lJI;IACE,qBAHO;IAIP,mBAHS;EComJf;EDnmJI;IACE,qBAHO;IAIP,mBAHS;ECwmJf;EDvmJI;IACE,qBAHO;IAIP,mBAHS;EC4mJf;ED3mJI;IACE,qBAHO;IAIP,mBAHS;ECgnJf;ED/mJI;IACE,qBAHO;IAIP,mBAHS;EConJf;EDnnJI;IACE,qBAHO;IAIP,mBAHS;ECwnJf;EDvnJI;IACE,qBAHO;IAIP,mBAHS;EC4nJf;ED3nJI;IACE,qBAHO;IAIP,mBAHS;ECgoJf;ED/nJI;IACE,qBAHO;IAIP,mBAHS;ECooJf;EDnoJI;IACE,qBAHO;IAIP,mBAHS;ECwoJf;EDvoJI;IACE,qBAHO;IAIP,mBAHS;EC4oJf;ED3oJI;IACE,qBAHO;IAIP,mBAHS;ECgpJf;ED/oJI;IACE,qBAHO;IAIP,mBAHS;ECopJf;EDnpJI;IACE,qBAHO;IAIP,mBAHS;ECwpJf;EDvpJI;IACE,qBAHO;IAIP,kBAHS;EC4pJf;ED3pJI;IACE,qBAHO;IAIP,kBAHS;ECgqJf;ED/pJI;IACE,qBAHO;IAIP,kBAHS;ECoqJf;EDnqJI;IACE,qBAHO;IAIP,kBAHS;ECwqJf;EDvqJI;IACE,qBAHO;IAIP,kBAHS;EC4qJf;ED3qJI;IACE,qBAHO;IAIP,kBAHS;ECgrJf;ED/qJI;IACE,qBAHO;IAIP,kBAHS;ECorJf;EDnrJI;IACE,qBAHO;IAIP,kBAHS;ECwrJf;EDvrJI;IACE,qBAHO;IAIP,kBAHS;EC4rJf;ED3rJI;IACE,qBAHO;IAIP,mBAHS;ECgsJf;ED/rJI;IACE,qBAHO;IAIP,mBAHS;ECosJf;EDnsJI;IACE,qBAHO;IAIP,mBAHS;ECwsJf;EDvsJI;IACE,qBAHO;IAIP,mBAHS;EC4sJf;ED3sJI;IACE,qBAHO;IAIP,mBAHS;ECgtJf;ED/sJI;IACE,qBAHO;IAIP,mBAHS;ECotJf;EDntJI;IACE,qBAHO;IAIP,mBAHS;ECwtJf;EDvtJI;IACE,qBAHO;IAIP,mBAHS;EC4tJf;ED3tJI;IACE,qBAHO;IAIP,mBAHS;ECguJf;ED/tJI;IACE,qBAHO;IAIP,mBAHS;ECouJf;EDnuJI;IACE,qBAHO;IAIP,mBAHS;ECwuJf;EDvuJI;IACE,qBAHO;IAIP,mBAHS;EC4uJf;ED3uJI;IACE,qBAHO;IAIP,mBAHS;ECgvJf;ED/uJI;IACE,qBAHO;IAIP,mBAHS;ECovJf;EDnvJI;IACE,qBAHO;IAIP,mBAHS;ECwvJf;EDvvJI;IACE,qBAHO;IAIP,kBAHS;EC4vJf;ED3vJI;IACE,qBAHO;IAIP,kBAHS;ECgwJf;ED/vJI;IACE,qBAHO;IAIP,kBAHS;ECowJf;EDnwJI;IACE,qBAHO;IAIP,kBAHS;ECwwJf;EDvwJI;IACE,qBAHO;IAIP,kBAHS;EC4wJf;ED3wJI;IACE,qBAHO;IAIP,kBAHS;ECgxJf;ED/wJI;IACE,qBAHO;IAIP,kBAHS;ECoxJf;EDnxJI;IACE,qBAHO;IAIP,kBAHS;ECwxJf;EDvxJI;IACE,qBAHO;IAIP,kBAHS;EC4xJf;ED3xJI;IACE,qBAHO;IAIP,mBAHS;ECgyJf;ED/xJI;IACE,qBAHO;IAIP,mBAHS;ECoyJf;EDnyJI;IACE,qBAHO;IAIP,mBAHS;ECwyJf;EDvyJI;IACE,qBAHO;IAIP,mBAHS;EC4yJf;ED3yJI;IACE,qBAHO;IAIP,mBAHS;ECgzJf;ED/yJI;IACE,qBAHO;IAIP,mBAHS;ECozJf;EDnzJI;IACE,qBAHO;IAIP,mBAHS;ECwzJf;EDvzJI;IACE,qBAHO;IAIP,mBAHS;EC4zJf;ED3zJI;IACE,qBAHO;IAIP,mBAHS;ECg0Jf;ED/zJI;IACE,qBAHO;IAIP,mBAHS;ECo0Jf;EDn0JI;IACE,qBAHO;IAIP,mBAHS;ECw0Jf;EDv0JI;IACE,qBAHO;IAIP,mBAHS;EC40Jf;ED30JI;IACE,qBAHO;IAIP,mBAHS;ECg1Jf;ED/0JI;IACE,qBAHO;IAIP,mBAHS;ECo1Jf;EDn1JI;IACE,qBAHO;IAIP,mBAHS;ECw1Jf;AACF;ACr2JE;EFwBI;IACE,oBAHO;IAIP,kBAHS;ECm1Jf;EDl1JI;IACE,oBAHO;IAIP,kBAHS;ECu1Jf;EDt1JI;IACE,oBAHO;IAIP,kBAHS;EC21Jf;ED11JI;IACE,oBAHO;IAIP,kBAHS;EC+1Jf;ED91JI;IACE,oBAHO;IAIP,kBAHS;ECm2Jf;EDl2JI;IACE,oBAHO;IAIP,kBAHS;ECu2Jf;EDt2JI;IACE,oBAHO;IAIP,kBAHS;EC22Jf;ED12JI;IACE,oBAHO;IAIP,kBAHS;EC+2Jf;ED92JI;IACE,oBAHO;IAIP,kBAHS;ECm3Jf;EDl3JI;IACE,oBAHO;IAIP,mBAHS;ECu3Jf;EDt3JI;IACE,oBAHO;IAIP,mBAHS;EC23Jf;ED13JI;IACE,oBAHO;IAIP,mBAHS;EC+3Jf;ED93JI;IACE,oBAHO;IAIP,mBAHS;ECm4Jf;EDl4JI;IACE,oBAHO;IAIP,mBAHS;ECu4Jf;EDt4JI;IACE,oBAHO;IAIP,mBAHS;EC24Jf;ED14JI;IACE,oBAHO;IAIP,mBAHS;EC+4Jf;ED94JI;IACE,oBAHO;IAIP,mBAHS;ECm5Jf;EDl5JI;IACE,oBAHO;IAIP,mBAHS;ECu5Jf;EDt5JI;IACE,oBAHO;IAIP,kBAHS;EC25Jf;ED15JI;IACE,oBAHO;IAIP,kBAHS;EC+5Jf;ED95JI;IACE,oBAHO;IAIP,kBAHS;ECm6Jf;EDl6JI;IACE,oBAHO;IAIP,kBAHS;ECu6Jf;EDt6JI;IACE,oBAHO;IAIP,kBAHS;EC26Jf;ED16JI;IACE,oBAHO;IAIP,kBAHS;EC+6Jf;ED96JI;IACE,oBAHO;IAIP,kBAHS;ECm7Jf;EDl7JI;IACE,oBAHO;IAIP,kBAHS;ECu7Jf;EDt7JI;IACE,oBAHO;IAIP,kBAHS;EC27Jf;ED17JI;IACE,oBAHO;IAIP,mBAHS;EC+7Jf;ED97JI;IACE,oBAHO;IAIP,mBAHS;ECm8Jf;EDl8JI;IACE,oBAHO;IAIP,mBAHS;ECu8Jf;EDt8JI;IACE,oBAHO;IAIP,mBAHS;EC28Jf;ED18JI;IACE,oBAHO;IAIP,mBAHS;EC+8Jf;ED98JI;IACE,oBAHO;IAIP,mBAHS;ECm9Jf;EDl9JI;IACE,oBAHO;IAIP,mBAHS;ECu9Jf;EDt9JI;IACE,oBAHO;IAIP,mBAHS;EC29Jf;ED19JI;IACE,oBAHO;IAIP,mBAHS;EC+9Jf;ED99JI;IACE,oBAHO;IAIP,kBAHS;ECm+Jf;EDl+JI;IACE,oBAHO;IAIP,kBAHS;ECu+Jf;EDt+JI;IACE,oBAHO;IAIP,kBAHS;EC2+Jf;ED1+JI;IACE,oBAHO;IAIP,kBAHS;EC++Jf;ED9+JI;IACE,oBAHO;IAIP,kBAHS;ECm/Jf;EDl/JI;IACE,oBAHO;IAIP,kBAHS;ECu/Jf;EDt/JI;IACE,oBAHO;IAIP,kBAHS;EC2/Jf;ED1/JI;IACE,oBAHO;IAIP,kBAHS;EC+/Jf;ED9/JI;IACE,oBAHO;IAIP,kBAHS;ECmgKf;EDlgKI;IACE,oBAHO;IAIP,mBAHS;ECugKf;EDtgKI;IACE,oBAHO;IAIP,mBAHS;EC2gKf;ED1gKI;IACE,oBAHO;IAIP,mBAHS;EC+gKf;ED9gKI;IACE,oBAHO;IAIP,mBAHS;ECmhKf;EDlhKI;IACE,oBAHO;IAIP,mBAHS;ECuhKf;EDthKI;IACE,oBAHO;IAIP,mBAHS;EC2hKf;ED1hKI;IACE,oBAHO;IAIP,mBAHS;EC+hKf;ED9hKI;IACE,oBAHO;IAIP,mBAHS;ECmiKf;EDliKI;IACE,oBAHO;IAIP,mBAHS;ECuiKf;EDtiKI;IACE,oBAHO;IAIP,kBAHS;EC2iKf;ED1iKI;IACE,oBAHO;IAIP,kBAHS;EC+iKf;ED9iKI;IACE,oBAHO;IAIP,kBAHS;ECmjKf;EDljKI;IACE,oBAHO;IAIP,kBAHS;ECujKf;EDtjKI;IACE,oBAHO;IAIP,kBAHS;EC2jKf;ED1jKI;IACE,oBAHO;IAIP,kBAHS;EC+jKf;ED9jKI;IACE,oBAHO;IAIP,kBAHS;ECmkKf;EDlkKI;IACE,oBAHO;IAIP,kBAHS;ECukKf;EDtkKI;IACE,oBAHO;IAIP,kBAHS;EC2kKf;ED1kKI;IACE,oBAHO;IAIP,mBAHS;EC+kKf;ED9kKI;IACE,oBAHO;IAIP,mBAHS;ECmlKf;EDllKI;IACE,oBAHO;IAIP,mBAHS;ECulKf;EDtlKI;IACE,oBAHO;IAIP,mBAHS;EC2lKf;ED1lKI;IACE,oBAHO;IAIP,mBAHS;EC+lKf;ED9lKI;IACE,oBAHO;IAIP,mBAHS;ECmmKf;EDlmKI;IACE,oBAHO;IAIP,mBAHS;ECumKf;EDtmKI;IACE,oBAHO;IAIP,mBAHS;EC2mKf;ED1mKI;IACE,oBAHO;IAIP,mBAHS;EC+mKf;ED9mKI;IACE,oBAHO;IAIP,kBAHS;ECmnKf;EDlnKI;IACE,oBAHO;IAIP,kBAHS;ECunKf;EDtnKI;IACE,oBAHO;IAIP,kBAHS;EC2nKf;ED1nKI;IACE,oBAHO;IAIP,kBAHS;EC+nKf;ED9nKI;IACE,oBAHO;IAIP,kBAHS;ECmoKf;EDloKI;IACE,oBAHO;IAIP,kBAHS;ECuoKf;EDtoKI;IACE,oBAHO;IAIP,kBAHS;EC2oKf;ED1oKI;IACE,oBAHO;IAIP,kBAHS;EC+oKf;ED9oKI;IACE,oBAHO;IAIP,kBAHS;ECmpKf;EDlpKI;IACE,oBAHO;IAIP,mBAHS;ECupKf;EDtpKI;IACE,oBAHO;IAIP,mBAHS;EC2pKf;ED1pKI;IACE,oBAHO;IAIP,mBAHS;EC+pKf;ED9pKI;IACE,oBAHO;IAIP,mBAHS;ECmqKf;EDlqKI;IACE,oBAHO;IAIP,mBAHS;ECuqKf;EDtqKI;IACE,oBAHO;IAIP,mBAHS;EC2qKf;ED1qKI;IACE,oBAHO;IAIP,mBAHS;EC+qKf;ED9qKI;IACE,oBAHO;IAIP,mBAHS;ECmrKf;EDlrKI;IACE,oBAHO;IAIP,mBAHS;ECurKf;EDtrKI;IACE,oBAHO;IAIP,kBAHS;EC2rKf;ED1rKI;IACE,oBAHO;IAIP,kBAHS;EC+rKf;ED9rKI;IACE,oBAHO;IAIP,kBAHS;ECmsKf;EDlsKI;IACE,oBAHO;IAIP,kBAHS;ECusKf;EDtsKI;IACE,oBAHO;IAIP,kBAHS;EC2sKf;ED1sKI;IACE,oBAHO;IAIP,kBAHS;EC+sKf;ED9sKI;IACE,oBAHO;IAIP,kBAHS;ECmtKf;EDltKI;IACE,oBAHO;IAIP,kBAHS;ECutKf;EDttKI;IACE,oBAHO;IAIP,kBAHS;EC2tKf;ED1tKI;IACE,oBAHO;IAIP,mBAHS;EC+tKf;ED9tKI;IACE,oBAHO;IAIP,mBAHS;ECmuKf;EDluKI;IACE,oBAHO;IAIP,mBAHS;ECuuKf;EDtuKI;IACE,oBAHO;IAIP,mBAHS;EC2uKf;ED1uKI;IACE,oBAHO;IAIP,mBAHS;EC+uKf;ED9uKI;IACE,oBAHO;IAIP,mBAHS;ECmvKf;EDlvKI;IACE,oBAHO;IAIP,mBAHS;ECuvKf;EDtvKI;IACE,oBAHO;IAIP,mBAHS;EC2vKf;ED1vKI;IACE,oBAHO;IAIP,mBAHS;EC+vKf;ED9vKI;IACE,oBAHO;IAIP,kBAHS;ECmwKf;EDlwKI;IACE,oBAHO;IAIP,kBAHS;ECuwKf;EDtwKI;IACE,oBAHO;IAIP,kBAHS;EC2wKf;ED1wKI;IACE,oBAHO;IAIP,kBAHS;EC+wKf;ED9wKI;IACE,oBAHO;IAIP,kBAHS;ECmxKf;EDlxKI;IACE,oBAHO;IAIP,kBAHS;ECuxKf;EDtxKI;IACE,oBAHO;IAIP,kBAHS;EC2xKf;ED1xKI;IACE,oBAHO;IAIP,kBAHS;EC+xKf;ED9xKI;IACE,oBAHO;IAIP,kBAHS;ECmyKf;EDlyKI;IACE,oBAHO;IAIP,mBAHS;ECuyKf;EDtyKI;IACE,oBAHO;IAIP,mBAHS;EC2yKf;ED1yKI;IACE,oBAHO;IAIP,mBAHS;EC+yKf;ED9yKI;IACE,oBAHO;IAIP,mBAHS;ECmzKf;EDlzKI;IACE,oBAHO;IAIP,mBAHS;ECuzKf;EDtzKI;IACE,oBAHO;IAIP,mBAHS;EC2zKf;ED1zKI;IACE,oBAHO;IAIP,mBAHS;EC+zKf;ED9zKI;IACE,oBAHO;IAIP,mBAHS;ECm0Kf;EDl0KI;IACE,oBAHO;IAIP,mBAHS;ECu0Kf;EDt0KI;IACE,oBAHO;IAIP,kBAHS;EC20Kf;ED10KI;IACE,oBAHO;IAIP,kBAHS;EC+0Kf;ED90KI;IACE,oBAHO;IAIP,kBAHS;ECm1Kf;EDl1KI;IACE,oBAHO;IAIP,kBAHS;ECu1Kf;EDt1KI;IACE,oBAHO;IAIP,kBAHS;EC21Kf;ED11KI;IACE,oBAHO;IAIP,kBAHS;EC+1Kf;ED91KI;IACE,oBAHO;IAIP,kBAHS;ECm2Kf;EDl2KI;IACE,oBAHO;IAIP,kBAHS;ECu2Kf;EDt2KI;IACE,oBAHO;IAIP,kBAHS;EC22Kf;ED12KI;IACE,oBAHO;IAIP,mBAHS;EC+2Kf;ED92KI;IACE,oBAHO;IAIP,mBAHS;ECm3Kf;EDl3KI;IACE,oBAHO;IAIP,mBAHS;ECu3Kf;EDt3KI;IACE,oBAHO;IAIP,mBAHS;EC23Kf;ED13KI;IACE,oBAHO;IAIP,mBAHS;EC+3Kf;ED93KI;IACE,oBAHO;IAIP,mBAHS;ECm4Kf;EDl4KI;IACE,oBAHO;IAIP,mBAHS;ECu4Kf;EDt4KI;IACE,oBAHO;IAIP,mBAHS;EC24Kf;ED14KI;IACE,oBAHO;IAIP,mBAHS;EC+4Kf;ED94KI;IACE,oBAHO;IAIP,kBAHS;ECm5Kf;EDl5KI;IACE,oBAHO;IAIP,kBAHS;ECu5Kf;EDt5KI;IACE,oBAHO;IAIP,kBAHS;EC25Kf;ED15KI;IACE,oBAHO;IAIP,kBAHS;EC+5Kf;ED95KI;IACE,oBAHO;IAIP,kBAHS;ECm6Kf;EDl6KI;IACE,oBAHO;IAIP,kBAHS;ECu6Kf;EDt6KI;IACE,oBAHO;IAIP,kBAHS;EC26Kf;ED16KI;IACE,oBAHO;IAIP,kBAHS;EC+6Kf;ED96KI;IACE,oBAHO;IAIP,kBAHS;ECm7Kf;EDl7KI;IACE,oBAHO;IAIP,mBAHS;ECu7Kf;EDt7KI;IACE,oBAHO;IAIP,mBAHS;EC27Kf;ED17KI;IACE,oBAHO;IAIP,mBAHS;EC+7Kf;ED97KI;IACE,oBAHO;IAIP,mBAHS;ECm8Kf;EDl8KI;IACE,oBAHO;IAIP,mBAHS;ECu8Kf;EDt8KI;IACE,oBAHO;IAIP,mBAHS;EC28Kf;ED18KI;IACE,oBAHO;IAIP,mBAHS;EC+8Kf;ED98KI;IACE,oBAHO;IAIP,mBAHS;ECm9Kf;EDl9KI;IACE,oBAHO;IAIP,mBAHS;ECu9Kf;EDt9KI;IACE,qBAHO;IAIP,kBAHS;EC29Kf;ED19KI;IACE,qBAHO;IAIP,kBAHS;EC+9Kf;ED99KI;IACE,qBAHO;IAIP,kBAHS;ECm+Kf;EDl+KI;IACE,qBAHO;IAIP,kBAHS;ECu+Kf;EDt+KI;IACE,qBAHO;IAIP,kBAHS;EC2+Kf;ED1+KI;IACE,qBAHO;IAIP,kBAHS;EC++Kf;ED9+KI;IACE,qBAHO;IAIP,kBAHS;ECm/Kf;EDl/KI;IACE,qBAHO;IAIP,kBAHS;ECu/Kf;EDt/KI;IACE,qBAHO;IAIP,kBAHS;EC2/Kf;ED1/KI;IACE,qBAHO;IAIP,mBAHS;EC+/Kf;ED9/KI;IACE,qBAHO;IAIP,mBAHS;ECmgLf;EDlgLI;IACE,qBAHO;IAIP,mBAHS;ECugLf;EDtgLI;IACE,qBAHO;IAIP,mBAHS;EC2gLf;ED1gLI;IACE,qBAHO;IAIP,mBAHS;EC+gLf;ED9gLI;IACE,qBAHO;IAIP,mBAHS;ECmhLf;EDlhLI;IACE,qBAHO;IAIP,mBAHS;ECuhLf;EDthLI;IACE,qBAHO;IAIP,mBAHS;EC2hLf;ED1hLI;IACE,qBAHO;IAIP,mBAHS;EC+hLf;ED9hLI;IACE,qBAHO;IAIP,kBAHS;ECmiLf;EDliLI;IACE,qBAHO;IAIP,kBAHS;ECuiLf;EDtiLI;IACE,qBAHO;IAIP,kBAHS;EC2iLf;ED1iLI;IACE,qBAHO;IAIP,kBAHS;EC+iLf;ED9iLI;IACE,qBAHO;IAIP,kBAHS;ECmjLf;EDljLI;IACE,qBAHO;IAIP,kBAHS;ECujLf;EDtjLI;IACE,qBAHO;IAIP,kBAHS;EC2jLf;ED1jLI;IACE,qBAHO;IAIP,kBAHS;EC+jLf;ED9jLI;IACE,qBAHO;IAIP,kBAHS;ECmkLf;EDlkLI;IACE,qBAHO;IAIP,mBAHS;ECukLf;EDtkLI;IACE,qBAHO;IAIP,mBAHS;EC2kLf;ED1kLI;IACE,qBAHO;IAIP,mBAHS;EC+kLf;ED9kLI;IACE,qBAHO;IAIP,mBAHS;ECmlLf;EDllLI;IACE,qBAHO;IAIP,mBAHS;ECulLf;EDtlLI;IACE,qBAHO;IAIP,mBAHS;EC2lLf;ED1lLI;IACE,qBAHO;IAIP,mBAHS;EC+lLf;ED9lLI;IACE,qBAHO;IAIP,mBAHS;ECmmLf;EDlmLI;IACE,qBAHO;IAIP,mBAHS;ECumLf;EDtmLI;IACE,qBAHO;IAIP,kBAHS;EC2mLf;ED1mLI;IACE,qBAHO;IAIP,kBAHS;EC+mLf;ED9mLI;IACE,qBAHO;IAIP,kBAHS;ECmnLf;EDlnLI;IACE,qBAHO;IAIP,kBAHS;ECunLf;EDtnLI;IACE,qBAHO;IAIP,kBAHS;EC2nLf;ED1nLI;IACE,qBAHO;IAIP,kBAHS;EC+nLf;ED9nLI;IACE,qBAHO;IAIP,kBAHS;ECmoLf;EDloLI;IACE,qBAHO;IAIP,kBAHS;ECuoLf;EDtoLI;IACE,qBAHO;IAIP,kBAHS;EC2oLf;ED1oLI;IACE,qBAHO;IAIP,mBAHS;EC+oLf;ED9oLI;IACE,qBAHO;IAIP,mBAHS;ECmpLf;EDlpLI;IACE,qBAHO;IAIP,mBAHS;ECupLf;EDtpLI;IACE,qBAHO;IAIP,mBAHS;EC2pLf;ED1pLI;IACE,qBAHO;IAIP,mBAHS;EC+pLf;ED9pLI;IACE,qBAHO;IAIP,mBAHS;ECmqLf;EDlqLI;IACE,qBAHO;IAIP,mBAHS;ECuqLf;EDtqLI;IACE,qBAHO;IAIP,mBAHS;EC2qLf;ED1qLI;IACE,qBAHO;IAIP,mBAHS;EC+qLf;ED9qLI;IACE,qBAHO;IAIP,kBAHS;ECmrLf;EDlrLI;IACE,qBAHO;IAIP,kBAHS;ECurLf;EDtrLI;IACE,qBAHO;IAIP,kBAHS;EC2rLf;ED1rLI;IACE,qBAHO;IAIP,kBAHS;EC+rLf;ED9rLI;IACE,qBAHO;IAIP,kBAHS;ECmsLf;EDlsLI;IACE,qBAHO;IAIP,kBAHS;ECusLf;EDtsLI;IACE,qBAHO;IAIP,kBAHS;EC2sLf;ED1sLI;IACE,qBAHO;IAIP,kBAHS;EC+sLf;ED9sLI;IACE,qBAHO;IAIP,kBAHS;ECmtLf;EDltLI;IACE,qBAHO;IAIP,mBAHS;ECutLf;EDttLI;IACE,qBAHO;IAIP,mBAHS;EC2tLf;ED1tLI;IACE,qBAHO;IAIP,mBAHS;EC+tLf;ED9tLI;IACE,qBAHO;IAIP,mBAHS;ECmuLf;EDluLI;IACE,qBAHO;IAIP,mBAHS;ECuuLf;EDtuLI;IACE,qBAHO;IAIP,mBAHS;EC2uLf;ED1uLI;IACE,qBAHO;IAIP,mBAHS;EC+uLf;ED9uLI;IACE,qBAHO;IAIP,mBAHS;ECmvLf;EDlvLI;IACE,qBAHO;IAIP,mBAHS;ECuvLf;EDtvLI;IACE,qBAHO;IAIP,kBAHS;EC2vLf;ED1vLI;IACE,qBAHO;IAIP,kBAHS;EC+vLf;ED9vLI;IACE,qBAHO;IAIP,kBAHS;ECmwLf;EDlwLI;IACE,qBAHO;IAIP,kBAHS;ECuwLf;EDtwLI;IACE,qBAHO;IAIP,kBAHS;EC2wLf;ED1wLI;IACE,qBAHO;IAIP,kBAHS;EC+wLf;ED9wLI;IACE,qBAHO;IAIP,kBAHS;ECmxLf;EDlxLI;IACE,qBAHO;IAIP,kBAHS;ECuxLf;EDtxLI;IACE,qBAHO;IAIP,kBAHS;EC2xLf;ED1xLI;IACE,qBAHO;IAIP,mBAHS;EC+xLf;ED9xLI;IACE,qBAHO;IAIP,mBAHS;ECmyLf;EDlyLI;IACE,qBAHO;IAIP,mBAHS;ECuyLf;EDtyLI;IACE,qBAHO;IAIP,mBAHS;EC2yLf;ED1yLI;IACE,qBAHO;IAIP,mBAHS;EC+yLf;ED9yLI;IACE,qBAHO;IAIP,mBAHS;ECmzLf;EDlzLI;IACE,qBAHO;IAIP,mBAHS;ECuzLf;EDtzLI;IACE,qBAHO;IAIP,mBAHS;EC2zLf;ED1zLI;IACE,qBAHO;IAIP,mBAHS;EC+zLf;ED9zLI;IACE,qBAHO;IAIP,kBAHS;ECm0Lf;EDl0LI;IACE,qBAHO;IAIP,kBAHS;ECu0Lf;EDt0LI;IACE,qBAHO;IAIP,kBAHS;EC20Lf;ED10LI;IACE,qBAHO;IAIP,kBAHS;EC+0Lf;ED90LI;IACE,qBAHO;IAIP,kBAHS;ECm1Lf;EDl1LI;IACE,qBAHO;IAIP,kBAHS;ECu1Lf;EDt1LI;IACE,qBAHO;IAIP,kBAHS;EC21Lf;ED11LI;IACE,qBAHO;IAIP,kBAHS;EC+1Lf;ED91LI;IACE,qBAHO;IAIP,kBAHS;ECm2Lf;EDl2LI;IACE,qBAHO;IAIP,mBAHS;ECu2Lf;EDt2LI;IACE,qBAHO;IAIP,mBAHS;EC22Lf;ED12LI;IACE,qBAHO;IAIP,mBAHS;EC+2Lf;ED92LI;IACE,qBAHO;IAIP,mBAHS;ECm3Lf;EDl3LI;IACE,qBAHO;IAIP,mBAHS;ECu3Lf;EDt3LI;IACE,qBAHO;IAIP,mBAHS;EC23Lf;ED13LI;IACE,qBAHO;IAIP,mBAHS;EC+3Lf;ED93LI;IACE,qBAHO;IAIP,mBAHS;ECm4Lf;EDl4LI;IACE,qBAHO;IAIP,mBAHS;ECu4Lf;EDt4LI;IACE,qBAHO;IAIP,kBAHS;EC24Lf;ED14LI;IACE,qBAHO;IAIP,kBAHS;EC+4Lf;ED94LI;IACE,qBAHO;IAIP,kBAHS;ECm5Lf;EDl5LI;IACE,qBAHO;IAIP,kBAHS;ECu5Lf;EDt5LI;IACE,qBAHO;IAIP,kBAHS;EC25Lf;ED15LI;IACE,qBAHO;IAIP,kBAHS;EC+5Lf;ED95LI;IACE,qBAHO;IAIP,kBAHS;ECm6Lf;EDl6LI;IACE,qBAHO;IAIP,kBAHS;ECu6Lf;EDt6LI;IACE,qBAHO;IAIP,kBAHS;EC26Lf;ED16LI;IACE,qBAHO;IAIP,mBAHS;EC+6Lf;ED96LI;IACE,qBAHO;IAIP,mBAHS;ECm7Lf;EDl7LI;IACE,qBAHO;IAIP,mBAHS;ECu7Lf;EDt7LI;IACE,qBAHO;IAIP,mBAHS;EC27Lf;ED17LI;IACE,qBAHO;IAIP,mBAHS;EC+7Lf;ED97LI;IACE,qBAHO;IAIP,mBAHS;ECm8Lf;EDl8LI;IACE,qBAHO;IAIP,mBAHS;ECu8Lf;EDt8LI;IACE,qBAHO;IAIP,mBAHS;EC28Lf;ED18LI;IACE,qBAHO;IAIP,mBAHS;EC+8Lf;ED98LI;IACE,qBAHO;IAIP,kBAHS;ECm9Lf;EDl9LI;IACE,qBAHO;IAIP,kBAHS;ECu9Lf;EDt9LI;IACE,qBAHO;IAIP,kBAHS;EC29Lf;ED19LI;IACE,qBAHO;IAIP,kBAHS;EC+9Lf;ED99LI;IACE,qBAHO;IAIP,kBAHS;ECm+Lf;EDl+LI;IACE,qBAHO;IAIP,kBAHS;ECu+Lf;EDt+LI;IACE,qBAHO;IAIP,kBAHS;EC2+Lf;ED1+LI;IACE,qBAHO;IAIP,kBAHS;EC++Lf;ED9+LI;IACE,qBAHO;IAIP,kBAHS;ECm/Lf;EDl/LI;IACE,qBAHO;IAIP,mBAHS;ECu/Lf;EDt/LI;IACE,qBAHO;IAIP,mBAHS;EC2/Lf;ED1/LI;IACE,qBAHO;IAIP,mBAHS;EC+/Lf;ED9/LI;IACE,qBAHO;IAIP,mBAHS;ECmgMf;EDlgMI;IACE,qBAHO;IAIP,mBAHS;ECugMf;EDtgMI;IACE,qBAHO;IAIP,mBAHS;EC2gMf;ED1gMI;IACE,qBAHO;IAIP,mBAHS;EC+gMf;ED9gMI;IACE,qBAHO;IAIP,mBAHS;ECmhMf;EDlhMI;IACE,qBAHO;IAIP,mBAHS;ECuhMf;AACF;ACtjME;EF2CI;IACE,oBAHO;IAIP,kBAHS;ECihMf;EDhhMI;IACE,oBAHO;IAIP,kBAHS;ECqhMf;EDphMI;IACE,oBAHO;IAIP,kBAHS;ECyhMf;EDxhMI;IACE,oBAHO;IAIP,kBAHS;EC6hMf;ED5hMI;IACE,oBAHO;IAIP,kBAHS;ECiiMf;EDhiMI;IACE,oBAHO;IAIP,kBAHS;ECqiMf;EDpiMI;IACE,oBAHO;IAIP,kBAHS;ECyiMf;EDxiMI;IACE,oBAHO;IAIP,kBAHS;EC6iMf;ED5iMI;IACE,oBAHO;IAIP,kBAHS;ECijMf;EDhjMI;IACE,oBAHO;IAIP,mBAHS;ECqjMf;EDpjMI;IACE,oBAHO;IAIP,mBAHS;ECyjMf;EDxjMI;IACE,oBAHO;IAIP,mBAHS;EC6jMf;ED5jMI;IACE,oBAHO;IAIP,kBAHS;ECikMf;EDhkMI;IACE,oBAHO;IAIP,kBAHS;ECqkMf;EDpkMI;IACE,oBAHO;IAIP,kBAHS;ECykMf;EDxkMI;IACE,oBAHO;IAIP,kBAHS;EC6kMf;ED5kMI;IACE,oBAHO;IAIP,kBAHS;ECilMf;EDhlMI;IACE,oBAHO;IAIP,kBAHS;ECqlMf;EDplMI;IACE,oBAHO;IAIP,kBAHS;ECylMf;EDxlMI;IACE,oBAHO;IAIP,kBAHS;EC6lMf;ED5lMI;IACE,oBAHO;IAIP,kBAHS;ECimMf;EDhmMI;IACE,oBAHO;IAIP,mBAHS;ECqmMf;EDpmMI;IACE,oBAHO;IAIP,mBAHS;ECymMf;EDxmMI;IACE,oBAHO;IAIP,mBAHS;EC6mMf;ED5mMI;IACE,oBAHO;IAIP,kBAHS;ECinMf;EDhnMI;IACE,oBAHO;IAIP,kBAHS;ECqnMf;EDpnMI;IACE,oBAHO;IAIP,kBAHS;ECynMf;EDxnMI;IACE,oBAHO;IAIP,kBAHS;EC6nMf;ED5nMI;IACE,oBAHO;IAIP,kBAHS;ECioMf;EDhoMI;IACE,oBAHO;IAIP,kBAHS;ECqoMf;EDpoMI;IACE,oBAHO;IAIP,kBAHS;ECyoMf;EDxoMI;IACE,oBAHO;IAIP,kBAHS;EC6oMf;ED5oMI;IACE,oBAHO;IAIP,kBAHS;ECipMf;EDhpMI;IACE,oBAHO;IAIP,mBAHS;ECqpMf;EDppMI;IACE,oBAHO;IAIP,mBAHS;ECypMf;EDxpMI;IACE,oBAHO;IAIP,mBAHS;EC6pMf;ED5pMI;IACE,oBAHO;IAIP,kBAHS;ECiqMf;EDhqMI;IACE,oBAHO;IAIP,kBAHS;ECqqMf;EDpqMI;IACE,oBAHO;IAIP,kBAHS;ECyqMf;EDxqMI;IACE,oBAHO;IAIP,kBAHS;EC6qMf;ED5qMI;IACE,oBAHO;IAIP,kBAHS;ECirMf;EDhrMI;IACE,oBAHO;IAIP,kBAHS;ECqrMf;EDprMI;IACE,oBAHO;IAIP,kBAHS;ECyrMf;EDxrMI;IACE,oBAHO;IAIP,kBAHS;EC6rMf;ED5rMI;IACE,oBAHO;IAIP,kBAHS;ECisMf;EDhsMI;IACE,oBAHO;IAIP,mBAHS;ECqsMf;EDpsMI;IACE,oBAHO;IAIP,mBAHS;ECysMf;EDxsMI;IACE,oBAHO;IAIP,mBAHS;EC6sMf;ED5sMI;IACE,oBAHO;IAIP,kBAHS;ECitMf;EDhtMI;IACE,oBAHO;IAIP,kBAHS;ECqtMf;EDptMI;IACE,oBAHO;IAIP,kBAHS;ECytMf;EDxtMI;IACE,oBAHO;IAIP,kBAHS;EC6tMf;ED5tMI;IACE,oBAHO;IAIP,kBAHS;ECiuMf;EDhuMI;IACE,oBAHO;IAIP,kBAHS;ECquMf;EDpuMI;IACE,oBAHO;IAIP,kBAHS;ECyuMf;EDxuMI;IACE,oBAHO;IAIP,kBAHS;EC6uMf;ED5uMI;IACE,oBAHO;IAIP,kBAHS;ECivMf;EDhvMI;IACE,oBAHO;IAIP,mBAHS;ECqvMf;EDpvMI;IACE,oBAHO;IAIP,mBAHS;ECyvMf;EDxvMI;IACE,oBAHO;IAIP,mBAHS;EC6vMf;ED5vMI;IACE,oBAHO;IAIP,kBAHS;ECiwMf;EDhwMI;IACE,oBAHO;IAIP,kBAHS;ECqwMf;EDpwMI;IACE,oBAHO;IAIP,kBAHS;ECywMf;EDxwMI;IACE,oBAHO;IAIP,kBAHS;EC6wMf;ED5wMI;IACE,oBAHO;IAIP,kBAHS;ECixMf;EDhxMI;IACE,oBAHO;IAIP,kBAHS;ECqxMf;EDpxMI;IACE,oBAHO;IAIP,kBAHS;ECyxMf;EDxxMI;IACE,oBAHO;IAIP,kBAHS;EC6xMf;ED5xMI;IACE,oBAHO;IAIP,kBAHS;ECiyMf;EDhyMI;IACE,oBAHO;IAIP,mBAHS;ECqyMf;EDpyMI;IACE,oBAHO;IAIP,mBAHS;ECyyMf;EDxyMI;IACE,oBAHO;IAIP,mBAHS;EC6yMf;ED5yMI;IACE,oBAHO;IAIP,kBAHS;ECizMf;EDhzMI;IACE,oBAHO;IAIP,kBAHS;ECqzMf;EDpzMI;IACE,oBAHO;IAIP,kBAHS;ECyzMf;EDxzMI;IACE,oBAHO;IAIP,kBAHS;EC6zMf;ED5zMI;IACE,oBAHO;IAIP,kBAHS;ECi0Mf;EDh0MI;IACE,oBAHO;IAIP,kBAHS;ECq0Mf;EDp0MI;IACE,oBAHO;IAIP,kBAHS;ECy0Mf;EDx0MI;IACE,oBAHO;IAIP,kBAHS;EC60Mf;ED50MI;IACE,oBAHO;IAIP,kBAHS;ECi1Mf;EDh1MI;IACE,oBAHO;IAIP,mBAHS;ECq1Mf;EDp1MI;IACE,oBAHO;IAIP,mBAHS;ECy1Mf;EDx1MI;IACE,oBAHO;IAIP,mBAHS;EC61Mf;ED51MI;IACE,oBAHO;IAIP,kBAHS;ECi2Mf;EDh2MI;IACE,oBAHO;IAIP,kBAHS;ECq2Mf;EDp2MI;IACE,oBAHO;IAIP,kBAHS;ECy2Mf;EDx2MI;IACE,oBAHO;IAIP,kBAHS;EC62Mf;ED52MI;IACE,oBAHO;IAIP,kBAHS;ECi3Mf;EDh3MI;IACE,oBAHO;IAIP,kBAHS;ECq3Mf;EDp3MI;IACE,oBAHO;IAIP,kBAHS;ECy3Mf;EDx3MI;IACE,oBAHO;IAIP,kBAHS;EC63Mf;ED53MI;IACE,oBAHO;IAIP,kBAHS;ECi4Mf;EDh4MI;IACE,oBAHO;IAIP,mBAHS;ECq4Mf;EDp4MI;IACE,oBAHO;IAIP,mBAHS;ECy4Mf;EDx4MI;IACE,oBAHO;IAIP,mBAHS;EC64Mf;ED54MI;IACE,oBAHO;IAIP,kBAHS;ECi5Mf;EDh5MI;IACE,oBAHO;IAIP,kBAHS;ECq5Mf;EDp5MI;IACE,oBAHO;IAIP,kBAHS;ECy5Mf;EDx5MI;IACE,oBAHO;IAIP,kBAHS;EC65Mf;ED55MI;IACE,oBAHO;IAIP,kBAHS;ECi6Mf;EDh6MI;IACE,oBAHO;IAIP,kBAHS;ECq6Mf;EDp6MI;IACE,oBAHO;IAIP,kBAHS;ECy6Mf;EDx6MI;IACE,oBAHO;IAIP,kBAHS;EC66Mf;ED56MI;IACE,oBAHO;IAIP,kBAHS;ECi7Mf;EDh7MI;IACE,oBAHO;IAIP,mBAHS;ECq7Mf;EDp7MI;IACE,oBAHO;IAIP,mBAHS;ECy7Mf;EDx7MI;IACE,oBAHO;IAIP,mBAHS;EC67Mf;ED57MI;IACE,qBAHO;IAIP,kBAHS;ECi8Mf;EDh8MI;IACE,qBAHO;IAIP,kBAHS;ECq8Mf;EDp8MI;IACE,qBAHO;IAIP,kBAHS;ECy8Mf;EDx8MI;IACE,qBAHO;IAIP,kBAHS;EC68Mf;ED58MI;IACE,qBAHO;IAIP,kBAHS;ECi9Mf;EDh9MI;IACE,qBAHO;IAIP,kBAHS;ECq9Mf;EDp9MI;IACE,qBAHO;IAIP,kBAHS;ECy9Mf;EDx9MI;IACE,qBAHO;IAIP,kBAHS;EC69Mf;ED59MI;IACE,qBAHO;IAIP,kBAHS;ECi+Mf;EDh+MI;IACE,qBAHO;IAIP,mBAHS;ECq+Mf;EDp+MI;IACE,qBAHO;IAIP,mBAHS;ECy+Mf;EDx+MI;IACE,qBAHO;IAIP,mBAHS;EC6+Mf;ED5+MI;IACE,qBAHO;IAIP,kBAHS;ECi/Mf;EDh/MI;IACE,qBAHO;IAIP,kBAHS;ECq/Mf;EDp/MI;IACE,qBAHO;IAIP,kBAHS;ECy/Mf;EDx/MI;IACE,qBAHO;IAIP,kBAHS;EC6/Mf;ED5/MI;IACE,qBAHO;IAIP,kBAHS;ECigNf;EDhgNI;IACE,qBAHO;IAIP,kBAHS;ECqgNf;EDpgNI;IACE,qBAHO;IAIP,kBAHS;ECygNf;EDxgNI;IACE,qBAHO;IAIP,kBAHS;EC6gNf;ED5gNI;IACE,qBAHO;IAIP,kBAHS;ECihNf;EDhhNI;IACE,qBAHO;IAIP,mBAHS;ECqhNf;EDphNI;IACE,qBAHO;IAIP,mBAHS;ECyhNf;EDxhNI;IACE,qBAHO;IAIP,mBAHS;EC6hNf;AACF;ADrhNA;EACE,aAAA;EACA,eAAA;EACA,mBAAA;ACuhNF;;AErmNA;;EAEE,WAAA;EAEA,SAAA;EACA,UAAA;AFumNF;;AEpmNA;EACE,gBAAA;EACA,kCAAA;EACA,mCAAA;EACA,4CCLK;EDML,eAAA;AFumNF;;AEpmNA;EACE,sBAAA;AFumNF;;AEpmNA;EDjBE,kBAAA;EACA,UAAA;EACA,WAAA;EACA,UAAA;EACA,gBAAA;EACA,SAAA;EACA,sBAAA;EACA,oBAAA;ADynNF;;AE3mNA;EACE,kBAAA;EDiDA,WAAA;EAEA,gBAAA;EACA,iBAAA;EACA,kBAAA;AD6jNF;;AE9mNA;EACE,SAAA;AFinNF;;AE9mNA;EACE,kBAAA;AFinNF;;AE/mNA;EACE,aAAA;AFknNF;;ACxnNE;ECSF;IAEI,aAAA;EFknNF;AACF;;AE/mNA;EACE,aAAA;AFknNF;ACloNE;ECeF;IAII,cAAA;EFmnNF;AACF;AC9oNE;ECsBF;IAQI,aAAA;EFonNF;AACF;;AClnNE;ECCF;IAEI,aAAA;EFonNF;AACF;;AEhnNE;EACE,cCjEK;AHorNT;;AE9mNE;EAEE,+BChEM;EDiEN,gBAAA;AFgnNJ;AE7mNE;EACE,4CCvEG;AHsrNP;AE5mNE;EACE,kBAAA;EACA,4BC3EQ;AHyrNZ;AE1mNE;EACE,yBAAA;AF4mNJ;;AExmNA;EACE,eAAA;EACA,gBAAA;EACA,oBAAA;KAAA,iBAAA;AF2mNF;;AExmNA;EACE,mBAAA;AF2mNF;;AExmNA;EACE,eAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,eAAA;EACA,mBAAA;EACA,gBAAA;AF2mNF;;AIztNA;EACE,mBAAA;AJ4tNF;AI3tNE;EACE,kBAAA;EACA,aAAA;EACA,eAAA;EACA,uBAAA;AJ6tNJ;AI1tNE;EACE,aAAA;EACA,eAAA;EACA,8BAAA;EACA,eAAA;EACA,2BAAA;AJ4tNJ;AIztNE;EACE,oBAAA;EACA,YAAA;EACA,YAAA;AJ2tNJ;AIvtNI;EACE,SAAA;EACA,UAAA;EACA,gBAAA;EACA,aAAA;EACA,mBAAA;AJytNN;AIvtNM;EACE,sBAAA;AJytNR;AIttNM;EACE,4CD7BD;EC8BC,oBAAA;EACA,qBAAA;EACA,YAAA;EACA,qBAAA;AJwtNR;;AKhwNA;EACE,kBAAA;EACA,mBAAA;EACA,UAAA;ALmwNF;AKlwNE;EACE,UAAA;EACA,YAAA;EACA,cAAA;ALowNJ;AKlwNI;EALF;IAMI,YAAA;IACA,YAAA;ELqwNJ;AACF;AKlwNE;EACE,aAAA;EACA,eAAA;EACA,mBAAA;EACA,8BAAA;EAEA,cAAA;ALmwNJ;AKjwNI;EARF;IASM,gBAAA;ELowNN;AACF;AKjwNE;EACE,eAAA;EACA,yCAAA;EACA,gBAAA;EACA,gBAAA;EACA,+BFxBM;EEyBN,iBAAA;EACA,SAAA;ALmwNJ;AKjwNI;EATF;IAUI,cAAA;ELowNJ;AACF;AKjwNE;EACE,kBAAA;EACA,SAAA;EACA,OAAA;EACA,2BAAA;EACA,eAAA;ALmwNJ;AKhwNE;EACE,kBAAA;EACA,SAAA;EACA,QAAA;EACA,sCAAA;EACA,eAAA;ALkwNJ;;AMzzNA;EACE,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EAEA,eAAA;EACA,iBAAA;EACA,kBAAA;AN2zNF;AMzzNE;EAVF;IAWI,iBAAA;EN4zNF;AACF;AM3zNE;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,gBAAA;AN6zNJ;AM5zNI;EACE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,sBAAA;EACA,4BAAA;EACA,2BAAA;EACA,sBAAA;AN8zNN;AM5zNI;EACE,gCAAA;AN8zNN;AM5zNI;EACE,kBAAA;EACA,UAAA;EACA,YAAA;EACA,WAAA;EACA,mBAAA;AN8zNN;AM5zNI;EACE,MAAA;EACA,qBAAA;AN8zNN;AM5zNI;EACE,SAAA;EACA,wBAAA;AN8zNN;AM1zNE;EACE,aAAA;EACA,eAAA;EACA,uBAAA;EACA,eAAA;EACA,cAAA;EACA,2BAAA;EACA,4CHjDG;EGkDH,gBAAA;EACA,yBAAA;EACA,WAAA;EACA,gBAAA;EACA,YAAA;AN4zNJ;AM1zNI;EAdF;IAeI,gBAAA;EN6zNJ;AACF;AM3zNI;EACE,gBAAA;EACA,qBAAA;AN6zNN;;AOl4NA;EACE,kBAAA;EACA,kBAAA;EACA,iBAAA;EACA,YAAA;EACA,gBAAA;APq4NF;AOn4NE;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;APq4NJ;AOn4NK;EACC,WAAA;EACA,kBAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;EACA,0EAAA;EACA,0BAAA;EACA,UAAA;APq4NN;AOn4NI;EACE,WAAA;EACA,YAAA;EACA,uBAAA;EACA,sBAAA;EACA,4BAAA;APq4NN;AOj4NE;EACE,kBAAA;EACA,UAAA;EACA,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;APm4NJ;AOh4NE;EACE,eAAA;EACA,sBAAA;EACA,gBAAA;EACA,gBAAA;EACA,gBAAA;EACA,yBAAA;EACA,4CJ5CG;EI6CH,YAAA;EACA,kBAAA;APk4NJ;AO/3NE;EACE,4CJlDG;EImDH,gBAAA;EACA,qBAAA;EACA,yBAAA;EACA,mBAAA;EACA,kBAAA;APi4NJ;AO93NE;EACE,kBAAA;EACA,WAAA;EACA,kBAAA;APg4NJ;AO93NI;;EAEE,uBAAA;EACA,SAAA;EACA,8BAAA;EACA,YAAA;EACA,4CJrEC;EIsED,kBAAA;EACA,cAAA;EACA,gBAAA;EACA,WAAA;APg4NN;AO73NI;EACE,kBAAA;EACA,QAAA;EACA,QAAA;EACA,uBAAA;EACA,SAAA;EACA,2BAAA;AP+3NN;;AQx9NA;EACE,kBAAA;EACA,aAAA;EACA,sBAAA;EACA,mBAAA;EACA,uBAAA;EACA,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,mBAAA;EACA,UAAA;AR29NF;AQz9NE;EACE,kBAAA;EACA,UAAA;EACA,eAAA;EACA,cAAA;EACA,yBAAA;EACA,4CLXG;EKYH,YAAA;EACA,SAAA;EACA,gBAAA;EACA,eAAA;AR29NJ;AQz9NI;EAZF;IAaI,gBAAA;IACA,iBAAA;IACA,eAAA;ER49NJ;AACF;AQz9NE;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,kCAAA;EACA,UAAA;EACA,YAAA;EACA,WAAA;AR29NJ;;ASjgOA;EACE,kBAAA;EAEA,iBAAA;EACA,kBAAA;EACA,YAAA;EACA,UAAA;EACA,iBAAA;ATmgOF;ASjgOE;EACE,kBAAA;EACA,eAAA;EACA,gBAAA;EACA,4BNLQ;EMMR,iBAAA;EACA,UAAA;EACA,gBAAA;EACA,gBAAA;EACA,eAAA;ATmgOJ;ASlgOI;EACE,aAAA;ATogON;ASjgOI;EAdF;IAeI,gBAAA;IACA,iBAAA;IACA,eAAA;ETogOJ;AACF;ASlgOI;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,UAAA;EACA,YAAA;EACA,iBAAA;ATogON;AShgOE;EACE,eAAA;EACA,gBAAA;EACA,4BNlCQ;EMmCR,SAAA;ATkgOJ;AShgOI;EANF;IAOI,gBAAA;ETmgOJ;AACF;AShgOE;EACE,4CN5CG;EM6CH,iBAAA;EACA,eAAA;EACA,qBAAA;EACA,yBAAA;EACA,SAAA;EACA,kBAAA;ATkgOJ;AShgOI;EATF;IAUI,gBAAA;IACA,kBAAA;IACA,MAAA;IACA,OAAA;IACA,2BAAA;IACA,+EAAA;IACA,gBAAA;ETmgOJ;AACF;AShgOE;EACE,kBAAA;EACA,WAAA;EACA,eAAA;EACA,gBAAA;EAEA,eAAA;EACA,UAAA;ATigOJ;AShgOK;EARH;IASK,eAAA;ETmgOL;AACF;AShgOE;EACE,kBAAA;EACA,OAAA;EACA,SAAA;EACA,2BAAA;EACA,UAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,gBAAA;EACA,YAAA;EACA,mBAAA;KAAA,gBAAA;EACA,WAAA;ATkgOJ;;AUjmOA;EACE,eAAA;EACA,gBAAA;EACA,mBAAA;AVomOF;AUnmOE;EACE,aAAA;EACA,qCAAA;AVqmOJ;AUlmOE;EACE,cPTK;EOUL,gBAAA;EACA,qBAAA;EACA,mBAAA;EACA,aAAA;EACA,wBAAA;EACA,gBAAA;AVomOJ;AUjmOE;EACE,gBAAA;EACA,eAAA;EACA,kBAAA;AVmmOJ;AUjmOI;EACE,cAAA;EACA,cAAA;EACA,qBAAA;EACA,4BPpBM;EOqBN,gBAAA;AVmmON;AUhmOI;EACE,gBAAA;EACA,gBAAA;EACA,gBAAA;AVkmON;AU9lOE;EACE,kBAAA;EACA,WAAA;EACA,iBAAA;EACA,mBAAA;AVgmOJ;AU9lOI;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,UAAA;EACA,gCAAA;EACA,WAAA;AVgmON;AU7lOI;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,UAAA;EACA,+BAAA;EACA,WAAA;AV+lON;AU5lOI;EACE,kBAAA;EACA,QAAA;EACA,OAAA;EACA,gCAAA;EACA,WAAA;EACA,UAAA;AV8lON;AU3lOI;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,UAAA;EACA,gCAAA;EACA,WAAA;AV6lON;;AW3qOA;EACE,kBAAA;EACA,uBAAA;EACA,YAAA;EACA,oBAAA;EACA,aAAA;EACA,mBAAA;AX8qOF;AW5qOE;EARF;IASI,oBAAA;EX+qOF;AACF;AW7qOE;EACE,kBAAA;EACA,eAAA;AX+qOJ;AW9qOI;EACE,kBAAA;EACA,UAAA;EACA,YAAA;EACA,eAAA;EACA,WAAA;EACA,iBAAA;AXgrON;AW5qOE;EACI,kBAAA;EACA,gBAAA;EACA,cAAA;EACA,4BRrBM;EQsBN,eAAA;EACA,UAAA;EACA,YAAA;EACA,2BAAA;EACA,SAAA;EACA,eAAA;EACA,kBAAA;EACA,gBAAA;AX8qON;AW3qOE;EACD,aAAA;EACG,gBAAA;EACA,kBAAA;EACA,iBAAA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;EACA,gBAAA;AX6qOJ;AW5qOI;EACE,aAAA;AX8qON;AW1qOE;EACE,SAAA;EACA,UAAA;EACA,kBAAA;EACA,UAAA;EACA,uBAAA;EACA,WAAA;EACA,SAAA;EACA,kDAAA;EACA,aAAA;EACA,sBAAA;EACA,mBAAA;AX4qOJ;AW1qOI;EACE,WAAA;EACA,kBAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;EAEA,kBAAA;AX2qON;AWxqOI;EACE,cAAA;EACA,eAAA;EACA,yBAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AX0qON;AWvqOI;EACE,mBAAA;EACA,oBAAA;EACA,aAAA;EACA,4CRrFC;AH8vOP;AWrqOE;EACE,4BAAA;EACA,kBAAA;AXuqOJ;AWpqOE;EACE,aAAA;EACA,gCAAA;AXsqOJ;AWnqOE;EACE,kBAAA;EACA,aAAA;EACA,yBAAA;EACA,uBAAA;AXqqOJ;AWnqOI;EACE,WAAA;EACA,gBAAA;EACA,YAAA;AXqqON;AWjqOE;EACE,kBAAA;EACA,UAAA;EACA,aAAA;EACA,sBAAA;EACA,mBAAA;AXmqOJ;AWjqOE;EACE,kBAAA;EACA,UAAA;AXmqOJ;;AYnyOA;EACE,kBAAA;EACA,mBAAA;EACA,kBAAA;EACA,iBAAA;EACA,mBAAA;AZsyOF;AYryOE;EACE,kBAAA;EACA,MAAA;EACA,SAAA;EACA,WAAA;EACA,YAAA;EACA,UAAA;EACA,UAAA;EACA,gBAAA;EACA,2BAAA;AZuyOJ;AYryOI;EACE,WAAA;EACA,kBAAA;EACA,QAAA;EACA,SAAA;EACA,WAAA;EACA,YAAA;EACA,UAAA;EACA,6EAAA;AZuyON;AYpyOI;EACE,WAAA;EACA,kBAAA;EACA,WAAA;EACA,SAAA;EACA,WAAA;EACA,aAAA;EACA,UAAA;EACA,qBAAA;EACA,qEAAA;AZsyON;AYpyOI;EACE,WAAA;EACA,YAAA;EACA,qBAAA;EACA,kCAAA;EACA,4BAAA;AZsyON;AYlyOE;EACE,kBAAA;EACA,UAAA;AZoyOJ;AYjyOE;EACE,oBAAA;EACA,qBAAA;EACA,gBAAA;EACA,4BTjDQ;ESkDR,wBAAA;EACA,cT1DK;AH61OT;AYhyOE;EACE,yBAAA;EACA,qBAAA;EACA,sBAAA;EACA,oBAAA;EACA,mBAAA;EACA,4CT7DG;AH+1OP;AY/xOE;EACE,oBAAA;EACA,oBAAA;EACA,4CTnEG;ESoEH,gBAAA;EACA,oBAAA;EACA,cAAA;AZiyOJ;;Aa92OA;EACE,kBAAA;EACA,eAAA;EACA,iBAAA;EACA,YAAA;Abi3OF;Aa/2OE;EACE,kBAAA;EACA,cAAA;EACA,cAAA;EACA,UAAA;EACA,4CVJG;EUKH,eAAA;EACA,SAAA;EACA,iBAAA;EACA,gBAAA;Abi3OJ;Aa/2OI;EACE,yBAAA;Abi3ON;Aa72OE;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,YAAA;EACA,eAAA;EACA,UAAA;Ab+2OJ;;Ac74OA;EACE,kBAAA;EACA,gBAAA;EACA,gBAAA;Adg5OF;Ac/4OE;EACE,WAAA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,WAAA;EACA,eAAA;EACA,iBAAA;EACA,UAAA;Adi5OJ;Ac94OE;EACE,kBAAA;EACA,aAAA;EACA,iBAAA;EACA,YAAA;EACA,iBAAA;EACA,uBAAA;EACA,UAAA;Adg5OJ;Ac74OE;EACE,kBAAA;EACA,aAAA;EACA,2CAAA;UAAA,mCAAA;Ad+4OJ;Ac54OE;EACE,cX/BK;EWiCL,cAAA;EACA,SAAA;EACA,4CX7BG;EW8BH,gBAAA;EACA,kBAAA;EACA,SAAA;EACA,UAAA;EACA,yBAAA;EACA,mBAAA;EACA,WAAA;Ad64OJ;Ac54OI;EACE,gBAAA;EACA,eAAA;Ad84ON;Ac14OE;EACE,kBAAA;EACA,WAAA;EACA,gBAAA;EACA,kBAAA;EACA,YAAA;EACA,mBAAA;EACA,iBAAA;EACA,aAAA;EACA,aAAA;EACA,qBAAA;EACA,iBAAA;EACA,iBAAA;EACA,gBAAA;Ad44OJ;Ac14OI;EACE,YAAA;EACA,qBAAA;EACA,oBAAA;Ad44ON;Acz4OI;EACE,kBAAA;EACA,UAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;EACA,SAAA;EACA,4CXvEC;EWwED,gBAAA;Ad24ON;Acx4OI;EACE,kBAAA;EACA,QAAA;EACA,SAAA;EACA,WAAA;EACA,YAAA;EACA,gCAAA;EACA,UAAA;Ad04ON;;Acr4OA;EACE;IAAM,wBAAA;Edy4ON;Ecx4OA;IAAI,2BAAA;Ed24OJ;AACF;;Ac94OA;EACE;IAAM,wBAAA;Edy4ON;Ecx4OA;IAAI,2BAAA;Ed24OJ;AACF;Ae5+OA;EACE,kBAAA;EACA,gBAAA;EACA,iBAAA;EACA,YAAA;EAEA,eAAA;EACA,aAAA;EACA,mBAAA;Af6+OF;Ae5+OE;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;Af8+OJ;Ae7+OI;EACE,WAAA;EACA,YAAA;EACA,qBAAA;EACA,2BAAA;EACA,4BAAA;Af++ON;Ae3+OE;EACE,aAAA;EACA,iBAAA;EACA,mBAAA;EACA,8BAAA;Af6+OJ;Ae1+OE;EACE,0BAAA;Af4+OJ;Ae1+OI;EACE,WAAA;Af4+ON;Aex+OE;EACE,kBAAA;Af0+OJ;Aex+OI;EACE,kBAAA;EACA,QAAA;EACA,OAAA;EACA,WAAA;EACA,WAAA;EACA,iBAAA;Af0+ON;Aet+OE;EACE,WAAA;EACA,iBAAA;Afw+OJ;Aet+OI;EACE,cZxDG;EYyDH,4BZlDM;EYmDN,cAAA;EACA,gBAAA;EACA,gBAAA;EACA,mBAAA;Afw+ON;Aer+OI;EACE,kBAAA;EACA,cAAA;EACA,gBAAA;EACA,WAAA;EACA,kBAAA;Afu+ON;Aet+OM;EACE,aAAA;Afw+OR;Aen+OE;EACE,cZ7EK;EY8EL,gBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,yBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;Afq+OJ;Aen+OI;EACE,WAAA;Afq+ON;;AgB9jPA;EACE,eAAA;AhBikPF;;AgB9jPA;EACE,gBAAA;AhBikPF;;AgB7jPE;EACD,gBAAA;AhBgkPD;;AgB5jPA;EACE,kBAAA;AhB+jPF;AgB9jPE;EACD,kBAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,UAAA;EACA,mBAAA;EACA,oBAAA;EACA,sBAAA;AhBgkPD","sourcesContent":["\n.grid {\n  display: grid;\n  grid-template-columns: repeat($s-col, 1fr);\n\n  @include minMobile {\n    grid-template-columns: repeat($t-col, 1fr);\n  }\n\n  @include minTablet {\n    grid-template-columns: repeat($col, 1fr);\n  }\n}\n\n.grid--tablet {\n  @extend.grid;\n\n  @include tablet {\n    display: block;\n  }\n}\n\n.grid--mobile {\n  @extend .grid;\n\n  @include mobile {\n    display: block;\n  }\n}\n\n// BASE\n@for $i from 1 through $col {\n  @for $j from 1 through ($col + 1) {\n    .grid_#{$i}_#{$j} {\n      grid-column-start: $i;\n      grid-column-end: $j;\n    }\n  }\n}\n\n// LAPTOP\n@include laptop {\n  @for $i from 1 through $col {\n    @for $j from 1 through ($col + 1) {\n      .l-grid_#{$i}_#{$j} {\n        grid-column-start: $i;\n        grid-column-end: $j;\n      }\n    }\n  }\n}\n\n@include tablet {\n  @for $i from 1 through $t-col {\n    @for $j from 1 through ($t-col + 1) {\n      .t-grid_#{$i}_#{$j} {\n        grid-column-start: $i;\n        grid-column-end: $j;\n      }\n    }\n  }\n}\n\n// TABLET\n@include mobile {\n  @for $i from 1 through $s-col {\n    @for $j from 1 through ($s-col + 1) {\n      .t-grid_#{$i}_#{$j} {\n        grid-column-start: $i;\n        grid-column-end: $j;\n      }\n    }\n  }\n}\n\n.flex-sym {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n}",".grid, .grid--mobile, .grid--tablet {\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n}\n@media (min-width: 493px) {\n  .grid, .grid--mobile, .grid--tablet {\n    grid-template-columns: repeat(17, 1fr);\n  }\n}\n@media (min-width: 769px) {\n  .grid, .grid--mobile, .grid--tablet {\n    grid-template-columns: repeat(23, 1fr);\n  }\n}\n\n@media (max-width: 768px) {\n  .grid--tablet {\n    display: block;\n  }\n}\n\n@media (max-width: 492px) {\n  .grid--mobile {\n    display: block;\n  }\n}\n\n.grid_1_1 {\n  grid-column-start: 1;\n  grid-column-end: 1;\n}\n\n.grid_1_2 {\n  grid-column-start: 1;\n  grid-column-end: 2;\n}\n\n.grid_1_3 {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n\n.grid_1_4 {\n  grid-column-start: 1;\n  grid-column-end: 4;\n}\n\n.grid_1_5 {\n  grid-column-start: 1;\n  grid-column-end: 5;\n}\n\n.grid_1_6 {\n  grid-column-start: 1;\n  grid-column-end: 6;\n}\n\n.grid_1_7 {\n  grid-column-start: 1;\n  grid-column-end: 7;\n}\n\n.grid_1_8 {\n  grid-column-start: 1;\n  grid-column-end: 8;\n}\n\n.grid_1_9 {\n  grid-column-start: 1;\n  grid-column-end: 9;\n}\n\n.grid_1_10 {\n  grid-column-start: 1;\n  grid-column-end: 10;\n}\n\n.grid_1_11 {\n  grid-column-start: 1;\n  grid-column-end: 11;\n}\n\n.grid_1_12 {\n  grid-column-start: 1;\n  grid-column-end: 12;\n}\n\n.grid_1_13 {\n  grid-column-start: 1;\n  grid-column-end: 13;\n}\n\n.grid_1_14 {\n  grid-column-start: 1;\n  grid-column-end: 14;\n}\n\n.grid_1_15 {\n  grid-column-start: 1;\n  grid-column-end: 15;\n}\n\n.grid_1_16 {\n  grid-column-start: 1;\n  grid-column-end: 16;\n}\n\n.grid_1_17 {\n  grid-column-start: 1;\n  grid-column-end: 17;\n}\n\n.grid_1_18 {\n  grid-column-start: 1;\n  grid-column-end: 18;\n}\n\n.grid_1_19 {\n  grid-column-start: 1;\n  grid-column-end: 19;\n}\n\n.grid_1_20 {\n  grid-column-start: 1;\n  grid-column-end: 20;\n}\n\n.grid_1_21 {\n  grid-column-start: 1;\n  grid-column-end: 21;\n}\n\n.grid_1_22 {\n  grid-column-start: 1;\n  grid-column-end: 22;\n}\n\n.grid_1_23 {\n  grid-column-start: 1;\n  grid-column-end: 23;\n}\n\n.grid_1_24 {\n  grid-column-start: 1;\n  grid-column-end: 24;\n}\n\n.grid_2_1 {\n  grid-column-start: 2;\n  grid-column-end: 1;\n}\n\n.grid_2_2 {\n  grid-column-start: 2;\n  grid-column-end: 2;\n}\n\n.grid_2_3 {\n  grid-column-start: 2;\n  grid-column-end: 3;\n}\n\n.grid_2_4 {\n  grid-column-start: 2;\n  grid-column-end: 4;\n}\n\n.grid_2_5 {\n  grid-column-start: 2;\n  grid-column-end: 5;\n}\n\n.grid_2_6 {\n  grid-column-start: 2;\n  grid-column-end: 6;\n}\n\n.grid_2_7 {\n  grid-column-start: 2;\n  grid-column-end: 7;\n}\n\n.grid_2_8 {\n  grid-column-start: 2;\n  grid-column-end: 8;\n}\n\n.grid_2_9 {\n  grid-column-start: 2;\n  grid-column-end: 9;\n}\n\n.grid_2_10 {\n  grid-column-start: 2;\n  grid-column-end: 10;\n}\n\n.grid_2_11 {\n  grid-column-start: 2;\n  grid-column-end: 11;\n}\n\n.grid_2_12 {\n  grid-column-start: 2;\n  grid-column-end: 12;\n}\n\n.grid_2_13 {\n  grid-column-start: 2;\n  grid-column-end: 13;\n}\n\n.grid_2_14 {\n  grid-column-start: 2;\n  grid-column-end: 14;\n}\n\n.grid_2_15 {\n  grid-column-start: 2;\n  grid-column-end: 15;\n}\n\n.grid_2_16 {\n  grid-column-start: 2;\n  grid-column-end: 16;\n}\n\n.grid_2_17 {\n  grid-column-start: 2;\n  grid-column-end: 17;\n}\n\n.grid_2_18 {\n  grid-column-start: 2;\n  grid-column-end: 18;\n}\n\n.grid_2_19 {\n  grid-column-start: 2;\n  grid-column-end: 19;\n}\n\n.grid_2_20 {\n  grid-column-start: 2;\n  grid-column-end: 20;\n}\n\n.grid_2_21 {\n  grid-column-start: 2;\n  grid-column-end: 21;\n}\n\n.grid_2_22 {\n  grid-column-start: 2;\n  grid-column-end: 22;\n}\n\n.grid_2_23 {\n  grid-column-start: 2;\n  grid-column-end: 23;\n}\n\n.grid_2_24 {\n  grid-column-start: 2;\n  grid-column-end: 24;\n}\n\n.grid_3_1 {\n  grid-column-start: 3;\n  grid-column-end: 1;\n}\n\n.grid_3_2 {\n  grid-column-start: 3;\n  grid-column-end: 2;\n}\n\n.grid_3_3 {\n  grid-column-start: 3;\n  grid-column-end: 3;\n}\n\n.grid_3_4 {\n  grid-column-start: 3;\n  grid-column-end: 4;\n}\n\n.grid_3_5 {\n  grid-column-start: 3;\n  grid-column-end: 5;\n}\n\n.grid_3_6 {\n  grid-column-start: 3;\n  grid-column-end: 6;\n}\n\n.grid_3_7 {\n  grid-column-start: 3;\n  grid-column-end: 7;\n}\n\n.grid_3_8 {\n  grid-column-start: 3;\n  grid-column-end: 8;\n}\n\n.grid_3_9 {\n  grid-column-start: 3;\n  grid-column-end: 9;\n}\n\n.grid_3_10 {\n  grid-column-start: 3;\n  grid-column-end: 10;\n}\n\n.grid_3_11 {\n  grid-column-start: 3;\n  grid-column-end: 11;\n}\n\n.grid_3_12 {\n  grid-column-start: 3;\n  grid-column-end: 12;\n}\n\n.grid_3_13 {\n  grid-column-start: 3;\n  grid-column-end: 13;\n}\n\n.grid_3_14 {\n  grid-column-start: 3;\n  grid-column-end: 14;\n}\n\n.grid_3_15 {\n  grid-column-start: 3;\n  grid-column-end: 15;\n}\n\n.grid_3_16 {\n  grid-column-start: 3;\n  grid-column-end: 16;\n}\n\n.grid_3_17 {\n  grid-column-start: 3;\n  grid-column-end: 17;\n}\n\n.grid_3_18 {\n  grid-column-start: 3;\n  grid-column-end: 18;\n}\n\n.grid_3_19 {\n  grid-column-start: 3;\n  grid-column-end: 19;\n}\n\n.grid_3_20 {\n  grid-column-start: 3;\n  grid-column-end: 20;\n}\n\n.grid_3_21 {\n  grid-column-start: 3;\n  grid-column-end: 21;\n}\n\n.grid_3_22 {\n  grid-column-start: 3;\n  grid-column-end: 22;\n}\n\n.grid_3_23 {\n  grid-column-start: 3;\n  grid-column-end: 23;\n}\n\n.grid_3_24 {\n  grid-column-start: 3;\n  grid-column-end: 24;\n}\n\n.grid_4_1 {\n  grid-column-start: 4;\n  grid-column-end: 1;\n}\n\n.grid_4_2 {\n  grid-column-start: 4;\n  grid-column-end: 2;\n}\n\n.grid_4_3 {\n  grid-column-start: 4;\n  grid-column-end: 3;\n}\n\n.grid_4_4 {\n  grid-column-start: 4;\n  grid-column-end: 4;\n}\n\n.grid_4_5 {\n  grid-column-start: 4;\n  grid-column-end: 5;\n}\n\n.grid_4_6 {\n  grid-column-start: 4;\n  grid-column-end: 6;\n}\n\n.grid_4_7 {\n  grid-column-start: 4;\n  grid-column-end: 7;\n}\n\n.grid_4_8 {\n  grid-column-start: 4;\n  grid-column-end: 8;\n}\n\n.grid_4_9 {\n  grid-column-start: 4;\n  grid-column-end: 9;\n}\n\n.grid_4_10 {\n  grid-column-start: 4;\n  grid-column-end: 10;\n}\n\n.grid_4_11 {\n  grid-column-start: 4;\n  grid-column-end: 11;\n}\n\n.grid_4_12 {\n  grid-column-start: 4;\n  grid-column-end: 12;\n}\n\n.grid_4_13 {\n  grid-column-start: 4;\n  grid-column-end: 13;\n}\n\n.grid_4_14 {\n  grid-column-start: 4;\n  grid-column-end: 14;\n}\n\n.grid_4_15 {\n  grid-column-start: 4;\n  grid-column-end: 15;\n}\n\n.grid_4_16 {\n  grid-column-start: 4;\n  grid-column-end: 16;\n}\n\n.grid_4_17 {\n  grid-column-start: 4;\n  grid-column-end: 17;\n}\n\n.grid_4_18 {\n  grid-column-start: 4;\n  grid-column-end: 18;\n}\n\n.grid_4_19 {\n  grid-column-start: 4;\n  grid-column-end: 19;\n}\n\n.grid_4_20 {\n  grid-column-start: 4;\n  grid-column-end: 20;\n}\n\n.grid_4_21 {\n  grid-column-start: 4;\n  grid-column-end: 21;\n}\n\n.grid_4_22 {\n  grid-column-start: 4;\n  grid-column-end: 22;\n}\n\n.grid_4_23 {\n  grid-column-start: 4;\n  grid-column-end: 23;\n}\n\n.grid_4_24 {\n  grid-column-start: 4;\n  grid-column-end: 24;\n}\n\n.grid_5_1 {\n  grid-column-start: 5;\n  grid-column-end: 1;\n}\n\n.grid_5_2 {\n  grid-column-start: 5;\n  grid-column-end: 2;\n}\n\n.grid_5_3 {\n  grid-column-start: 5;\n  grid-column-end: 3;\n}\n\n.grid_5_4 {\n  grid-column-start: 5;\n  grid-column-end: 4;\n}\n\n.grid_5_5 {\n  grid-column-start: 5;\n  grid-column-end: 5;\n}\n\n.grid_5_6 {\n  grid-column-start: 5;\n  grid-column-end: 6;\n}\n\n.grid_5_7 {\n  grid-column-start: 5;\n  grid-column-end: 7;\n}\n\n.grid_5_8 {\n  grid-column-start: 5;\n  grid-column-end: 8;\n}\n\n.grid_5_9 {\n  grid-column-start: 5;\n  grid-column-end: 9;\n}\n\n.grid_5_10 {\n  grid-column-start: 5;\n  grid-column-end: 10;\n}\n\n.grid_5_11 {\n  grid-column-start: 5;\n  grid-column-end: 11;\n}\n\n.grid_5_12 {\n  grid-column-start: 5;\n  grid-column-end: 12;\n}\n\n.grid_5_13 {\n  grid-column-start: 5;\n  grid-column-end: 13;\n}\n\n.grid_5_14 {\n  grid-column-start: 5;\n  grid-column-end: 14;\n}\n\n.grid_5_15 {\n  grid-column-start: 5;\n  grid-column-end: 15;\n}\n\n.grid_5_16 {\n  grid-column-start: 5;\n  grid-column-end: 16;\n}\n\n.grid_5_17 {\n  grid-column-start: 5;\n  grid-column-end: 17;\n}\n\n.grid_5_18 {\n  grid-column-start: 5;\n  grid-column-end: 18;\n}\n\n.grid_5_19 {\n  grid-column-start: 5;\n  grid-column-end: 19;\n}\n\n.grid_5_20 {\n  grid-column-start: 5;\n  grid-column-end: 20;\n}\n\n.grid_5_21 {\n  grid-column-start: 5;\n  grid-column-end: 21;\n}\n\n.grid_5_22 {\n  grid-column-start: 5;\n  grid-column-end: 22;\n}\n\n.grid_5_23 {\n  grid-column-start: 5;\n  grid-column-end: 23;\n}\n\n.grid_5_24 {\n  grid-column-start: 5;\n  grid-column-end: 24;\n}\n\n.grid_6_1 {\n  grid-column-start: 6;\n  grid-column-end: 1;\n}\n\n.grid_6_2 {\n  grid-column-start: 6;\n  grid-column-end: 2;\n}\n\n.grid_6_3 {\n  grid-column-start: 6;\n  grid-column-end: 3;\n}\n\n.grid_6_4 {\n  grid-column-start: 6;\n  grid-column-end: 4;\n}\n\n.grid_6_5 {\n  grid-column-start: 6;\n  grid-column-end: 5;\n}\n\n.grid_6_6 {\n  grid-column-start: 6;\n  grid-column-end: 6;\n}\n\n.grid_6_7 {\n  grid-column-start: 6;\n  grid-column-end: 7;\n}\n\n.grid_6_8 {\n  grid-column-start: 6;\n  grid-column-end: 8;\n}\n\n.grid_6_9 {\n  grid-column-start: 6;\n  grid-column-end: 9;\n}\n\n.grid_6_10 {\n  grid-column-start: 6;\n  grid-column-end: 10;\n}\n\n.grid_6_11 {\n  grid-column-start: 6;\n  grid-column-end: 11;\n}\n\n.grid_6_12 {\n  grid-column-start: 6;\n  grid-column-end: 12;\n}\n\n.grid_6_13 {\n  grid-column-start: 6;\n  grid-column-end: 13;\n}\n\n.grid_6_14 {\n  grid-column-start: 6;\n  grid-column-end: 14;\n}\n\n.grid_6_15 {\n  grid-column-start: 6;\n  grid-column-end: 15;\n}\n\n.grid_6_16 {\n  grid-column-start: 6;\n  grid-column-end: 16;\n}\n\n.grid_6_17 {\n  grid-column-start: 6;\n  grid-column-end: 17;\n}\n\n.grid_6_18 {\n  grid-column-start: 6;\n  grid-column-end: 18;\n}\n\n.grid_6_19 {\n  grid-column-start: 6;\n  grid-column-end: 19;\n}\n\n.grid_6_20 {\n  grid-column-start: 6;\n  grid-column-end: 20;\n}\n\n.grid_6_21 {\n  grid-column-start: 6;\n  grid-column-end: 21;\n}\n\n.grid_6_22 {\n  grid-column-start: 6;\n  grid-column-end: 22;\n}\n\n.grid_6_23 {\n  grid-column-start: 6;\n  grid-column-end: 23;\n}\n\n.grid_6_24 {\n  grid-column-start: 6;\n  grid-column-end: 24;\n}\n\n.grid_7_1 {\n  grid-column-start: 7;\n  grid-column-end: 1;\n}\n\n.grid_7_2 {\n  grid-column-start: 7;\n  grid-column-end: 2;\n}\n\n.grid_7_3 {\n  grid-column-start: 7;\n  grid-column-end: 3;\n}\n\n.grid_7_4 {\n  grid-column-start: 7;\n  grid-column-end: 4;\n}\n\n.grid_7_5 {\n  grid-column-start: 7;\n  grid-column-end: 5;\n}\n\n.grid_7_6 {\n  grid-column-start: 7;\n  grid-column-end: 6;\n}\n\n.grid_7_7 {\n  grid-column-start: 7;\n  grid-column-end: 7;\n}\n\n.grid_7_8 {\n  grid-column-start: 7;\n  grid-column-end: 8;\n}\n\n.grid_7_9 {\n  grid-column-start: 7;\n  grid-column-end: 9;\n}\n\n.grid_7_10 {\n  grid-column-start: 7;\n  grid-column-end: 10;\n}\n\n.grid_7_11 {\n  grid-column-start: 7;\n  grid-column-end: 11;\n}\n\n.grid_7_12 {\n  grid-column-start: 7;\n  grid-column-end: 12;\n}\n\n.grid_7_13 {\n  grid-column-start: 7;\n  grid-column-end: 13;\n}\n\n.grid_7_14 {\n  grid-column-start: 7;\n  grid-column-end: 14;\n}\n\n.grid_7_15 {\n  grid-column-start: 7;\n  grid-column-end: 15;\n}\n\n.grid_7_16 {\n  grid-column-start: 7;\n  grid-column-end: 16;\n}\n\n.grid_7_17 {\n  grid-column-start: 7;\n  grid-column-end: 17;\n}\n\n.grid_7_18 {\n  grid-column-start: 7;\n  grid-column-end: 18;\n}\n\n.grid_7_19 {\n  grid-column-start: 7;\n  grid-column-end: 19;\n}\n\n.grid_7_20 {\n  grid-column-start: 7;\n  grid-column-end: 20;\n}\n\n.grid_7_21 {\n  grid-column-start: 7;\n  grid-column-end: 21;\n}\n\n.grid_7_22 {\n  grid-column-start: 7;\n  grid-column-end: 22;\n}\n\n.grid_7_23 {\n  grid-column-start: 7;\n  grid-column-end: 23;\n}\n\n.grid_7_24 {\n  grid-column-start: 7;\n  grid-column-end: 24;\n}\n\n.grid_8_1 {\n  grid-column-start: 8;\n  grid-column-end: 1;\n}\n\n.grid_8_2 {\n  grid-column-start: 8;\n  grid-column-end: 2;\n}\n\n.grid_8_3 {\n  grid-column-start: 8;\n  grid-column-end: 3;\n}\n\n.grid_8_4 {\n  grid-column-start: 8;\n  grid-column-end: 4;\n}\n\n.grid_8_5 {\n  grid-column-start: 8;\n  grid-column-end: 5;\n}\n\n.grid_8_6 {\n  grid-column-start: 8;\n  grid-column-end: 6;\n}\n\n.grid_8_7 {\n  grid-column-start: 8;\n  grid-column-end: 7;\n}\n\n.grid_8_8 {\n  grid-column-start: 8;\n  grid-column-end: 8;\n}\n\n.grid_8_9 {\n  grid-column-start: 8;\n  grid-column-end: 9;\n}\n\n.grid_8_10 {\n  grid-column-start: 8;\n  grid-column-end: 10;\n}\n\n.grid_8_11 {\n  grid-column-start: 8;\n  grid-column-end: 11;\n}\n\n.grid_8_12 {\n  grid-column-start: 8;\n  grid-column-end: 12;\n}\n\n.grid_8_13 {\n  grid-column-start: 8;\n  grid-column-end: 13;\n}\n\n.grid_8_14 {\n  grid-column-start: 8;\n  grid-column-end: 14;\n}\n\n.grid_8_15 {\n  grid-column-start: 8;\n  grid-column-end: 15;\n}\n\n.grid_8_16 {\n  grid-column-start: 8;\n  grid-column-end: 16;\n}\n\n.grid_8_17 {\n  grid-column-start: 8;\n  grid-column-end: 17;\n}\n\n.grid_8_18 {\n  grid-column-start: 8;\n  grid-column-end: 18;\n}\n\n.grid_8_19 {\n  grid-column-start: 8;\n  grid-column-end: 19;\n}\n\n.grid_8_20 {\n  grid-column-start: 8;\n  grid-column-end: 20;\n}\n\n.grid_8_21 {\n  grid-column-start: 8;\n  grid-column-end: 21;\n}\n\n.grid_8_22 {\n  grid-column-start: 8;\n  grid-column-end: 22;\n}\n\n.grid_8_23 {\n  grid-column-start: 8;\n  grid-column-end: 23;\n}\n\n.grid_8_24 {\n  grid-column-start: 8;\n  grid-column-end: 24;\n}\n\n.grid_9_1 {\n  grid-column-start: 9;\n  grid-column-end: 1;\n}\n\n.grid_9_2 {\n  grid-column-start: 9;\n  grid-column-end: 2;\n}\n\n.grid_9_3 {\n  grid-column-start: 9;\n  grid-column-end: 3;\n}\n\n.grid_9_4 {\n  grid-column-start: 9;\n  grid-column-end: 4;\n}\n\n.grid_9_5 {\n  grid-column-start: 9;\n  grid-column-end: 5;\n}\n\n.grid_9_6 {\n  grid-column-start: 9;\n  grid-column-end: 6;\n}\n\n.grid_9_7 {\n  grid-column-start: 9;\n  grid-column-end: 7;\n}\n\n.grid_9_8 {\n  grid-column-start: 9;\n  grid-column-end: 8;\n}\n\n.grid_9_9 {\n  grid-column-start: 9;\n  grid-column-end: 9;\n}\n\n.grid_9_10 {\n  grid-column-start: 9;\n  grid-column-end: 10;\n}\n\n.grid_9_11 {\n  grid-column-start: 9;\n  grid-column-end: 11;\n}\n\n.grid_9_12 {\n  grid-column-start: 9;\n  grid-column-end: 12;\n}\n\n.grid_9_13 {\n  grid-column-start: 9;\n  grid-column-end: 13;\n}\n\n.grid_9_14 {\n  grid-column-start: 9;\n  grid-column-end: 14;\n}\n\n.grid_9_15 {\n  grid-column-start: 9;\n  grid-column-end: 15;\n}\n\n.grid_9_16 {\n  grid-column-start: 9;\n  grid-column-end: 16;\n}\n\n.grid_9_17 {\n  grid-column-start: 9;\n  grid-column-end: 17;\n}\n\n.grid_9_18 {\n  grid-column-start: 9;\n  grid-column-end: 18;\n}\n\n.grid_9_19 {\n  grid-column-start: 9;\n  grid-column-end: 19;\n}\n\n.grid_9_20 {\n  grid-column-start: 9;\n  grid-column-end: 20;\n}\n\n.grid_9_21 {\n  grid-column-start: 9;\n  grid-column-end: 21;\n}\n\n.grid_9_22 {\n  grid-column-start: 9;\n  grid-column-end: 22;\n}\n\n.grid_9_23 {\n  grid-column-start: 9;\n  grid-column-end: 23;\n}\n\n.grid_9_24 {\n  grid-column-start: 9;\n  grid-column-end: 24;\n}\n\n.grid_10_1 {\n  grid-column-start: 10;\n  grid-column-end: 1;\n}\n\n.grid_10_2 {\n  grid-column-start: 10;\n  grid-column-end: 2;\n}\n\n.grid_10_3 {\n  grid-column-start: 10;\n  grid-column-end: 3;\n}\n\n.grid_10_4 {\n  grid-column-start: 10;\n  grid-column-end: 4;\n}\n\n.grid_10_5 {\n  grid-column-start: 10;\n  grid-column-end: 5;\n}\n\n.grid_10_6 {\n  grid-column-start: 10;\n  grid-column-end: 6;\n}\n\n.grid_10_7 {\n  grid-column-start: 10;\n  grid-column-end: 7;\n}\n\n.grid_10_8 {\n  grid-column-start: 10;\n  grid-column-end: 8;\n}\n\n.grid_10_9 {\n  grid-column-start: 10;\n  grid-column-end: 9;\n}\n\n.grid_10_10 {\n  grid-column-start: 10;\n  grid-column-end: 10;\n}\n\n.grid_10_11 {\n  grid-column-start: 10;\n  grid-column-end: 11;\n}\n\n.grid_10_12 {\n  grid-column-start: 10;\n  grid-column-end: 12;\n}\n\n.grid_10_13 {\n  grid-column-start: 10;\n  grid-column-end: 13;\n}\n\n.grid_10_14 {\n  grid-column-start: 10;\n  grid-column-end: 14;\n}\n\n.grid_10_15 {\n  grid-column-start: 10;\n  grid-column-end: 15;\n}\n\n.grid_10_16 {\n  grid-column-start: 10;\n  grid-column-end: 16;\n}\n\n.grid_10_17 {\n  grid-column-start: 10;\n  grid-column-end: 17;\n}\n\n.grid_10_18 {\n  grid-column-start: 10;\n  grid-column-end: 18;\n}\n\n.grid_10_19 {\n  grid-column-start: 10;\n  grid-column-end: 19;\n}\n\n.grid_10_20 {\n  grid-column-start: 10;\n  grid-column-end: 20;\n}\n\n.grid_10_21 {\n  grid-column-start: 10;\n  grid-column-end: 21;\n}\n\n.grid_10_22 {\n  grid-column-start: 10;\n  grid-column-end: 22;\n}\n\n.grid_10_23 {\n  grid-column-start: 10;\n  grid-column-end: 23;\n}\n\n.grid_10_24 {\n  grid-column-start: 10;\n  grid-column-end: 24;\n}\n\n.grid_11_1 {\n  grid-column-start: 11;\n  grid-column-end: 1;\n}\n\n.grid_11_2 {\n  grid-column-start: 11;\n  grid-column-end: 2;\n}\n\n.grid_11_3 {\n  grid-column-start: 11;\n  grid-column-end: 3;\n}\n\n.grid_11_4 {\n  grid-column-start: 11;\n  grid-column-end: 4;\n}\n\n.grid_11_5 {\n  grid-column-start: 11;\n  grid-column-end: 5;\n}\n\n.grid_11_6 {\n  grid-column-start: 11;\n  grid-column-end: 6;\n}\n\n.grid_11_7 {\n  grid-column-start: 11;\n  grid-column-end: 7;\n}\n\n.grid_11_8 {\n  grid-column-start: 11;\n  grid-column-end: 8;\n}\n\n.grid_11_9 {\n  grid-column-start: 11;\n  grid-column-end: 9;\n}\n\n.grid_11_10 {\n  grid-column-start: 11;\n  grid-column-end: 10;\n}\n\n.grid_11_11 {\n  grid-column-start: 11;\n  grid-column-end: 11;\n}\n\n.grid_11_12 {\n  grid-column-start: 11;\n  grid-column-end: 12;\n}\n\n.grid_11_13 {\n  grid-column-start: 11;\n  grid-column-end: 13;\n}\n\n.grid_11_14 {\n  grid-column-start: 11;\n  grid-column-end: 14;\n}\n\n.grid_11_15 {\n  grid-column-start: 11;\n  grid-column-end: 15;\n}\n\n.grid_11_16 {\n  grid-column-start: 11;\n  grid-column-end: 16;\n}\n\n.grid_11_17 {\n  grid-column-start: 11;\n  grid-column-end: 17;\n}\n\n.grid_11_18 {\n  grid-column-start: 11;\n  grid-column-end: 18;\n}\n\n.grid_11_19 {\n  grid-column-start: 11;\n  grid-column-end: 19;\n}\n\n.grid_11_20 {\n  grid-column-start: 11;\n  grid-column-end: 20;\n}\n\n.grid_11_21 {\n  grid-column-start: 11;\n  grid-column-end: 21;\n}\n\n.grid_11_22 {\n  grid-column-start: 11;\n  grid-column-end: 22;\n}\n\n.grid_11_23 {\n  grid-column-start: 11;\n  grid-column-end: 23;\n}\n\n.grid_11_24 {\n  grid-column-start: 11;\n  grid-column-end: 24;\n}\n\n.grid_12_1 {\n  grid-column-start: 12;\n  grid-column-end: 1;\n}\n\n.grid_12_2 {\n  grid-column-start: 12;\n  grid-column-end: 2;\n}\n\n.grid_12_3 {\n  grid-column-start: 12;\n  grid-column-end: 3;\n}\n\n.grid_12_4 {\n  grid-column-start: 12;\n  grid-column-end: 4;\n}\n\n.grid_12_5 {\n  grid-column-start: 12;\n  grid-column-end: 5;\n}\n\n.grid_12_6 {\n  grid-column-start: 12;\n  grid-column-end: 6;\n}\n\n.grid_12_7 {\n  grid-column-start: 12;\n  grid-column-end: 7;\n}\n\n.grid_12_8 {\n  grid-column-start: 12;\n  grid-column-end: 8;\n}\n\n.grid_12_9 {\n  grid-column-start: 12;\n  grid-column-end: 9;\n}\n\n.grid_12_10 {\n  grid-column-start: 12;\n  grid-column-end: 10;\n}\n\n.grid_12_11 {\n  grid-column-start: 12;\n  grid-column-end: 11;\n}\n\n.grid_12_12 {\n  grid-column-start: 12;\n  grid-column-end: 12;\n}\n\n.grid_12_13 {\n  grid-column-start: 12;\n  grid-column-end: 13;\n}\n\n.grid_12_14 {\n  grid-column-start: 12;\n  grid-column-end: 14;\n}\n\n.grid_12_15 {\n  grid-column-start: 12;\n  grid-column-end: 15;\n}\n\n.grid_12_16 {\n  grid-column-start: 12;\n  grid-column-end: 16;\n}\n\n.grid_12_17 {\n  grid-column-start: 12;\n  grid-column-end: 17;\n}\n\n.grid_12_18 {\n  grid-column-start: 12;\n  grid-column-end: 18;\n}\n\n.grid_12_19 {\n  grid-column-start: 12;\n  grid-column-end: 19;\n}\n\n.grid_12_20 {\n  grid-column-start: 12;\n  grid-column-end: 20;\n}\n\n.grid_12_21 {\n  grid-column-start: 12;\n  grid-column-end: 21;\n}\n\n.grid_12_22 {\n  grid-column-start: 12;\n  grid-column-end: 22;\n}\n\n.grid_12_23 {\n  grid-column-start: 12;\n  grid-column-end: 23;\n}\n\n.grid_12_24 {\n  grid-column-start: 12;\n  grid-column-end: 24;\n}\n\n.grid_13_1 {\n  grid-column-start: 13;\n  grid-column-end: 1;\n}\n\n.grid_13_2 {\n  grid-column-start: 13;\n  grid-column-end: 2;\n}\n\n.grid_13_3 {\n  grid-column-start: 13;\n  grid-column-end: 3;\n}\n\n.grid_13_4 {\n  grid-column-start: 13;\n  grid-column-end: 4;\n}\n\n.grid_13_5 {\n  grid-column-start: 13;\n  grid-column-end: 5;\n}\n\n.grid_13_6 {\n  grid-column-start: 13;\n  grid-column-end: 6;\n}\n\n.grid_13_7 {\n  grid-column-start: 13;\n  grid-column-end: 7;\n}\n\n.grid_13_8 {\n  grid-column-start: 13;\n  grid-column-end: 8;\n}\n\n.grid_13_9 {\n  grid-column-start: 13;\n  grid-column-end: 9;\n}\n\n.grid_13_10 {\n  grid-column-start: 13;\n  grid-column-end: 10;\n}\n\n.grid_13_11 {\n  grid-column-start: 13;\n  grid-column-end: 11;\n}\n\n.grid_13_12 {\n  grid-column-start: 13;\n  grid-column-end: 12;\n}\n\n.grid_13_13 {\n  grid-column-start: 13;\n  grid-column-end: 13;\n}\n\n.grid_13_14 {\n  grid-column-start: 13;\n  grid-column-end: 14;\n}\n\n.grid_13_15 {\n  grid-column-start: 13;\n  grid-column-end: 15;\n}\n\n.grid_13_16 {\n  grid-column-start: 13;\n  grid-column-end: 16;\n}\n\n.grid_13_17 {\n  grid-column-start: 13;\n  grid-column-end: 17;\n}\n\n.grid_13_18 {\n  grid-column-start: 13;\n  grid-column-end: 18;\n}\n\n.grid_13_19 {\n  grid-column-start: 13;\n  grid-column-end: 19;\n}\n\n.grid_13_20 {\n  grid-column-start: 13;\n  grid-column-end: 20;\n}\n\n.grid_13_21 {\n  grid-column-start: 13;\n  grid-column-end: 21;\n}\n\n.grid_13_22 {\n  grid-column-start: 13;\n  grid-column-end: 22;\n}\n\n.grid_13_23 {\n  grid-column-start: 13;\n  grid-column-end: 23;\n}\n\n.grid_13_24 {\n  grid-column-start: 13;\n  grid-column-end: 24;\n}\n\n.grid_14_1 {\n  grid-column-start: 14;\n  grid-column-end: 1;\n}\n\n.grid_14_2 {\n  grid-column-start: 14;\n  grid-column-end: 2;\n}\n\n.grid_14_3 {\n  grid-column-start: 14;\n  grid-column-end: 3;\n}\n\n.grid_14_4 {\n  grid-column-start: 14;\n  grid-column-end: 4;\n}\n\n.grid_14_5 {\n  grid-column-start: 14;\n  grid-column-end: 5;\n}\n\n.grid_14_6 {\n  grid-column-start: 14;\n  grid-column-end: 6;\n}\n\n.grid_14_7 {\n  grid-column-start: 14;\n  grid-column-end: 7;\n}\n\n.grid_14_8 {\n  grid-column-start: 14;\n  grid-column-end: 8;\n}\n\n.grid_14_9 {\n  grid-column-start: 14;\n  grid-column-end: 9;\n}\n\n.grid_14_10 {\n  grid-column-start: 14;\n  grid-column-end: 10;\n}\n\n.grid_14_11 {\n  grid-column-start: 14;\n  grid-column-end: 11;\n}\n\n.grid_14_12 {\n  grid-column-start: 14;\n  grid-column-end: 12;\n}\n\n.grid_14_13 {\n  grid-column-start: 14;\n  grid-column-end: 13;\n}\n\n.grid_14_14 {\n  grid-column-start: 14;\n  grid-column-end: 14;\n}\n\n.grid_14_15 {\n  grid-column-start: 14;\n  grid-column-end: 15;\n}\n\n.grid_14_16 {\n  grid-column-start: 14;\n  grid-column-end: 16;\n}\n\n.grid_14_17 {\n  grid-column-start: 14;\n  grid-column-end: 17;\n}\n\n.grid_14_18 {\n  grid-column-start: 14;\n  grid-column-end: 18;\n}\n\n.grid_14_19 {\n  grid-column-start: 14;\n  grid-column-end: 19;\n}\n\n.grid_14_20 {\n  grid-column-start: 14;\n  grid-column-end: 20;\n}\n\n.grid_14_21 {\n  grid-column-start: 14;\n  grid-column-end: 21;\n}\n\n.grid_14_22 {\n  grid-column-start: 14;\n  grid-column-end: 22;\n}\n\n.grid_14_23 {\n  grid-column-start: 14;\n  grid-column-end: 23;\n}\n\n.grid_14_24 {\n  grid-column-start: 14;\n  grid-column-end: 24;\n}\n\n.grid_15_1 {\n  grid-column-start: 15;\n  grid-column-end: 1;\n}\n\n.grid_15_2 {\n  grid-column-start: 15;\n  grid-column-end: 2;\n}\n\n.grid_15_3 {\n  grid-column-start: 15;\n  grid-column-end: 3;\n}\n\n.grid_15_4 {\n  grid-column-start: 15;\n  grid-column-end: 4;\n}\n\n.grid_15_5 {\n  grid-column-start: 15;\n  grid-column-end: 5;\n}\n\n.grid_15_6 {\n  grid-column-start: 15;\n  grid-column-end: 6;\n}\n\n.grid_15_7 {\n  grid-column-start: 15;\n  grid-column-end: 7;\n}\n\n.grid_15_8 {\n  grid-column-start: 15;\n  grid-column-end: 8;\n}\n\n.grid_15_9 {\n  grid-column-start: 15;\n  grid-column-end: 9;\n}\n\n.grid_15_10 {\n  grid-column-start: 15;\n  grid-column-end: 10;\n}\n\n.grid_15_11 {\n  grid-column-start: 15;\n  grid-column-end: 11;\n}\n\n.grid_15_12 {\n  grid-column-start: 15;\n  grid-column-end: 12;\n}\n\n.grid_15_13 {\n  grid-column-start: 15;\n  grid-column-end: 13;\n}\n\n.grid_15_14 {\n  grid-column-start: 15;\n  grid-column-end: 14;\n}\n\n.grid_15_15 {\n  grid-column-start: 15;\n  grid-column-end: 15;\n}\n\n.grid_15_16 {\n  grid-column-start: 15;\n  grid-column-end: 16;\n}\n\n.grid_15_17 {\n  grid-column-start: 15;\n  grid-column-end: 17;\n}\n\n.grid_15_18 {\n  grid-column-start: 15;\n  grid-column-end: 18;\n}\n\n.grid_15_19 {\n  grid-column-start: 15;\n  grid-column-end: 19;\n}\n\n.grid_15_20 {\n  grid-column-start: 15;\n  grid-column-end: 20;\n}\n\n.grid_15_21 {\n  grid-column-start: 15;\n  grid-column-end: 21;\n}\n\n.grid_15_22 {\n  grid-column-start: 15;\n  grid-column-end: 22;\n}\n\n.grid_15_23 {\n  grid-column-start: 15;\n  grid-column-end: 23;\n}\n\n.grid_15_24 {\n  grid-column-start: 15;\n  grid-column-end: 24;\n}\n\n.grid_16_1 {\n  grid-column-start: 16;\n  grid-column-end: 1;\n}\n\n.grid_16_2 {\n  grid-column-start: 16;\n  grid-column-end: 2;\n}\n\n.grid_16_3 {\n  grid-column-start: 16;\n  grid-column-end: 3;\n}\n\n.grid_16_4 {\n  grid-column-start: 16;\n  grid-column-end: 4;\n}\n\n.grid_16_5 {\n  grid-column-start: 16;\n  grid-column-end: 5;\n}\n\n.grid_16_6 {\n  grid-column-start: 16;\n  grid-column-end: 6;\n}\n\n.grid_16_7 {\n  grid-column-start: 16;\n  grid-column-end: 7;\n}\n\n.grid_16_8 {\n  grid-column-start: 16;\n  grid-column-end: 8;\n}\n\n.grid_16_9 {\n  grid-column-start: 16;\n  grid-column-end: 9;\n}\n\n.grid_16_10 {\n  grid-column-start: 16;\n  grid-column-end: 10;\n}\n\n.grid_16_11 {\n  grid-column-start: 16;\n  grid-column-end: 11;\n}\n\n.grid_16_12 {\n  grid-column-start: 16;\n  grid-column-end: 12;\n}\n\n.grid_16_13 {\n  grid-column-start: 16;\n  grid-column-end: 13;\n}\n\n.grid_16_14 {\n  grid-column-start: 16;\n  grid-column-end: 14;\n}\n\n.grid_16_15 {\n  grid-column-start: 16;\n  grid-column-end: 15;\n}\n\n.grid_16_16 {\n  grid-column-start: 16;\n  grid-column-end: 16;\n}\n\n.grid_16_17 {\n  grid-column-start: 16;\n  grid-column-end: 17;\n}\n\n.grid_16_18 {\n  grid-column-start: 16;\n  grid-column-end: 18;\n}\n\n.grid_16_19 {\n  grid-column-start: 16;\n  grid-column-end: 19;\n}\n\n.grid_16_20 {\n  grid-column-start: 16;\n  grid-column-end: 20;\n}\n\n.grid_16_21 {\n  grid-column-start: 16;\n  grid-column-end: 21;\n}\n\n.grid_16_22 {\n  grid-column-start: 16;\n  grid-column-end: 22;\n}\n\n.grid_16_23 {\n  grid-column-start: 16;\n  grid-column-end: 23;\n}\n\n.grid_16_24 {\n  grid-column-start: 16;\n  grid-column-end: 24;\n}\n\n.grid_17_1 {\n  grid-column-start: 17;\n  grid-column-end: 1;\n}\n\n.grid_17_2 {\n  grid-column-start: 17;\n  grid-column-end: 2;\n}\n\n.grid_17_3 {\n  grid-column-start: 17;\n  grid-column-end: 3;\n}\n\n.grid_17_4 {\n  grid-column-start: 17;\n  grid-column-end: 4;\n}\n\n.grid_17_5 {\n  grid-column-start: 17;\n  grid-column-end: 5;\n}\n\n.grid_17_6 {\n  grid-column-start: 17;\n  grid-column-end: 6;\n}\n\n.grid_17_7 {\n  grid-column-start: 17;\n  grid-column-end: 7;\n}\n\n.grid_17_8 {\n  grid-column-start: 17;\n  grid-column-end: 8;\n}\n\n.grid_17_9 {\n  grid-column-start: 17;\n  grid-column-end: 9;\n}\n\n.grid_17_10 {\n  grid-column-start: 17;\n  grid-column-end: 10;\n}\n\n.grid_17_11 {\n  grid-column-start: 17;\n  grid-column-end: 11;\n}\n\n.grid_17_12 {\n  grid-column-start: 17;\n  grid-column-end: 12;\n}\n\n.grid_17_13 {\n  grid-column-start: 17;\n  grid-column-end: 13;\n}\n\n.grid_17_14 {\n  grid-column-start: 17;\n  grid-column-end: 14;\n}\n\n.grid_17_15 {\n  grid-column-start: 17;\n  grid-column-end: 15;\n}\n\n.grid_17_16 {\n  grid-column-start: 17;\n  grid-column-end: 16;\n}\n\n.grid_17_17 {\n  grid-column-start: 17;\n  grid-column-end: 17;\n}\n\n.grid_17_18 {\n  grid-column-start: 17;\n  grid-column-end: 18;\n}\n\n.grid_17_19 {\n  grid-column-start: 17;\n  grid-column-end: 19;\n}\n\n.grid_17_20 {\n  grid-column-start: 17;\n  grid-column-end: 20;\n}\n\n.grid_17_21 {\n  grid-column-start: 17;\n  grid-column-end: 21;\n}\n\n.grid_17_22 {\n  grid-column-start: 17;\n  grid-column-end: 22;\n}\n\n.grid_17_23 {\n  grid-column-start: 17;\n  grid-column-end: 23;\n}\n\n.grid_17_24 {\n  grid-column-start: 17;\n  grid-column-end: 24;\n}\n\n.grid_18_1 {\n  grid-column-start: 18;\n  grid-column-end: 1;\n}\n\n.grid_18_2 {\n  grid-column-start: 18;\n  grid-column-end: 2;\n}\n\n.grid_18_3 {\n  grid-column-start: 18;\n  grid-column-end: 3;\n}\n\n.grid_18_4 {\n  grid-column-start: 18;\n  grid-column-end: 4;\n}\n\n.grid_18_5 {\n  grid-column-start: 18;\n  grid-column-end: 5;\n}\n\n.grid_18_6 {\n  grid-column-start: 18;\n  grid-column-end: 6;\n}\n\n.grid_18_7 {\n  grid-column-start: 18;\n  grid-column-end: 7;\n}\n\n.grid_18_8 {\n  grid-column-start: 18;\n  grid-column-end: 8;\n}\n\n.grid_18_9 {\n  grid-column-start: 18;\n  grid-column-end: 9;\n}\n\n.grid_18_10 {\n  grid-column-start: 18;\n  grid-column-end: 10;\n}\n\n.grid_18_11 {\n  grid-column-start: 18;\n  grid-column-end: 11;\n}\n\n.grid_18_12 {\n  grid-column-start: 18;\n  grid-column-end: 12;\n}\n\n.grid_18_13 {\n  grid-column-start: 18;\n  grid-column-end: 13;\n}\n\n.grid_18_14 {\n  grid-column-start: 18;\n  grid-column-end: 14;\n}\n\n.grid_18_15 {\n  grid-column-start: 18;\n  grid-column-end: 15;\n}\n\n.grid_18_16 {\n  grid-column-start: 18;\n  grid-column-end: 16;\n}\n\n.grid_18_17 {\n  grid-column-start: 18;\n  grid-column-end: 17;\n}\n\n.grid_18_18 {\n  grid-column-start: 18;\n  grid-column-end: 18;\n}\n\n.grid_18_19 {\n  grid-column-start: 18;\n  grid-column-end: 19;\n}\n\n.grid_18_20 {\n  grid-column-start: 18;\n  grid-column-end: 20;\n}\n\n.grid_18_21 {\n  grid-column-start: 18;\n  grid-column-end: 21;\n}\n\n.grid_18_22 {\n  grid-column-start: 18;\n  grid-column-end: 22;\n}\n\n.grid_18_23 {\n  grid-column-start: 18;\n  grid-column-end: 23;\n}\n\n.grid_18_24 {\n  grid-column-start: 18;\n  grid-column-end: 24;\n}\n\n.grid_19_1 {\n  grid-column-start: 19;\n  grid-column-end: 1;\n}\n\n.grid_19_2 {\n  grid-column-start: 19;\n  grid-column-end: 2;\n}\n\n.grid_19_3 {\n  grid-column-start: 19;\n  grid-column-end: 3;\n}\n\n.grid_19_4 {\n  grid-column-start: 19;\n  grid-column-end: 4;\n}\n\n.grid_19_5 {\n  grid-column-start: 19;\n  grid-column-end: 5;\n}\n\n.grid_19_6 {\n  grid-column-start: 19;\n  grid-column-end: 6;\n}\n\n.grid_19_7 {\n  grid-column-start: 19;\n  grid-column-end: 7;\n}\n\n.grid_19_8 {\n  grid-column-start: 19;\n  grid-column-end: 8;\n}\n\n.grid_19_9 {\n  grid-column-start: 19;\n  grid-column-end: 9;\n}\n\n.grid_19_10 {\n  grid-column-start: 19;\n  grid-column-end: 10;\n}\n\n.grid_19_11 {\n  grid-column-start: 19;\n  grid-column-end: 11;\n}\n\n.grid_19_12 {\n  grid-column-start: 19;\n  grid-column-end: 12;\n}\n\n.grid_19_13 {\n  grid-column-start: 19;\n  grid-column-end: 13;\n}\n\n.grid_19_14 {\n  grid-column-start: 19;\n  grid-column-end: 14;\n}\n\n.grid_19_15 {\n  grid-column-start: 19;\n  grid-column-end: 15;\n}\n\n.grid_19_16 {\n  grid-column-start: 19;\n  grid-column-end: 16;\n}\n\n.grid_19_17 {\n  grid-column-start: 19;\n  grid-column-end: 17;\n}\n\n.grid_19_18 {\n  grid-column-start: 19;\n  grid-column-end: 18;\n}\n\n.grid_19_19 {\n  grid-column-start: 19;\n  grid-column-end: 19;\n}\n\n.grid_19_20 {\n  grid-column-start: 19;\n  grid-column-end: 20;\n}\n\n.grid_19_21 {\n  grid-column-start: 19;\n  grid-column-end: 21;\n}\n\n.grid_19_22 {\n  grid-column-start: 19;\n  grid-column-end: 22;\n}\n\n.grid_19_23 {\n  grid-column-start: 19;\n  grid-column-end: 23;\n}\n\n.grid_19_24 {\n  grid-column-start: 19;\n  grid-column-end: 24;\n}\n\n.grid_20_1 {\n  grid-column-start: 20;\n  grid-column-end: 1;\n}\n\n.grid_20_2 {\n  grid-column-start: 20;\n  grid-column-end: 2;\n}\n\n.grid_20_3 {\n  grid-column-start: 20;\n  grid-column-end: 3;\n}\n\n.grid_20_4 {\n  grid-column-start: 20;\n  grid-column-end: 4;\n}\n\n.grid_20_5 {\n  grid-column-start: 20;\n  grid-column-end: 5;\n}\n\n.grid_20_6 {\n  grid-column-start: 20;\n  grid-column-end: 6;\n}\n\n.grid_20_7 {\n  grid-column-start: 20;\n  grid-column-end: 7;\n}\n\n.grid_20_8 {\n  grid-column-start: 20;\n  grid-column-end: 8;\n}\n\n.grid_20_9 {\n  grid-column-start: 20;\n  grid-column-end: 9;\n}\n\n.grid_20_10 {\n  grid-column-start: 20;\n  grid-column-end: 10;\n}\n\n.grid_20_11 {\n  grid-column-start: 20;\n  grid-column-end: 11;\n}\n\n.grid_20_12 {\n  grid-column-start: 20;\n  grid-column-end: 12;\n}\n\n.grid_20_13 {\n  grid-column-start: 20;\n  grid-column-end: 13;\n}\n\n.grid_20_14 {\n  grid-column-start: 20;\n  grid-column-end: 14;\n}\n\n.grid_20_15 {\n  grid-column-start: 20;\n  grid-column-end: 15;\n}\n\n.grid_20_16 {\n  grid-column-start: 20;\n  grid-column-end: 16;\n}\n\n.grid_20_17 {\n  grid-column-start: 20;\n  grid-column-end: 17;\n}\n\n.grid_20_18 {\n  grid-column-start: 20;\n  grid-column-end: 18;\n}\n\n.grid_20_19 {\n  grid-column-start: 20;\n  grid-column-end: 19;\n}\n\n.grid_20_20 {\n  grid-column-start: 20;\n  grid-column-end: 20;\n}\n\n.grid_20_21 {\n  grid-column-start: 20;\n  grid-column-end: 21;\n}\n\n.grid_20_22 {\n  grid-column-start: 20;\n  grid-column-end: 22;\n}\n\n.grid_20_23 {\n  grid-column-start: 20;\n  grid-column-end: 23;\n}\n\n.grid_20_24 {\n  grid-column-start: 20;\n  grid-column-end: 24;\n}\n\n.grid_21_1 {\n  grid-column-start: 21;\n  grid-column-end: 1;\n}\n\n.grid_21_2 {\n  grid-column-start: 21;\n  grid-column-end: 2;\n}\n\n.grid_21_3 {\n  grid-column-start: 21;\n  grid-column-end: 3;\n}\n\n.grid_21_4 {\n  grid-column-start: 21;\n  grid-column-end: 4;\n}\n\n.grid_21_5 {\n  grid-column-start: 21;\n  grid-column-end: 5;\n}\n\n.grid_21_6 {\n  grid-column-start: 21;\n  grid-column-end: 6;\n}\n\n.grid_21_7 {\n  grid-column-start: 21;\n  grid-column-end: 7;\n}\n\n.grid_21_8 {\n  grid-column-start: 21;\n  grid-column-end: 8;\n}\n\n.grid_21_9 {\n  grid-column-start: 21;\n  grid-column-end: 9;\n}\n\n.grid_21_10 {\n  grid-column-start: 21;\n  grid-column-end: 10;\n}\n\n.grid_21_11 {\n  grid-column-start: 21;\n  grid-column-end: 11;\n}\n\n.grid_21_12 {\n  grid-column-start: 21;\n  grid-column-end: 12;\n}\n\n.grid_21_13 {\n  grid-column-start: 21;\n  grid-column-end: 13;\n}\n\n.grid_21_14 {\n  grid-column-start: 21;\n  grid-column-end: 14;\n}\n\n.grid_21_15 {\n  grid-column-start: 21;\n  grid-column-end: 15;\n}\n\n.grid_21_16 {\n  grid-column-start: 21;\n  grid-column-end: 16;\n}\n\n.grid_21_17 {\n  grid-column-start: 21;\n  grid-column-end: 17;\n}\n\n.grid_21_18 {\n  grid-column-start: 21;\n  grid-column-end: 18;\n}\n\n.grid_21_19 {\n  grid-column-start: 21;\n  grid-column-end: 19;\n}\n\n.grid_21_20 {\n  grid-column-start: 21;\n  grid-column-end: 20;\n}\n\n.grid_21_21 {\n  grid-column-start: 21;\n  grid-column-end: 21;\n}\n\n.grid_21_22 {\n  grid-column-start: 21;\n  grid-column-end: 22;\n}\n\n.grid_21_23 {\n  grid-column-start: 21;\n  grid-column-end: 23;\n}\n\n.grid_21_24 {\n  grid-column-start: 21;\n  grid-column-end: 24;\n}\n\n.grid_22_1 {\n  grid-column-start: 22;\n  grid-column-end: 1;\n}\n\n.grid_22_2 {\n  grid-column-start: 22;\n  grid-column-end: 2;\n}\n\n.grid_22_3 {\n  grid-column-start: 22;\n  grid-column-end: 3;\n}\n\n.grid_22_4 {\n  grid-column-start: 22;\n  grid-column-end: 4;\n}\n\n.grid_22_5 {\n  grid-column-start: 22;\n  grid-column-end: 5;\n}\n\n.grid_22_6 {\n  grid-column-start: 22;\n  grid-column-end: 6;\n}\n\n.grid_22_7 {\n  grid-column-start: 22;\n  grid-column-end: 7;\n}\n\n.grid_22_8 {\n  grid-column-start: 22;\n  grid-column-end: 8;\n}\n\n.grid_22_9 {\n  grid-column-start: 22;\n  grid-column-end: 9;\n}\n\n.grid_22_10 {\n  grid-column-start: 22;\n  grid-column-end: 10;\n}\n\n.grid_22_11 {\n  grid-column-start: 22;\n  grid-column-end: 11;\n}\n\n.grid_22_12 {\n  grid-column-start: 22;\n  grid-column-end: 12;\n}\n\n.grid_22_13 {\n  grid-column-start: 22;\n  grid-column-end: 13;\n}\n\n.grid_22_14 {\n  grid-column-start: 22;\n  grid-column-end: 14;\n}\n\n.grid_22_15 {\n  grid-column-start: 22;\n  grid-column-end: 15;\n}\n\n.grid_22_16 {\n  grid-column-start: 22;\n  grid-column-end: 16;\n}\n\n.grid_22_17 {\n  grid-column-start: 22;\n  grid-column-end: 17;\n}\n\n.grid_22_18 {\n  grid-column-start: 22;\n  grid-column-end: 18;\n}\n\n.grid_22_19 {\n  grid-column-start: 22;\n  grid-column-end: 19;\n}\n\n.grid_22_20 {\n  grid-column-start: 22;\n  grid-column-end: 20;\n}\n\n.grid_22_21 {\n  grid-column-start: 22;\n  grid-column-end: 21;\n}\n\n.grid_22_22 {\n  grid-column-start: 22;\n  grid-column-end: 22;\n}\n\n.grid_22_23 {\n  grid-column-start: 22;\n  grid-column-end: 23;\n}\n\n.grid_22_24 {\n  grid-column-start: 22;\n  grid-column-end: 24;\n}\n\n.grid_23_1 {\n  grid-column-start: 23;\n  grid-column-end: 1;\n}\n\n.grid_23_2 {\n  grid-column-start: 23;\n  grid-column-end: 2;\n}\n\n.grid_23_3 {\n  grid-column-start: 23;\n  grid-column-end: 3;\n}\n\n.grid_23_4 {\n  grid-column-start: 23;\n  grid-column-end: 4;\n}\n\n.grid_23_5 {\n  grid-column-start: 23;\n  grid-column-end: 5;\n}\n\n.grid_23_6 {\n  grid-column-start: 23;\n  grid-column-end: 6;\n}\n\n.grid_23_7 {\n  grid-column-start: 23;\n  grid-column-end: 7;\n}\n\n.grid_23_8 {\n  grid-column-start: 23;\n  grid-column-end: 8;\n}\n\n.grid_23_9 {\n  grid-column-start: 23;\n  grid-column-end: 9;\n}\n\n.grid_23_10 {\n  grid-column-start: 23;\n  grid-column-end: 10;\n}\n\n.grid_23_11 {\n  grid-column-start: 23;\n  grid-column-end: 11;\n}\n\n.grid_23_12 {\n  grid-column-start: 23;\n  grid-column-end: 12;\n}\n\n.grid_23_13 {\n  grid-column-start: 23;\n  grid-column-end: 13;\n}\n\n.grid_23_14 {\n  grid-column-start: 23;\n  grid-column-end: 14;\n}\n\n.grid_23_15 {\n  grid-column-start: 23;\n  grid-column-end: 15;\n}\n\n.grid_23_16 {\n  grid-column-start: 23;\n  grid-column-end: 16;\n}\n\n.grid_23_17 {\n  grid-column-start: 23;\n  grid-column-end: 17;\n}\n\n.grid_23_18 {\n  grid-column-start: 23;\n  grid-column-end: 18;\n}\n\n.grid_23_19 {\n  grid-column-start: 23;\n  grid-column-end: 19;\n}\n\n.grid_23_20 {\n  grid-column-start: 23;\n  grid-column-end: 20;\n}\n\n.grid_23_21 {\n  grid-column-start: 23;\n  grid-column-end: 21;\n}\n\n.grid_23_22 {\n  grid-column-start: 23;\n  grid-column-end: 22;\n}\n\n.grid_23_23 {\n  grid-column-start: 23;\n  grid-column-end: 23;\n}\n\n.grid_23_24 {\n  grid-column-start: 23;\n  grid-column-end: 24;\n}\n\n@media (max-width: 1024px) {\n  .l-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .l-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .l-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .l-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .l-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .l-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .l-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .l-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .l-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .l-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .l-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .l-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .l-grid_1_13 {\n    grid-column-start: 1;\n    grid-column-end: 13;\n  }\n  .l-grid_1_14 {\n    grid-column-start: 1;\n    grid-column-end: 14;\n  }\n  .l-grid_1_15 {\n    grid-column-start: 1;\n    grid-column-end: 15;\n  }\n  .l-grid_1_16 {\n    grid-column-start: 1;\n    grid-column-end: 16;\n  }\n  .l-grid_1_17 {\n    grid-column-start: 1;\n    grid-column-end: 17;\n  }\n  .l-grid_1_18 {\n    grid-column-start: 1;\n    grid-column-end: 18;\n  }\n  .l-grid_1_19 {\n    grid-column-start: 1;\n    grid-column-end: 19;\n  }\n  .l-grid_1_20 {\n    grid-column-start: 1;\n    grid-column-end: 20;\n  }\n  .l-grid_1_21 {\n    grid-column-start: 1;\n    grid-column-end: 21;\n  }\n  .l-grid_1_22 {\n    grid-column-start: 1;\n    grid-column-end: 22;\n  }\n  .l-grid_1_23 {\n    grid-column-start: 1;\n    grid-column-end: 23;\n  }\n  .l-grid_1_24 {\n    grid-column-start: 1;\n    grid-column-end: 24;\n  }\n  .l-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .l-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .l-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .l-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .l-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .l-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .l-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .l-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .l-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .l-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .l-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .l-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .l-grid_2_13 {\n    grid-column-start: 2;\n    grid-column-end: 13;\n  }\n  .l-grid_2_14 {\n    grid-column-start: 2;\n    grid-column-end: 14;\n  }\n  .l-grid_2_15 {\n    grid-column-start: 2;\n    grid-column-end: 15;\n  }\n  .l-grid_2_16 {\n    grid-column-start: 2;\n    grid-column-end: 16;\n  }\n  .l-grid_2_17 {\n    grid-column-start: 2;\n    grid-column-end: 17;\n  }\n  .l-grid_2_18 {\n    grid-column-start: 2;\n    grid-column-end: 18;\n  }\n  .l-grid_2_19 {\n    grid-column-start: 2;\n    grid-column-end: 19;\n  }\n  .l-grid_2_20 {\n    grid-column-start: 2;\n    grid-column-end: 20;\n  }\n  .l-grid_2_21 {\n    grid-column-start: 2;\n    grid-column-end: 21;\n  }\n  .l-grid_2_22 {\n    grid-column-start: 2;\n    grid-column-end: 22;\n  }\n  .l-grid_2_23 {\n    grid-column-start: 2;\n    grid-column-end: 23;\n  }\n  .l-grid_2_24 {\n    grid-column-start: 2;\n    grid-column-end: 24;\n  }\n  .l-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .l-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .l-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .l-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .l-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .l-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .l-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .l-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .l-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .l-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .l-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .l-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .l-grid_3_13 {\n    grid-column-start: 3;\n    grid-column-end: 13;\n  }\n  .l-grid_3_14 {\n    grid-column-start: 3;\n    grid-column-end: 14;\n  }\n  .l-grid_3_15 {\n    grid-column-start: 3;\n    grid-column-end: 15;\n  }\n  .l-grid_3_16 {\n    grid-column-start: 3;\n    grid-column-end: 16;\n  }\n  .l-grid_3_17 {\n    grid-column-start: 3;\n    grid-column-end: 17;\n  }\n  .l-grid_3_18 {\n    grid-column-start: 3;\n    grid-column-end: 18;\n  }\n  .l-grid_3_19 {\n    grid-column-start: 3;\n    grid-column-end: 19;\n  }\n  .l-grid_3_20 {\n    grid-column-start: 3;\n    grid-column-end: 20;\n  }\n  .l-grid_3_21 {\n    grid-column-start: 3;\n    grid-column-end: 21;\n  }\n  .l-grid_3_22 {\n    grid-column-start: 3;\n    grid-column-end: 22;\n  }\n  .l-grid_3_23 {\n    grid-column-start: 3;\n    grid-column-end: 23;\n  }\n  .l-grid_3_24 {\n    grid-column-start: 3;\n    grid-column-end: 24;\n  }\n  .l-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .l-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .l-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .l-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .l-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .l-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .l-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .l-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .l-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .l-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .l-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .l-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .l-grid_4_13 {\n    grid-column-start: 4;\n    grid-column-end: 13;\n  }\n  .l-grid_4_14 {\n    grid-column-start: 4;\n    grid-column-end: 14;\n  }\n  .l-grid_4_15 {\n    grid-column-start: 4;\n    grid-column-end: 15;\n  }\n  .l-grid_4_16 {\n    grid-column-start: 4;\n    grid-column-end: 16;\n  }\n  .l-grid_4_17 {\n    grid-column-start: 4;\n    grid-column-end: 17;\n  }\n  .l-grid_4_18 {\n    grid-column-start: 4;\n    grid-column-end: 18;\n  }\n  .l-grid_4_19 {\n    grid-column-start: 4;\n    grid-column-end: 19;\n  }\n  .l-grid_4_20 {\n    grid-column-start: 4;\n    grid-column-end: 20;\n  }\n  .l-grid_4_21 {\n    grid-column-start: 4;\n    grid-column-end: 21;\n  }\n  .l-grid_4_22 {\n    grid-column-start: 4;\n    grid-column-end: 22;\n  }\n  .l-grid_4_23 {\n    grid-column-start: 4;\n    grid-column-end: 23;\n  }\n  .l-grid_4_24 {\n    grid-column-start: 4;\n    grid-column-end: 24;\n  }\n  .l-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .l-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .l-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .l-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .l-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .l-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .l-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .l-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .l-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .l-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .l-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .l-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .l-grid_5_13 {\n    grid-column-start: 5;\n    grid-column-end: 13;\n  }\n  .l-grid_5_14 {\n    grid-column-start: 5;\n    grid-column-end: 14;\n  }\n  .l-grid_5_15 {\n    grid-column-start: 5;\n    grid-column-end: 15;\n  }\n  .l-grid_5_16 {\n    grid-column-start: 5;\n    grid-column-end: 16;\n  }\n  .l-grid_5_17 {\n    grid-column-start: 5;\n    grid-column-end: 17;\n  }\n  .l-grid_5_18 {\n    grid-column-start: 5;\n    grid-column-end: 18;\n  }\n  .l-grid_5_19 {\n    grid-column-start: 5;\n    grid-column-end: 19;\n  }\n  .l-grid_5_20 {\n    grid-column-start: 5;\n    grid-column-end: 20;\n  }\n  .l-grid_5_21 {\n    grid-column-start: 5;\n    grid-column-end: 21;\n  }\n  .l-grid_5_22 {\n    grid-column-start: 5;\n    grid-column-end: 22;\n  }\n  .l-grid_5_23 {\n    grid-column-start: 5;\n    grid-column-end: 23;\n  }\n  .l-grid_5_24 {\n    grid-column-start: 5;\n    grid-column-end: 24;\n  }\n  .l-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .l-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .l-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .l-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .l-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .l-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .l-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .l-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .l-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .l-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .l-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .l-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .l-grid_6_13 {\n    grid-column-start: 6;\n    grid-column-end: 13;\n  }\n  .l-grid_6_14 {\n    grid-column-start: 6;\n    grid-column-end: 14;\n  }\n  .l-grid_6_15 {\n    grid-column-start: 6;\n    grid-column-end: 15;\n  }\n  .l-grid_6_16 {\n    grid-column-start: 6;\n    grid-column-end: 16;\n  }\n  .l-grid_6_17 {\n    grid-column-start: 6;\n    grid-column-end: 17;\n  }\n  .l-grid_6_18 {\n    grid-column-start: 6;\n    grid-column-end: 18;\n  }\n  .l-grid_6_19 {\n    grid-column-start: 6;\n    grid-column-end: 19;\n  }\n  .l-grid_6_20 {\n    grid-column-start: 6;\n    grid-column-end: 20;\n  }\n  .l-grid_6_21 {\n    grid-column-start: 6;\n    grid-column-end: 21;\n  }\n  .l-grid_6_22 {\n    grid-column-start: 6;\n    grid-column-end: 22;\n  }\n  .l-grid_6_23 {\n    grid-column-start: 6;\n    grid-column-end: 23;\n  }\n  .l-grid_6_24 {\n    grid-column-start: 6;\n    grid-column-end: 24;\n  }\n  .l-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .l-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .l-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .l-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .l-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .l-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .l-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .l-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .l-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .l-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .l-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .l-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .l-grid_7_13 {\n    grid-column-start: 7;\n    grid-column-end: 13;\n  }\n  .l-grid_7_14 {\n    grid-column-start: 7;\n    grid-column-end: 14;\n  }\n  .l-grid_7_15 {\n    grid-column-start: 7;\n    grid-column-end: 15;\n  }\n  .l-grid_7_16 {\n    grid-column-start: 7;\n    grid-column-end: 16;\n  }\n  .l-grid_7_17 {\n    grid-column-start: 7;\n    grid-column-end: 17;\n  }\n  .l-grid_7_18 {\n    grid-column-start: 7;\n    grid-column-end: 18;\n  }\n  .l-grid_7_19 {\n    grid-column-start: 7;\n    grid-column-end: 19;\n  }\n  .l-grid_7_20 {\n    grid-column-start: 7;\n    grid-column-end: 20;\n  }\n  .l-grid_7_21 {\n    grid-column-start: 7;\n    grid-column-end: 21;\n  }\n  .l-grid_7_22 {\n    grid-column-start: 7;\n    grid-column-end: 22;\n  }\n  .l-grid_7_23 {\n    grid-column-start: 7;\n    grid-column-end: 23;\n  }\n  .l-grid_7_24 {\n    grid-column-start: 7;\n    grid-column-end: 24;\n  }\n  .l-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .l-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .l-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .l-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .l-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .l-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .l-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .l-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .l-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .l-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .l-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .l-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .l-grid_8_13 {\n    grid-column-start: 8;\n    grid-column-end: 13;\n  }\n  .l-grid_8_14 {\n    grid-column-start: 8;\n    grid-column-end: 14;\n  }\n  .l-grid_8_15 {\n    grid-column-start: 8;\n    grid-column-end: 15;\n  }\n  .l-grid_8_16 {\n    grid-column-start: 8;\n    grid-column-end: 16;\n  }\n  .l-grid_8_17 {\n    grid-column-start: 8;\n    grid-column-end: 17;\n  }\n  .l-grid_8_18 {\n    grid-column-start: 8;\n    grid-column-end: 18;\n  }\n  .l-grid_8_19 {\n    grid-column-start: 8;\n    grid-column-end: 19;\n  }\n  .l-grid_8_20 {\n    grid-column-start: 8;\n    grid-column-end: 20;\n  }\n  .l-grid_8_21 {\n    grid-column-start: 8;\n    grid-column-end: 21;\n  }\n  .l-grid_8_22 {\n    grid-column-start: 8;\n    grid-column-end: 22;\n  }\n  .l-grid_8_23 {\n    grid-column-start: 8;\n    grid-column-end: 23;\n  }\n  .l-grid_8_24 {\n    grid-column-start: 8;\n    grid-column-end: 24;\n  }\n  .l-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .l-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .l-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .l-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .l-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .l-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .l-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .l-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .l-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .l-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .l-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .l-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .l-grid_9_13 {\n    grid-column-start: 9;\n    grid-column-end: 13;\n  }\n  .l-grid_9_14 {\n    grid-column-start: 9;\n    grid-column-end: 14;\n  }\n  .l-grid_9_15 {\n    grid-column-start: 9;\n    grid-column-end: 15;\n  }\n  .l-grid_9_16 {\n    grid-column-start: 9;\n    grid-column-end: 16;\n  }\n  .l-grid_9_17 {\n    grid-column-start: 9;\n    grid-column-end: 17;\n  }\n  .l-grid_9_18 {\n    grid-column-start: 9;\n    grid-column-end: 18;\n  }\n  .l-grid_9_19 {\n    grid-column-start: 9;\n    grid-column-end: 19;\n  }\n  .l-grid_9_20 {\n    grid-column-start: 9;\n    grid-column-end: 20;\n  }\n  .l-grid_9_21 {\n    grid-column-start: 9;\n    grid-column-end: 21;\n  }\n  .l-grid_9_22 {\n    grid-column-start: 9;\n    grid-column-end: 22;\n  }\n  .l-grid_9_23 {\n    grid-column-start: 9;\n    grid-column-end: 23;\n  }\n  .l-grid_9_24 {\n    grid-column-start: 9;\n    grid-column-end: 24;\n  }\n  .l-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .l-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .l-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .l-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .l-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .l-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .l-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .l-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .l-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .l-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .l-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .l-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .l-grid_10_13 {\n    grid-column-start: 10;\n    grid-column-end: 13;\n  }\n  .l-grid_10_14 {\n    grid-column-start: 10;\n    grid-column-end: 14;\n  }\n  .l-grid_10_15 {\n    grid-column-start: 10;\n    grid-column-end: 15;\n  }\n  .l-grid_10_16 {\n    grid-column-start: 10;\n    grid-column-end: 16;\n  }\n  .l-grid_10_17 {\n    grid-column-start: 10;\n    grid-column-end: 17;\n  }\n  .l-grid_10_18 {\n    grid-column-start: 10;\n    grid-column-end: 18;\n  }\n  .l-grid_10_19 {\n    grid-column-start: 10;\n    grid-column-end: 19;\n  }\n  .l-grid_10_20 {\n    grid-column-start: 10;\n    grid-column-end: 20;\n  }\n  .l-grid_10_21 {\n    grid-column-start: 10;\n    grid-column-end: 21;\n  }\n  .l-grid_10_22 {\n    grid-column-start: 10;\n    grid-column-end: 22;\n  }\n  .l-grid_10_23 {\n    grid-column-start: 10;\n    grid-column-end: 23;\n  }\n  .l-grid_10_24 {\n    grid-column-start: 10;\n    grid-column-end: 24;\n  }\n  .l-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .l-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .l-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .l-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .l-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .l-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .l-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .l-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .l-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .l-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .l-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .l-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n  .l-grid_11_13 {\n    grid-column-start: 11;\n    grid-column-end: 13;\n  }\n  .l-grid_11_14 {\n    grid-column-start: 11;\n    grid-column-end: 14;\n  }\n  .l-grid_11_15 {\n    grid-column-start: 11;\n    grid-column-end: 15;\n  }\n  .l-grid_11_16 {\n    grid-column-start: 11;\n    grid-column-end: 16;\n  }\n  .l-grid_11_17 {\n    grid-column-start: 11;\n    grid-column-end: 17;\n  }\n  .l-grid_11_18 {\n    grid-column-start: 11;\n    grid-column-end: 18;\n  }\n  .l-grid_11_19 {\n    grid-column-start: 11;\n    grid-column-end: 19;\n  }\n  .l-grid_11_20 {\n    grid-column-start: 11;\n    grid-column-end: 20;\n  }\n  .l-grid_11_21 {\n    grid-column-start: 11;\n    grid-column-end: 21;\n  }\n  .l-grid_11_22 {\n    grid-column-start: 11;\n    grid-column-end: 22;\n  }\n  .l-grid_11_23 {\n    grid-column-start: 11;\n    grid-column-end: 23;\n  }\n  .l-grid_11_24 {\n    grid-column-start: 11;\n    grid-column-end: 24;\n  }\n  .l-grid_12_1 {\n    grid-column-start: 12;\n    grid-column-end: 1;\n  }\n  .l-grid_12_2 {\n    grid-column-start: 12;\n    grid-column-end: 2;\n  }\n  .l-grid_12_3 {\n    grid-column-start: 12;\n    grid-column-end: 3;\n  }\n  .l-grid_12_4 {\n    grid-column-start: 12;\n    grid-column-end: 4;\n  }\n  .l-grid_12_5 {\n    grid-column-start: 12;\n    grid-column-end: 5;\n  }\n  .l-grid_12_6 {\n    grid-column-start: 12;\n    grid-column-end: 6;\n  }\n  .l-grid_12_7 {\n    grid-column-start: 12;\n    grid-column-end: 7;\n  }\n  .l-grid_12_8 {\n    grid-column-start: 12;\n    grid-column-end: 8;\n  }\n  .l-grid_12_9 {\n    grid-column-start: 12;\n    grid-column-end: 9;\n  }\n  .l-grid_12_10 {\n    grid-column-start: 12;\n    grid-column-end: 10;\n  }\n  .l-grid_12_11 {\n    grid-column-start: 12;\n    grid-column-end: 11;\n  }\n  .l-grid_12_12 {\n    grid-column-start: 12;\n    grid-column-end: 12;\n  }\n  .l-grid_12_13 {\n    grid-column-start: 12;\n    grid-column-end: 13;\n  }\n  .l-grid_12_14 {\n    grid-column-start: 12;\n    grid-column-end: 14;\n  }\n  .l-grid_12_15 {\n    grid-column-start: 12;\n    grid-column-end: 15;\n  }\n  .l-grid_12_16 {\n    grid-column-start: 12;\n    grid-column-end: 16;\n  }\n  .l-grid_12_17 {\n    grid-column-start: 12;\n    grid-column-end: 17;\n  }\n  .l-grid_12_18 {\n    grid-column-start: 12;\n    grid-column-end: 18;\n  }\n  .l-grid_12_19 {\n    grid-column-start: 12;\n    grid-column-end: 19;\n  }\n  .l-grid_12_20 {\n    grid-column-start: 12;\n    grid-column-end: 20;\n  }\n  .l-grid_12_21 {\n    grid-column-start: 12;\n    grid-column-end: 21;\n  }\n  .l-grid_12_22 {\n    grid-column-start: 12;\n    grid-column-end: 22;\n  }\n  .l-grid_12_23 {\n    grid-column-start: 12;\n    grid-column-end: 23;\n  }\n  .l-grid_12_24 {\n    grid-column-start: 12;\n    grid-column-end: 24;\n  }\n  .l-grid_13_1 {\n    grid-column-start: 13;\n    grid-column-end: 1;\n  }\n  .l-grid_13_2 {\n    grid-column-start: 13;\n    grid-column-end: 2;\n  }\n  .l-grid_13_3 {\n    grid-column-start: 13;\n    grid-column-end: 3;\n  }\n  .l-grid_13_4 {\n    grid-column-start: 13;\n    grid-column-end: 4;\n  }\n  .l-grid_13_5 {\n    grid-column-start: 13;\n    grid-column-end: 5;\n  }\n  .l-grid_13_6 {\n    grid-column-start: 13;\n    grid-column-end: 6;\n  }\n  .l-grid_13_7 {\n    grid-column-start: 13;\n    grid-column-end: 7;\n  }\n  .l-grid_13_8 {\n    grid-column-start: 13;\n    grid-column-end: 8;\n  }\n  .l-grid_13_9 {\n    grid-column-start: 13;\n    grid-column-end: 9;\n  }\n  .l-grid_13_10 {\n    grid-column-start: 13;\n    grid-column-end: 10;\n  }\n  .l-grid_13_11 {\n    grid-column-start: 13;\n    grid-column-end: 11;\n  }\n  .l-grid_13_12 {\n    grid-column-start: 13;\n    grid-column-end: 12;\n  }\n  .l-grid_13_13 {\n    grid-column-start: 13;\n    grid-column-end: 13;\n  }\n  .l-grid_13_14 {\n    grid-column-start: 13;\n    grid-column-end: 14;\n  }\n  .l-grid_13_15 {\n    grid-column-start: 13;\n    grid-column-end: 15;\n  }\n  .l-grid_13_16 {\n    grid-column-start: 13;\n    grid-column-end: 16;\n  }\n  .l-grid_13_17 {\n    grid-column-start: 13;\n    grid-column-end: 17;\n  }\n  .l-grid_13_18 {\n    grid-column-start: 13;\n    grid-column-end: 18;\n  }\n  .l-grid_13_19 {\n    grid-column-start: 13;\n    grid-column-end: 19;\n  }\n  .l-grid_13_20 {\n    grid-column-start: 13;\n    grid-column-end: 20;\n  }\n  .l-grid_13_21 {\n    grid-column-start: 13;\n    grid-column-end: 21;\n  }\n  .l-grid_13_22 {\n    grid-column-start: 13;\n    grid-column-end: 22;\n  }\n  .l-grid_13_23 {\n    grid-column-start: 13;\n    grid-column-end: 23;\n  }\n  .l-grid_13_24 {\n    grid-column-start: 13;\n    grid-column-end: 24;\n  }\n  .l-grid_14_1 {\n    grid-column-start: 14;\n    grid-column-end: 1;\n  }\n  .l-grid_14_2 {\n    grid-column-start: 14;\n    grid-column-end: 2;\n  }\n  .l-grid_14_3 {\n    grid-column-start: 14;\n    grid-column-end: 3;\n  }\n  .l-grid_14_4 {\n    grid-column-start: 14;\n    grid-column-end: 4;\n  }\n  .l-grid_14_5 {\n    grid-column-start: 14;\n    grid-column-end: 5;\n  }\n  .l-grid_14_6 {\n    grid-column-start: 14;\n    grid-column-end: 6;\n  }\n  .l-grid_14_7 {\n    grid-column-start: 14;\n    grid-column-end: 7;\n  }\n  .l-grid_14_8 {\n    grid-column-start: 14;\n    grid-column-end: 8;\n  }\n  .l-grid_14_9 {\n    grid-column-start: 14;\n    grid-column-end: 9;\n  }\n  .l-grid_14_10 {\n    grid-column-start: 14;\n    grid-column-end: 10;\n  }\n  .l-grid_14_11 {\n    grid-column-start: 14;\n    grid-column-end: 11;\n  }\n  .l-grid_14_12 {\n    grid-column-start: 14;\n    grid-column-end: 12;\n  }\n  .l-grid_14_13 {\n    grid-column-start: 14;\n    grid-column-end: 13;\n  }\n  .l-grid_14_14 {\n    grid-column-start: 14;\n    grid-column-end: 14;\n  }\n  .l-grid_14_15 {\n    grid-column-start: 14;\n    grid-column-end: 15;\n  }\n  .l-grid_14_16 {\n    grid-column-start: 14;\n    grid-column-end: 16;\n  }\n  .l-grid_14_17 {\n    grid-column-start: 14;\n    grid-column-end: 17;\n  }\n  .l-grid_14_18 {\n    grid-column-start: 14;\n    grid-column-end: 18;\n  }\n  .l-grid_14_19 {\n    grid-column-start: 14;\n    grid-column-end: 19;\n  }\n  .l-grid_14_20 {\n    grid-column-start: 14;\n    grid-column-end: 20;\n  }\n  .l-grid_14_21 {\n    grid-column-start: 14;\n    grid-column-end: 21;\n  }\n  .l-grid_14_22 {\n    grid-column-start: 14;\n    grid-column-end: 22;\n  }\n  .l-grid_14_23 {\n    grid-column-start: 14;\n    grid-column-end: 23;\n  }\n  .l-grid_14_24 {\n    grid-column-start: 14;\n    grid-column-end: 24;\n  }\n  .l-grid_15_1 {\n    grid-column-start: 15;\n    grid-column-end: 1;\n  }\n  .l-grid_15_2 {\n    grid-column-start: 15;\n    grid-column-end: 2;\n  }\n  .l-grid_15_3 {\n    grid-column-start: 15;\n    grid-column-end: 3;\n  }\n  .l-grid_15_4 {\n    grid-column-start: 15;\n    grid-column-end: 4;\n  }\n  .l-grid_15_5 {\n    grid-column-start: 15;\n    grid-column-end: 5;\n  }\n  .l-grid_15_6 {\n    grid-column-start: 15;\n    grid-column-end: 6;\n  }\n  .l-grid_15_7 {\n    grid-column-start: 15;\n    grid-column-end: 7;\n  }\n  .l-grid_15_8 {\n    grid-column-start: 15;\n    grid-column-end: 8;\n  }\n  .l-grid_15_9 {\n    grid-column-start: 15;\n    grid-column-end: 9;\n  }\n  .l-grid_15_10 {\n    grid-column-start: 15;\n    grid-column-end: 10;\n  }\n  .l-grid_15_11 {\n    grid-column-start: 15;\n    grid-column-end: 11;\n  }\n  .l-grid_15_12 {\n    grid-column-start: 15;\n    grid-column-end: 12;\n  }\n  .l-grid_15_13 {\n    grid-column-start: 15;\n    grid-column-end: 13;\n  }\n  .l-grid_15_14 {\n    grid-column-start: 15;\n    grid-column-end: 14;\n  }\n  .l-grid_15_15 {\n    grid-column-start: 15;\n    grid-column-end: 15;\n  }\n  .l-grid_15_16 {\n    grid-column-start: 15;\n    grid-column-end: 16;\n  }\n  .l-grid_15_17 {\n    grid-column-start: 15;\n    grid-column-end: 17;\n  }\n  .l-grid_15_18 {\n    grid-column-start: 15;\n    grid-column-end: 18;\n  }\n  .l-grid_15_19 {\n    grid-column-start: 15;\n    grid-column-end: 19;\n  }\n  .l-grid_15_20 {\n    grid-column-start: 15;\n    grid-column-end: 20;\n  }\n  .l-grid_15_21 {\n    grid-column-start: 15;\n    grid-column-end: 21;\n  }\n  .l-grid_15_22 {\n    grid-column-start: 15;\n    grid-column-end: 22;\n  }\n  .l-grid_15_23 {\n    grid-column-start: 15;\n    grid-column-end: 23;\n  }\n  .l-grid_15_24 {\n    grid-column-start: 15;\n    grid-column-end: 24;\n  }\n  .l-grid_16_1 {\n    grid-column-start: 16;\n    grid-column-end: 1;\n  }\n  .l-grid_16_2 {\n    grid-column-start: 16;\n    grid-column-end: 2;\n  }\n  .l-grid_16_3 {\n    grid-column-start: 16;\n    grid-column-end: 3;\n  }\n  .l-grid_16_4 {\n    grid-column-start: 16;\n    grid-column-end: 4;\n  }\n  .l-grid_16_5 {\n    grid-column-start: 16;\n    grid-column-end: 5;\n  }\n  .l-grid_16_6 {\n    grid-column-start: 16;\n    grid-column-end: 6;\n  }\n  .l-grid_16_7 {\n    grid-column-start: 16;\n    grid-column-end: 7;\n  }\n  .l-grid_16_8 {\n    grid-column-start: 16;\n    grid-column-end: 8;\n  }\n  .l-grid_16_9 {\n    grid-column-start: 16;\n    grid-column-end: 9;\n  }\n  .l-grid_16_10 {\n    grid-column-start: 16;\n    grid-column-end: 10;\n  }\n  .l-grid_16_11 {\n    grid-column-start: 16;\n    grid-column-end: 11;\n  }\n  .l-grid_16_12 {\n    grid-column-start: 16;\n    grid-column-end: 12;\n  }\n  .l-grid_16_13 {\n    grid-column-start: 16;\n    grid-column-end: 13;\n  }\n  .l-grid_16_14 {\n    grid-column-start: 16;\n    grid-column-end: 14;\n  }\n  .l-grid_16_15 {\n    grid-column-start: 16;\n    grid-column-end: 15;\n  }\n  .l-grid_16_16 {\n    grid-column-start: 16;\n    grid-column-end: 16;\n  }\n  .l-grid_16_17 {\n    grid-column-start: 16;\n    grid-column-end: 17;\n  }\n  .l-grid_16_18 {\n    grid-column-start: 16;\n    grid-column-end: 18;\n  }\n  .l-grid_16_19 {\n    grid-column-start: 16;\n    grid-column-end: 19;\n  }\n  .l-grid_16_20 {\n    grid-column-start: 16;\n    grid-column-end: 20;\n  }\n  .l-grid_16_21 {\n    grid-column-start: 16;\n    grid-column-end: 21;\n  }\n  .l-grid_16_22 {\n    grid-column-start: 16;\n    grid-column-end: 22;\n  }\n  .l-grid_16_23 {\n    grid-column-start: 16;\n    grid-column-end: 23;\n  }\n  .l-grid_16_24 {\n    grid-column-start: 16;\n    grid-column-end: 24;\n  }\n  .l-grid_17_1 {\n    grid-column-start: 17;\n    grid-column-end: 1;\n  }\n  .l-grid_17_2 {\n    grid-column-start: 17;\n    grid-column-end: 2;\n  }\n  .l-grid_17_3 {\n    grid-column-start: 17;\n    grid-column-end: 3;\n  }\n  .l-grid_17_4 {\n    grid-column-start: 17;\n    grid-column-end: 4;\n  }\n  .l-grid_17_5 {\n    grid-column-start: 17;\n    grid-column-end: 5;\n  }\n  .l-grid_17_6 {\n    grid-column-start: 17;\n    grid-column-end: 6;\n  }\n  .l-grid_17_7 {\n    grid-column-start: 17;\n    grid-column-end: 7;\n  }\n  .l-grid_17_8 {\n    grid-column-start: 17;\n    grid-column-end: 8;\n  }\n  .l-grid_17_9 {\n    grid-column-start: 17;\n    grid-column-end: 9;\n  }\n  .l-grid_17_10 {\n    grid-column-start: 17;\n    grid-column-end: 10;\n  }\n  .l-grid_17_11 {\n    grid-column-start: 17;\n    grid-column-end: 11;\n  }\n  .l-grid_17_12 {\n    grid-column-start: 17;\n    grid-column-end: 12;\n  }\n  .l-grid_17_13 {\n    grid-column-start: 17;\n    grid-column-end: 13;\n  }\n  .l-grid_17_14 {\n    grid-column-start: 17;\n    grid-column-end: 14;\n  }\n  .l-grid_17_15 {\n    grid-column-start: 17;\n    grid-column-end: 15;\n  }\n  .l-grid_17_16 {\n    grid-column-start: 17;\n    grid-column-end: 16;\n  }\n  .l-grid_17_17 {\n    grid-column-start: 17;\n    grid-column-end: 17;\n  }\n  .l-grid_17_18 {\n    grid-column-start: 17;\n    grid-column-end: 18;\n  }\n  .l-grid_17_19 {\n    grid-column-start: 17;\n    grid-column-end: 19;\n  }\n  .l-grid_17_20 {\n    grid-column-start: 17;\n    grid-column-end: 20;\n  }\n  .l-grid_17_21 {\n    grid-column-start: 17;\n    grid-column-end: 21;\n  }\n  .l-grid_17_22 {\n    grid-column-start: 17;\n    grid-column-end: 22;\n  }\n  .l-grid_17_23 {\n    grid-column-start: 17;\n    grid-column-end: 23;\n  }\n  .l-grid_17_24 {\n    grid-column-start: 17;\n    grid-column-end: 24;\n  }\n  .l-grid_18_1 {\n    grid-column-start: 18;\n    grid-column-end: 1;\n  }\n  .l-grid_18_2 {\n    grid-column-start: 18;\n    grid-column-end: 2;\n  }\n  .l-grid_18_3 {\n    grid-column-start: 18;\n    grid-column-end: 3;\n  }\n  .l-grid_18_4 {\n    grid-column-start: 18;\n    grid-column-end: 4;\n  }\n  .l-grid_18_5 {\n    grid-column-start: 18;\n    grid-column-end: 5;\n  }\n  .l-grid_18_6 {\n    grid-column-start: 18;\n    grid-column-end: 6;\n  }\n  .l-grid_18_7 {\n    grid-column-start: 18;\n    grid-column-end: 7;\n  }\n  .l-grid_18_8 {\n    grid-column-start: 18;\n    grid-column-end: 8;\n  }\n  .l-grid_18_9 {\n    grid-column-start: 18;\n    grid-column-end: 9;\n  }\n  .l-grid_18_10 {\n    grid-column-start: 18;\n    grid-column-end: 10;\n  }\n  .l-grid_18_11 {\n    grid-column-start: 18;\n    grid-column-end: 11;\n  }\n  .l-grid_18_12 {\n    grid-column-start: 18;\n    grid-column-end: 12;\n  }\n  .l-grid_18_13 {\n    grid-column-start: 18;\n    grid-column-end: 13;\n  }\n  .l-grid_18_14 {\n    grid-column-start: 18;\n    grid-column-end: 14;\n  }\n  .l-grid_18_15 {\n    grid-column-start: 18;\n    grid-column-end: 15;\n  }\n  .l-grid_18_16 {\n    grid-column-start: 18;\n    grid-column-end: 16;\n  }\n  .l-grid_18_17 {\n    grid-column-start: 18;\n    grid-column-end: 17;\n  }\n  .l-grid_18_18 {\n    grid-column-start: 18;\n    grid-column-end: 18;\n  }\n  .l-grid_18_19 {\n    grid-column-start: 18;\n    grid-column-end: 19;\n  }\n  .l-grid_18_20 {\n    grid-column-start: 18;\n    grid-column-end: 20;\n  }\n  .l-grid_18_21 {\n    grid-column-start: 18;\n    grid-column-end: 21;\n  }\n  .l-grid_18_22 {\n    grid-column-start: 18;\n    grid-column-end: 22;\n  }\n  .l-grid_18_23 {\n    grid-column-start: 18;\n    grid-column-end: 23;\n  }\n  .l-grid_18_24 {\n    grid-column-start: 18;\n    grid-column-end: 24;\n  }\n  .l-grid_19_1 {\n    grid-column-start: 19;\n    grid-column-end: 1;\n  }\n  .l-grid_19_2 {\n    grid-column-start: 19;\n    grid-column-end: 2;\n  }\n  .l-grid_19_3 {\n    grid-column-start: 19;\n    grid-column-end: 3;\n  }\n  .l-grid_19_4 {\n    grid-column-start: 19;\n    grid-column-end: 4;\n  }\n  .l-grid_19_5 {\n    grid-column-start: 19;\n    grid-column-end: 5;\n  }\n  .l-grid_19_6 {\n    grid-column-start: 19;\n    grid-column-end: 6;\n  }\n  .l-grid_19_7 {\n    grid-column-start: 19;\n    grid-column-end: 7;\n  }\n  .l-grid_19_8 {\n    grid-column-start: 19;\n    grid-column-end: 8;\n  }\n  .l-grid_19_9 {\n    grid-column-start: 19;\n    grid-column-end: 9;\n  }\n  .l-grid_19_10 {\n    grid-column-start: 19;\n    grid-column-end: 10;\n  }\n  .l-grid_19_11 {\n    grid-column-start: 19;\n    grid-column-end: 11;\n  }\n  .l-grid_19_12 {\n    grid-column-start: 19;\n    grid-column-end: 12;\n  }\n  .l-grid_19_13 {\n    grid-column-start: 19;\n    grid-column-end: 13;\n  }\n  .l-grid_19_14 {\n    grid-column-start: 19;\n    grid-column-end: 14;\n  }\n  .l-grid_19_15 {\n    grid-column-start: 19;\n    grid-column-end: 15;\n  }\n  .l-grid_19_16 {\n    grid-column-start: 19;\n    grid-column-end: 16;\n  }\n  .l-grid_19_17 {\n    grid-column-start: 19;\n    grid-column-end: 17;\n  }\n  .l-grid_19_18 {\n    grid-column-start: 19;\n    grid-column-end: 18;\n  }\n  .l-grid_19_19 {\n    grid-column-start: 19;\n    grid-column-end: 19;\n  }\n  .l-grid_19_20 {\n    grid-column-start: 19;\n    grid-column-end: 20;\n  }\n  .l-grid_19_21 {\n    grid-column-start: 19;\n    grid-column-end: 21;\n  }\n  .l-grid_19_22 {\n    grid-column-start: 19;\n    grid-column-end: 22;\n  }\n  .l-grid_19_23 {\n    grid-column-start: 19;\n    grid-column-end: 23;\n  }\n  .l-grid_19_24 {\n    grid-column-start: 19;\n    grid-column-end: 24;\n  }\n  .l-grid_20_1 {\n    grid-column-start: 20;\n    grid-column-end: 1;\n  }\n  .l-grid_20_2 {\n    grid-column-start: 20;\n    grid-column-end: 2;\n  }\n  .l-grid_20_3 {\n    grid-column-start: 20;\n    grid-column-end: 3;\n  }\n  .l-grid_20_4 {\n    grid-column-start: 20;\n    grid-column-end: 4;\n  }\n  .l-grid_20_5 {\n    grid-column-start: 20;\n    grid-column-end: 5;\n  }\n  .l-grid_20_6 {\n    grid-column-start: 20;\n    grid-column-end: 6;\n  }\n  .l-grid_20_7 {\n    grid-column-start: 20;\n    grid-column-end: 7;\n  }\n  .l-grid_20_8 {\n    grid-column-start: 20;\n    grid-column-end: 8;\n  }\n  .l-grid_20_9 {\n    grid-column-start: 20;\n    grid-column-end: 9;\n  }\n  .l-grid_20_10 {\n    grid-column-start: 20;\n    grid-column-end: 10;\n  }\n  .l-grid_20_11 {\n    grid-column-start: 20;\n    grid-column-end: 11;\n  }\n  .l-grid_20_12 {\n    grid-column-start: 20;\n    grid-column-end: 12;\n  }\n  .l-grid_20_13 {\n    grid-column-start: 20;\n    grid-column-end: 13;\n  }\n  .l-grid_20_14 {\n    grid-column-start: 20;\n    grid-column-end: 14;\n  }\n  .l-grid_20_15 {\n    grid-column-start: 20;\n    grid-column-end: 15;\n  }\n  .l-grid_20_16 {\n    grid-column-start: 20;\n    grid-column-end: 16;\n  }\n  .l-grid_20_17 {\n    grid-column-start: 20;\n    grid-column-end: 17;\n  }\n  .l-grid_20_18 {\n    grid-column-start: 20;\n    grid-column-end: 18;\n  }\n  .l-grid_20_19 {\n    grid-column-start: 20;\n    grid-column-end: 19;\n  }\n  .l-grid_20_20 {\n    grid-column-start: 20;\n    grid-column-end: 20;\n  }\n  .l-grid_20_21 {\n    grid-column-start: 20;\n    grid-column-end: 21;\n  }\n  .l-grid_20_22 {\n    grid-column-start: 20;\n    grid-column-end: 22;\n  }\n  .l-grid_20_23 {\n    grid-column-start: 20;\n    grid-column-end: 23;\n  }\n  .l-grid_20_24 {\n    grid-column-start: 20;\n    grid-column-end: 24;\n  }\n  .l-grid_21_1 {\n    grid-column-start: 21;\n    grid-column-end: 1;\n  }\n  .l-grid_21_2 {\n    grid-column-start: 21;\n    grid-column-end: 2;\n  }\n  .l-grid_21_3 {\n    grid-column-start: 21;\n    grid-column-end: 3;\n  }\n  .l-grid_21_4 {\n    grid-column-start: 21;\n    grid-column-end: 4;\n  }\n  .l-grid_21_5 {\n    grid-column-start: 21;\n    grid-column-end: 5;\n  }\n  .l-grid_21_6 {\n    grid-column-start: 21;\n    grid-column-end: 6;\n  }\n  .l-grid_21_7 {\n    grid-column-start: 21;\n    grid-column-end: 7;\n  }\n  .l-grid_21_8 {\n    grid-column-start: 21;\n    grid-column-end: 8;\n  }\n  .l-grid_21_9 {\n    grid-column-start: 21;\n    grid-column-end: 9;\n  }\n  .l-grid_21_10 {\n    grid-column-start: 21;\n    grid-column-end: 10;\n  }\n  .l-grid_21_11 {\n    grid-column-start: 21;\n    grid-column-end: 11;\n  }\n  .l-grid_21_12 {\n    grid-column-start: 21;\n    grid-column-end: 12;\n  }\n  .l-grid_21_13 {\n    grid-column-start: 21;\n    grid-column-end: 13;\n  }\n  .l-grid_21_14 {\n    grid-column-start: 21;\n    grid-column-end: 14;\n  }\n  .l-grid_21_15 {\n    grid-column-start: 21;\n    grid-column-end: 15;\n  }\n  .l-grid_21_16 {\n    grid-column-start: 21;\n    grid-column-end: 16;\n  }\n  .l-grid_21_17 {\n    grid-column-start: 21;\n    grid-column-end: 17;\n  }\n  .l-grid_21_18 {\n    grid-column-start: 21;\n    grid-column-end: 18;\n  }\n  .l-grid_21_19 {\n    grid-column-start: 21;\n    grid-column-end: 19;\n  }\n  .l-grid_21_20 {\n    grid-column-start: 21;\n    grid-column-end: 20;\n  }\n  .l-grid_21_21 {\n    grid-column-start: 21;\n    grid-column-end: 21;\n  }\n  .l-grid_21_22 {\n    grid-column-start: 21;\n    grid-column-end: 22;\n  }\n  .l-grid_21_23 {\n    grid-column-start: 21;\n    grid-column-end: 23;\n  }\n  .l-grid_21_24 {\n    grid-column-start: 21;\n    grid-column-end: 24;\n  }\n  .l-grid_22_1 {\n    grid-column-start: 22;\n    grid-column-end: 1;\n  }\n  .l-grid_22_2 {\n    grid-column-start: 22;\n    grid-column-end: 2;\n  }\n  .l-grid_22_3 {\n    grid-column-start: 22;\n    grid-column-end: 3;\n  }\n  .l-grid_22_4 {\n    grid-column-start: 22;\n    grid-column-end: 4;\n  }\n  .l-grid_22_5 {\n    grid-column-start: 22;\n    grid-column-end: 5;\n  }\n  .l-grid_22_6 {\n    grid-column-start: 22;\n    grid-column-end: 6;\n  }\n  .l-grid_22_7 {\n    grid-column-start: 22;\n    grid-column-end: 7;\n  }\n  .l-grid_22_8 {\n    grid-column-start: 22;\n    grid-column-end: 8;\n  }\n  .l-grid_22_9 {\n    grid-column-start: 22;\n    grid-column-end: 9;\n  }\n  .l-grid_22_10 {\n    grid-column-start: 22;\n    grid-column-end: 10;\n  }\n  .l-grid_22_11 {\n    grid-column-start: 22;\n    grid-column-end: 11;\n  }\n  .l-grid_22_12 {\n    grid-column-start: 22;\n    grid-column-end: 12;\n  }\n  .l-grid_22_13 {\n    grid-column-start: 22;\n    grid-column-end: 13;\n  }\n  .l-grid_22_14 {\n    grid-column-start: 22;\n    grid-column-end: 14;\n  }\n  .l-grid_22_15 {\n    grid-column-start: 22;\n    grid-column-end: 15;\n  }\n  .l-grid_22_16 {\n    grid-column-start: 22;\n    grid-column-end: 16;\n  }\n  .l-grid_22_17 {\n    grid-column-start: 22;\n    grid-column-end: 17;\n  }\n  .l-grid_22_18 {\n    grid-column-start: 22;\n    grid-column-end: 18;\n  }\n  .l-grid_22_19 {\n    grid-column-start: 22;\n    grid-column-end: 19;\n  }\n  .l-grid_22_20 {\n    grid-column-start: 22;\n    grid-column-end: 20;\n  }\n  .l-grid_22_21 {\n    grid-column-start: 22;\n    grid-column-end: 21;\n  }\n  .l-grid_22_22 {\n    grid-column-start: 22;\n    grid-column-end: 22;\n  }\n  .l-grid_22_23 {\n    grid-column-start: 22;\n    grid-column-end: 23;\n  }\n  .l-grid_22_24 {\n    grid-column-start: 22;\n    grid-column-end: 24;\n  }\n  .l-grid_23_1 {\n    grid-column-start: 23;\n    grid-column-end: 1;\n  }\n  .l-grid_23_2 {\n    grid-column-start: 23;\n    grid-column-end: 2;\n  }\n  .l-grid_23_3 {\n    grid-column-start: 23;\n    grid-column-end: 3;\n  }\n  .l-grid_23_4 {\n    grid-column-start: 23;\n    grid-column-end: 4;\n  }\n  .l-grid_23_5 {\n    grid-column-start: 23;\n    grid-column-end: 5;\n  }\n  .l-grid_23_6 {\n    grid-column-start: 23;\n    grid-column-end: 6;\n  }\n  .l-grid_23_7 {\n    grid-column-start: 23;\n    grid-column-end: 7;\n  }\n  .l-grid_23_8 {\n    grid-column-start: 23;\n    grid-column-end: 8;\n  }\n  .l-grid_23_9 {\n    grid-column-start: 23;\n    grid-column-end: 9;\n  }\n  .l-grid_23_10 {\n    grid-column-start: 23;\n    grid-column-end: 10;\n  }\n  .l-grid_23_11 {\n    grid-column-start: 23;\n    grid-column-end: 11;\n  }\n  .l-grid_23_12 {\n    grid-column-start: 23;\n    grid-column-end: 12;\n  }\n  .l-grid_23_13 {\n    grid-column-start: 23;\n    grid-column-end: 13;\n  }\n  .l-grid_23_14 {\n    grid-column-start: 23;\n    grid-column-end: 14;\n  }\n  .l-grid_23_15 {\n    grid-column-start: 23;\n    grid-column-end: 15;\n  }\n  .l-grid_23_16 {\n    grid-column-start: 23;\n    grid-column-end: 16;\n  }\n  .l-grid_23_17 {\n    grid-column-start: 23;\n    grid-column-end: 17;\n  }\n  .l-grid_23_18 {\n    grid-column-start: 23;\n    grid-column-end: 18;\n  }\n  .l-grid_23_19 {\n    grid-column-start: 23;\n    grid-column-end: 19;\n  }\n  .l-grid_23_20 {\n    grid-column-start: 23;\n    grid-column-end: 20;\n  }\n  .l-grid_23_21 {\n    grid-column-start: 23;\n    grid-column-end: 21;\n  }\n  .l-grid_23_22 {\n    grid-column-start: 23;\n    grid-column-end: 22;\n  }\n  .l-grid_23_23 {\n    grid-column-start: 23;\n    grid-column-end: 23;\n  }\n  .l-grid_23_24 {\n    grid-column-start: 23;\n    grid-column-end: 24;\n  }\n}\n@media (max-width: 768px) {\n  .t-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .t-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .t-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .t-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .t-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .t-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .t-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .t-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .t-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .t-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .t-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .t-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .t-grid_1_13 {\n    grid-column-start: 1;\n    grid-column-end: 13;\n  }\n  .t-grid_1_14 {\n    grid-column-start: 1;\n    grid-column-end: 14;\n  }\n  .t-grid_1_15 {\n    grid-column-start: 1;\n    grid-column-end: 15;\n  }\n  .t-grid_1_16 {\n    grid-column-start: 1;\n    grid-column-end: 16;\n  }\n  .t-grid_1_17 {\n    grid-column-start: 1;\n    grid-column-end: 17;\n  }\n  .t-grid_1_18 {\n    grid-column-start: 1;\n    grid-column-end: 18;\n  }\n  .t-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .t-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .t-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .t-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .t-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .t-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .t-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .t-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .t-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .t-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .t-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .t-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .t-grid_2_13 {\n    grid-column-start: 2;\n    grid-column-end: 13;\n  }\n  .t-grid_2_14 {\n    grid-column-start: 2;\n    grid-column-end: 14;\n  }\n  .t-grid_2_15 {\n    grid-column-start: 2;\n    grid-column-end: 15;\n  }\n  .t-grid_2_16 {\n    grid-column-start: 2;\n    grid-column-end: 16;\n  }\n  .t-grid_2_17 {\n    grid-column-start: 2;\n    grid-column-end: 17;\n  }\n  .t-grid_2_18 {\n    grid-column-start: 2;\n    grid-column-end: 18;\n  }\n  .t-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .t-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .t-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .t-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .t-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .t-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .t-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .t-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .t-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .t-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .t-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .t-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .t-grid_3_13 {\n    grid-column-start: 3;\n    grid-column-end: 13;\n  }\n  .t-grid_3_14 {\n    grid-column-start: 3;\n    grid-column-end: 14;\n  }\n  .t-grid_3_15 {\n    grid-column-start: 3;\n    grid-column-end: 15;\n  }\n  .t-grid_3_16 {\n    grid-column-start: 3;\n    grid-column-end: 16;\n  }\n  .t-grid_3_17 {\n    grid-column-start: 3;\n    grid-column-end: 17;\n  }\n  .t-grid_3_18 {\n    grid-column-start: 3;\n    grid-column-end: 18;\n  }\n  .t-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .t-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .t-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .t-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .t-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .t-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .t-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .t-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .t-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .t-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .t-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .t-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .t-grid_4_13 {\n    grid-column-start: 4;\n    grid-column-end: 13;\n  }\n  .t-grid_4_14 {\n    grid-column-start: 4;\n    grid-column-end: 14;\n  }\n  .t-grid_4_15 {\n    grid-column-start: 4;\n    grid-column-end: 15;\n  }\n  .t-grid_4_16 {\n    grid-column-start: 4;\n    grid-column-end: 16;\n  }\n  .t-grid_4_17 {\n    grid-column-start: 4;\n    grid-column-end: 17;\n  }\n  .t-grid_4_18 {\n    grid-column-start: 4;\n    grid-column-end: 18;\n  }\n  .t-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .t-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .t-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .t-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .t-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .t-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .t-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .t-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .t-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .t-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .t-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .t-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .t-grid_5_13 {\n    grid-column-start: 5;\n    grid-column-end: 13;\n  }\n  .t-grid_5_14 {\n    grid-column-start: 5;\n    grid-column-end: 14;\n  }\n  .t-grid_5_15 {\n    grid-column-start: 5;\n    grid-column-end: 15;\n  }\n  .t-grid_5_16 {\n    grid-column-start: 5;\n    grid-column-end: 16;\n  }\n  .t-grid_5_17 {\n    grid-column-start: 5;\n    grid-column-end: 17;\n  }\n  .t-grid_5_18 {\n    grid-column-start: 5;\n    grid-column-end: 18;\n  }\n  .t-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .t-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .t-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .t-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .t-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .t-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .t-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .t-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .t-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .t-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .t-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .t-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .t-grid_6_13 {\n    grid-column-start: 6;\n    grid-column-end: 13;\n  }\n  .t-grid_6_14 {\n    grid-column-start: 6;\n    grid-column-end: 14;\n  }\n  .t-grid_6_15 {\n    grid-column-start: 6;\n    grid-column-end: 15;\n  }\n  .t-grid_6_16 {\n    grid-column-start: 6;\n    grid-column-end: 16;\n  }\n  .t-grid_6_17 {\n    grid-column-start: 6;\n    grid-column-end: 17;\n  }\n  .t-grid_6_18 {\n    grid-column-start: 6;\n    grid-column-end: 18;\n  }\n  .t-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .t-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .t-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .t-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .t-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .t-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .t-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .t-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .t-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .t-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .t-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .t-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .t-grid_7_13 {\n    grid-column-start: 7;\n    grid-column-end: 13;\n  }\n  .t-grid_7_14 {\n    grid-column-start: 7;\n    grid-column-end: 14;\n  }\n  .t-grid_7_15 {\n    grid-column-start: 7;\n    grid-column-end: 15;\n  }\n  .t-grid_7_16 {\n    grid-column-start: 7;\n    grid-column-end: 16;\n  }\n  .t-grid_7_17 {\n    grid-column-start: 7;\n    grid-column-end: 17;\n  }\n  .t-grid_7_18 {\n    grid-column-start: 7;\n    grid-column-end: 18;\n  }\n  .t-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .t-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .t-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .t-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .t-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .t-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .t-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .t-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .t-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .t-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .t-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .t-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .t-grid_8_13 {\n    grid-column-start: 8;\n    grid-column-end: 13;\n  }\n  .t-grid_8_14 {\n    grid-column-start: 8;\n    grid-column-end: 14;\n  }\n  .t-grid_8_15 {\n    grid-column-start: 8;\n    grid-column-end: 15;\n  }\n  .t-grid_8_16 {\n    grid-column-start: 8;\n    grid-column-end: 16;\n  }\n  .t-grid_8_17 {\n    grid-column-start: 8;\n    grid-column-end: 17;\n  }\n  .t-grid_8_18 {\n    grid-column-start: 8;\n    grid-column-end: 18;\n  }\n  .t-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .t-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .t-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .t-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .t-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .t-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .t-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .t-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .t-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .t-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .t-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .t-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .t-grid_9_13 {\n    grid-column-start: 9;\n    grid-column-end: 13;\n  }\n  .t-grid_9_14 {\n    grid-column-start: 9;\n    grid-column-end: 14;\n  }\n  .t-grid_9_15 {\n    grid-column-start: 9;\n    grid-column-end: 15;\n  }\n  .t-grid_9_16 {\n    grid-column-start: 9;\n    grid-column-end: 16;\n  }\n  .t-grid_9_17 {\n    grid-column-start: 9;\n    grid-column-end: 17;\n  }\n  .t-grid_9_18 {\n    grid-column-start: 9;\n    grid-column-end: 18;\n  }\n  .t-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .t-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .t-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .t-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .t-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .t-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .t-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .t-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .t-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .t-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .t-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .t-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .t-grid_10_13 {\n    grid-column-start: 10;\n    grid-column-end: 13;\n  }\n  .t-grid_10_14 {\n    grid-column-start: 10;\n    grid-column-end: 14;\n  }\n  .t-grid_10_15 {\n    grid-column-start: 10;\n    grid-column-end: 15;\n  }\n  .t-grid_10_16 {\n    grid-column-start: 10;\n    grid-column-end: 16;\n  }\n  .t-grid_10_17 {\n    grid-column-start: 10;\n    grid-column-end: 17;\n  }\n  .t-grid_10_18 {\n    grid-column-start: 10;\n    grid-column-end: 18;\n  }\n  .t-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .t-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .t-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .t-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .t-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .t-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .t-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .t-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .t-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .t-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .t-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .t-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n  .t-grid_11_13 {\n    grid-column-start: 11;\n    grid-column-end: 13;\n  }\n  .t-grid_11_14 {\n    grid-column-start: 11;\n    grid-column-end: 14;\n  }\n  .t-grid_11_15 {\n    grid-column-start: 11;\n    grid-column-end: 15;\n  }\n  .t-grid_11_16 {\n    grid-column-start: 11;\n    grid-column-end: 16;\n  }\n  .t-grid_11_17 {\n    grid-column-start: 11;\n    grid-column-end: 17;\n  }\n  .t-grid_11_18 {\n    grid-column-start: 11;\n    grid-column-end: 18;\n  }\n  .t-grid_12_1 {\n    grid-column-start: 12;\n    grid-column-end: 1;\n  }\n  .t-grid_12_2 {\n    grid-column-start: 12;\n    grid-column-end: 2;\n  }\n  .t-grid_12_3 {\n    grid-column-start: 12;\n    grid-column-end: 3;\n  }\n  .t-grid_12_4 {\n    grid-column-start: 12;\n    grid-column-end: 4;\n  }\n  .t-grid_12_5 {\n    grid-column-start: 12;\n    grid-column-end: 5;\n  }\n  .t-grid_12_6 {\n    grid-column-start: 12;\n    grid-column-end: 6;\n  }\n  .t-grid_12_7 {\n    grid-column-start: 12;\n    grid-column-end: 7;\n  }\n  .t-grid_12_8 {\n    grid-column-start: 12;\n    grid-column-end: 8;\n  }\n  .t-grid_12_9 {\n    grid-column-start: 12;\n    grid-column-end: 9;\n  }\n  .t-grid_12_10 {\n    grid-column-start: 12;\n    grid-column-end: 10;\n  }\n  .t-grid_12_11 {\n    grid-column-start: 12;\n    grid-column-end: 11;\n  }\n  .t-grid_12_12 {\n    grid-column-start: 12;\n    grid-column-end: 12;\n  }\n  .t-grid_12_13 {\n    grid-column-start: 12;\n    grid-column-end: 13;\n  }\n  .t-grid_12_14 {\n    grid-column-start: 12;\n    grid-column-end: 14;\n  }\n  .t-grid_12_15 {\n    grid-column-start: 12;\n    grid-column-end: 15;\n  }\n  .t-grid_12_16 {\n    grid-column-start: 12;\n    grid-column-end: 16;\n  }\n  .t-grid_12_17 {\n    grid-column-start: 12;\n    grid-column-end: 17;\n  }\n  .t-grid_12_18 {\n    grid-column-start: 12;\n    grid-column-end: 18;\n  }\n  .t-grid_13_1 {\n    grid-column-start: 13;\n    grid-column-end: 1;\n  }\n  .t-grid_13_2 {\n    grid-column-start: 13;\n    grid-column-end: 2;\n  }\n  .t-grid_13_3 {\n    grid-column-start: 13;\n    grid-column-end: 3;\n  }\n  .t-grid_13_4 {\n    grid-column-start: 13;\n    grid-column-end: 4;\n  }\n  .t-grid_13_5 {\n    grid-column-start: 13;\n    grid-column-end: 5;\n  }\n  .t-grid_13_6 {\n    grid-column-start: 13;\n    grid-column-end: 6;\n  }\n  .t-grid_13_7 {\n    grid-column-start: 13;\n    grid-column-end: 7;\n  }\n  .t-grid_13_8 {\n    grid-column-start: 13;\n    grid-column-end: 8;\n  }\n  .t-grid_13_9 {\n    grid-column-start: 13;\n    grid-column-end: 9;\n  }\n  .t-grid_13_10 {\n    grid-column-start: 13;\n    grid-column-end: 10;\n  }\n  .t-grid_13_11 {\n    grid-column-start: 13;\n    grid-column-end: 11;\n  }\n  .t-grid_13_12 {\n    grid-column-start: 13;\n    grid-column-end: 12;\n  }\n  .t-grid_13_13 {\n    grid-column-start: 13;\n    grid-column-end: 13;\n  }\n  .t-grid_13_14 {\n    grid-column-start: 13;\n    grid-column-end: 14;\n  }\n  .t-grid_13_15 {\n    grid-column-start: 13;\n    grid-column-end: 15;\n  }\n  .t-grid_13_16 {\n    grid-column-start: 13;\n    grid-column-end: 16;\n  }\n  .t-grid_13_17 {\n    grid-column-start: 13;\n    grid-column-end: 17;\n  }\n  .t-grid_13_18 {\n    grid-column-start: 13;\n    grid-column-end: 18;\n  }\n  .t-grid_14_1 {\n    grid-column-start: 14;\n    grid-column-end: 1;\n  }\n  .t-grid_14_2 {\n    grid-column-start: 14;\n    grid-column-end: 2;\n  }\n  .t-grid_14_3 {\n    grid-column-start: 14;\n    grid-column-end: 3;\n  }\n  .t-grid_14_4 {\n    grid-column-start: 14;\n    grid-column-end: 4;\n  }\n  .t-grid_14_5 {\n    grid-column-start: 14;\n    grid-column-end: 5;\n  }\n  .t-grid_14_6 {\n    grid-column-start: 14;\n    grid-column-end: 6;\n  }\n  .t-grid_14_7 {\n    grid-column-start: 14;\n    grid-column-end: 7;\n  }\n  .t-grid_14_8 {\n    grid-column-start: 14;\n    grid-column-end: 8;\n  }\n  .t-grid_14_9 {\n    grid-column-start: 14;\n    grid-column-end: 9;\n  }\n  .t-grid_14_10 {\n    grid-column-start: 14;\n    grid-column-end: 10;\n  }\n  .t-grid_14_11 {\n    grid-column-start: 14;\n    grid-column-end: 11;\n  }\n  .t-grid_14_12 {\n    grid-column-start: 14;\n    grid-column-end: 12;\n  }\n  .t-grid_14_13 {\n    grid-column-start: 14;\n    grid-column-end: 13;\n  }\n  .t-grid_14_14 {\n    grid-column-start: 14;\n    grid-column-end: 14;\n  }\n  .t-grid_14_15 {\n    grid-column-start: 14;\n    grid-column-end: 15;\n  }\n  .t-grid_14_16 {\n    grid-column-start: 14;\n    grid-column-end: 16;\n  }\n  .t-grid_14_17 {\n    grid-column-start: 14;\n    grid-column-end: 17;\n  }\n  .t-grid_14_18 {\n    grid-column-start: 14;\n    grid-column-end: 18;\n  }\n  .t-grid_15_1 {\n    grid-column-start: 15;\n    grid-column-end: 1;\n  }\n  .t-grid_15_2 {\n    grid-column-start: 15;\n    grid-column-end: 2;\n  }\n  .t-grid_15_3 {\n    grid-column-start: 15;\n    grid-column-end: 3;\n  }\n  .t-grid_15_4 {\n    grid-column-start: 15;\n    grid-column-end: 4;\n  }\n  .t-grid_15_5 {\n    grid-column-start: 15;\n    grid-column-end: 5;\n  }\n  .t-grid_15_6 {\n    grid-column-start: 15;\n    grid-column-end: 6;\n  }\n  .t-grid_15_7 {\n    grid-column-start: 15;\n    grid-column-end: 7;\n  }\n  .t-grid_15_8 {\n    grid-column-start: 15;\n    grid-column-end: 8;\n  }\n  .t-grid_15_9 {\n    grid-column-start: 15;\n    grid-column-end: 9;\n  }\n  .t-grid_15_10 {\n    grid-column-start: 15;\n    grid-column-end: 10;\n  }\n  .t-grid_15_11 {\n    grid-column-start: 15;\n    grid-column-end: 11;\n  }\n  .t-grid_15_12 {\n    grid-column-start: 15;\n    grid-column-end: 12;\n  }\n  .t-grid_15_13 {\n    grid-column-start: 15;\n    grid-column-end: 13;\n  }\n  .t-grid_15_14 {\n    grid-column-start: 15;\n    grid-column-end: 14;\n  }\n  .t-grid_15_15 {\n    grid-column-start: 15;\n    grid-column-end: 15;\n  }\n  .t-grid_15_16 {\n    grid-column-start: 15;\n    grid-column-end: 16;\n  }\n  .t-grid_15_17 {\n    grid-column-start: 15;\n    grid-column-end: 17;\n  }\n  .t-grid_15_18 {\n    grid-column-start: 15;\n    grid-column-end: 18;\n  }\n  .t-grid_16_1 {\n    grid-column-start: 16;\n    grid-column-end: 1;\n  }\n  .t-grid_16_2 {\n    grid-column-start: 16;\n    grid-column-end: 2;\n  }\n  .t-grid_16_3 {\n    grid-column-start: 16;\n    grid-column-end: 3;\n  }\n  .t-grid_16_4 {\n    grid-column-start: 16;\n    grid-column-end: 4;\n  }\n  .t-grid_16_5 {\n    grid-column-start: 16;\n    grid-column-end: 5;\n  }\n  .t-grid_16_6 {\n    grid-column-start: 16;\n    grid-column-end: 6;\n  }\n  .t-grid_16_7 {\n    grid-column-start: 16;\n    grid-column-end: 7;\n  }\n  .t-grid_16_8 {\n    grid-column-start: 16;\n    grid-column-end: 8;\n  }\n  .t-grid_16_9 {\n    grid-column-start: 16;\n    grid-column-end: 9;\n  }\n  .t-grid_16_10 {\n    grid-column-start: 16;\n    grid-column-end: 10;\n  }\n  .t-grid_16_11 {\n    grid-column-start: 16;\n    grid-column-end: 11;\n  }\n  .t-grid_16_12 {\n    grid-column-start: 16;\n    grid-column-end: 12;\n  }\n  .t-grid_16_13 {\n    grid-column-start: 16;\n    grid-column-end: 13;\n  }\n  .t-grid_16_14 {\n    grid-column-start: 16;\n    grid-column-end: 14;\n  }\n  .t-grid_16_15 {\n    grid-column-start: 16;\n    grid-column-end: 15;\n  }\n  .t-grid_16_16 {\n    grid-column-start: 16;\n    grid-column-end: 16;\n  }\n  .t-grid_16_17 {\n    grid-column-start: 16;\n    grid-column-end: 17;\n  }\n  .t-grid_16_18 {\n    grid-column-start: 16;\n    grid-column-end: 18;\n  }\n  .t-grid_17_1 {\n    grid-column-start: 17;\n    grid-column-end: 1;\n  }\n  .t-grid_17_2 {\n    grid-column-start: 17;\n    grid-column-end: 2;\n  }\n  .t-grid_17_3 {\n    grid-column-start: 17;\n    grid-column-end: 3;\n  }\n  .t-grid_17_4 {\n    grid-column-start: 17;\n    grid-column-end: 4;\n  }\n  .t-grid_17_5 {\n    grid-column-start: 17;\n    grid-column-end: 5;\n  }\n  .t-grid_17_6 {\n    grid-column-start: 17;\n    grid-column-end: 6;\n  }\n  .t-grid_17_7 {\n    grid-column-start: 17;\n    grid-column-end: 7;\n  }\n  .t-grid_17_8 {\n    grid-column-start: 17;\n    grid-column-end: 8;\n  }\n  .t-grid_17_9 {\n    grid-column-start: 17;\n    grid-column-end: 9;\n  }\n  .t-grid_17_10 {\n    grid-column-start: 17;\n    grid-column-end: 10;\n  }\n  .t-grid_17_11 {\n    grid-column-start: 17;\n    grid-column-end: 11;\n  }\n  .t-grid_17_12 {\n    grid-column-start: 17;\n    grid-column-end: 12;\n  }\n  .t-grid_17_13 {\n    grid-column-start: 17;\n    grid-column-end: 13;\n  }\n  .t-grid_17_14 {\n    grid-column-start: 17;\n    grid-column-end: 14;\n  }\n  .t-grid_17_15 {\n    grid-column-start: 17;\n    grid-column-end: 15;\n  }\n  .t-grid_17_16 {\n    grid-column-start: 17;\n    grid-column-end: 16;\n  }\n  .t-grid_17_17 {\n    grid-column-start: 17;\n    grid-column-end: 17;\n  }\n  .t-grid_17_18 {\n    grid-column-start: 17;\n    grid-column-end: 18;\n  }\n}\n@media (max-width: 492px) {\n  .t-grid_1_1 {\n    grid-column-start: 1;\n    grid-column-end: 1;\n  }\n  .t-grid_1_2 {\n    grid-column-start: 1;\n    grid-column-end: 2;\n  }\n  .t-grid_1_3 {\n    grid-column-start: 1;\n    grid-column-end: 3;\n  }\n  .t-grid_1_4 {\n    grid-column-start: 1;\n    grid-column-end: 4;\n  }\n  .t-grid_1_5 {\n    grid-column-start: 1;\n    grid-column-end: 5;\n  }\n  .t-grid_1_6 {\n    grid-column-start: 1;\n    grid-column-end: 6;\n  }\n  .t-grid_1_7 {\n    grid-column-start: 1;\n    grid-column-end: 7;\n  }\n  .t-grid_1_8 {\n    grid-column-start: 1;\n    grid-column-end: 8;\n  }\n  .t-grid_1_9 {\n    grid-column-start: 1;\n    grid-column-end: 9;\n  }\n  .t-grid_1_10 {\n    grid-column-start: 1;\n    grid-column-end: 10;\n  }\n  .t-grid_1_11 {\n    grid-column-start: 1;\n    grid-column-end: 11;\n  }\n  .t-grid_1_12 {\n    grid-column-start: 1;\n    grid-column-end: 12;\n  }\n  .t-grid_2_1 {\n    grid-column-start: 2;\n    grid-column-end: 1;\n  }\n  .t-grid_2_2 {\n    grid-column-start: 2;\n    grid-column-end: 2;\n  }\n  .t-grid_2_3 {\n    grid-column-start: 2;\n    grid-column-end: 3;\n  }\n  .t-grid_2_4 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n  }\n  .t-grid_2_5 {\n    grid-column-start: 2;\n    grid-column-end: 5;\n  }\n  .t-grid_2_6 {\n    grid-column-start: 2;\n    grid-column-end: 6;\n  }\n  .t-grid_2_7 {\n    grid-column-start: 2;\n    grid-column-end: 7;\n  }\n  .t-grid_2_8 {\n    grid-column-start: 2;\n    grid-column-end: 8;\n  }\n  .t-grid_2_9 {\n    grid-column-start: 2;\n    grid-column-end: 9;\n  }\n  .t-grid_2_10 {\n    grid-column-start: 2;\n    grid-column-end: 10;\n  }\n  .t-grid_2_11 {\n    grid-column-start: 2;\n    grid-column-end: 11;\n  }\n  .t-grid_2_12 {\n    grid-column-start: 2;\n    grid-column-end: 12;\n  }\n  .t-grid_3_1 {\n    grid-column-start: 3;\n    grid-column-end: 1;\n  }\n  .t-grid_3_2 {\n    grid-column-start: 3;\n    grid-column-end: 2;\n  }\n  .t-grid_3_3 {\n    grid-column-start: 3;\n    grid-column-end: 3;\n  }\n  .t-grid_3_4 {\n    grid-column-start: 3;\n    grid-column-end: 4;\n  }\n  .t-grid_3_5 {\n    grid-column-start: 3;\n    grid-column-end: 5;\n  }\n  .t-grid_3_6 {\n    grid-column-start: 3;\n    grid-column-end: 6;\n  }\n  .t-grid_3_7 {\n    grid-column-start: 3;\n    grid-column-end: 7;\n  }\n  .t-grid_3_8 {\n    grid-column-start: 3;\n    grid-column-end: 8;\n  }\n  .t-grid_3_9 {\n    grid-column-start: 3;\n    grid-column-end: 9;\n  }\n  .t-grid_3_10 {\n    grid-column-start: 3;\n    grid-column-end: 10;\n  }\n  .t-grid_3_11 {\n    grid-column-start: 3;\n    grid-column-end: 11;\n  }\n  .t-grid_3_12 {\n    grid-column-start: 3;\n    grid-column-end: 12;\n  }\n  .t-grid_4_1 {\n    grid-column-start: 4;\n    grid-column-end: 1;\n  }\n  .t-grid_4_2 {\n    grid-column-start: 4;\n    grid-column-end: 2;\n  }\n  .t-grid_4_3 {\n    grid-column-start: 4;\n    grid-column-end: 3;\n  }\n  .t-grid_4_4 {\n    grid-column-start: 4;\n    grid-column-end: 4;\n  }\n  .t-grid_4_5 {\n    grid-column-start: 4;\n    grid-column-end: 5;\n  }\n  .t-grid_4_6 {\n    grid-column-start: 4;\n    grid-column-end: 6;\n  }\n  .t-grid_4_7 {\n    grid-column-start: 4;\n    grid-column-end: 7;\n  }\n  .t-grid_4_8 {\n    grid-column-start: 4;\n    grid-column-end: 8;\n  }\n  .t-grid_4_9 {\n    grid-column-start: 4;\n    grid-column-end: 9;\n  }\n  .t-grid_4_10 {\n    grid-column-start: 4;\n    grid-column-end: 10;\n  }\n  .t-grid_4_11 {\n    grid-column-start: 4;\n    grid-column-end: 11;\n  }\n  .t-grid_4_12 {\n    grid-column-start: 4;\n    grid-column-end: 12;\n  }\n  .t-grid_5_1 {\n    grid-column-start: 5;\n    grid-column-end: 1;\n  }\n  .t-grid_5_2 {\n    grid-column-start: 5;\n    grid-column-end: 2;\n  }\n  .t-grid_5_3 {\n    grid-column-start: 5;\n    grid-column-end: 3;\n  }\n  .t-grid_5_4 {\n    grid-column-start: 5;\n    grid-column-end: 4;\n  }\n  .t-grid_5_5 {\n    grid-column-start: 5;\n    grid-column-end: 5;\n  }\n  .t-grid_5_6 {\n    grid-column-start: 5;\n    grid-column-end: 6;\n  }\n  .t-grid_5_7 {\n    grid-column-start: 5;\n    grid-column-end: 7;\n  }\n  .t-grid_5_8 {\n    grid-column-start: 5;\n    grid-column-end: 8;\n  }\n  .t-grid_5_9 {\n    grid-column-start: 5;\n    grid-column-end: 9;\n  }\n  .t-grid_5_10 {\n    grid-column-start: 5;\n    grid-column-end: 10;\n  }\n  .t-grid_5_11 {\n    grid-column-start: 5;\n    grid-column-end: 11;\n  }\n  .t-grid_5_12 {\n    grid-column-start: 5;\n    grid-column-end: 12;\n  }\n  .t-grid_6_1 {\n    grid-column-start: 6;\n    grid-column-end: 1;\n  }\n  .t-grid_6_2 {\n    grid-column-start: 6;\n    grid-column-end: 2;\n  }\n  .t-grid_6_3 {\n    grid-column-start: 6;\n    grid-column-end: 3;\n  }\n  .t-grid_6_4 {\n    grid-column-start: 6;\n    grid-column-end: 4;\n  }\n  .t-grid_6_5 {\n    grid-column-start: 6;\n    grid-column-end: 5;\n  }\n  .t-grid_6_6 {\n    grid-column-start: 6;\n    grid-column-end: 6;\n  }\n  .t-grid_6_7 {\n    grid-column-start: 6;\n    grid-column-end: 7;\n  }\n  .t-grid_6_8 {\n    grid-column-start: 6;\n    grid-column-end: 8;\n  }\n  .t-grid_6_9 {\n    grid-column-start: 6;\n    grid-column-end: 9;\n  }\n  .t-grid_6_10 {\n    grid-column-start: 6;\n    grid-column-end: 10;\n  }\n  .t-grid_6_11 {\n    grid-column-start: 6;\n    grid-column-end: 11;\n  }\n  .t-grid_6_12 {\n    grid-column-start: 6;\n    grid-column-end: 12;\n  }\n  .t-grid_7_1 {\n    grid-column-start: 7;\n    grid-column-end: 1;\n  }\n  .t-grid_7_2 {\n    grid-column-start: 7;\n    grid-column-end: 2;\n  }\n  .t-grid_7_3 {\n    grid-column-start: 7;\n    grid-column-end: 3;\n  }\n  .t-grid_7_4 {\n    grid-column-start: 7;\n    grid-column-end: 4;\n  }\n  .t-grid_7_5 {\n    grid-column-start: 7;\n    grid-column-end: 5;\n  }\n  .t-grid_7_6 {\n    grid-column-start: 7;\n    grid-column-end: 6;\n  }\n  .t-grid_7_7 {\n    grid-column-start: 7;\n    grid-column-end: 7;\n  }\n  .t-grid_7_8 {\n    grid-column-start: 7;\n    grid-column-end: 8;\n  }\n  .t-grid_7_9 {\n    grid-column-start: 7;\n    grid-column-end: 9;\n  }\n  .t-grid_7_10 {\n    grid-column-start: 7;\n    grid-column-end: 10;\n  }\n  .t-grid_7_11 {\n    grid-column-start: 7;\n    grid-column-end: 11;\n  }\n  .t-grid_7_12 {\n    grid-column-start: 7;\n    grid-column-end: 12;\n  }\n  .t-grid_8_1 {\n    grid-column-start: 8;\n    grid-column-end: 1;\n  }\n  .t-grid_8_2 {\n    grid-column-start: 8;\n    grid-column-end: 2;\n  }\n  .t-grid_8_3 {\n    grid-column-start: 8;\n    grid-column-end: 3;\n  }\n  .t-grid_8_4 {\n    grid-column-start: 8;\n    grid-column-end: 4;\n  }\n  .t-grid_8_5 {\n    grid-column-start: 8;\n    grid-column-end: 5;\n  }\n  .t-grid_8_6 {\n    grid-column-start: 8;\n    grid-column-end: 6;\n  }\n  .t-grid_8_7 {\n    grid-column-start: 8;\n    grid-column-end: 7;\n  }\n  .t-grid_8_8 {\n    grid-column-start: 8;\n    grid-column-end: 8;\n  }\n  .t-grid_8_9 {\n    grid-column-start: 8;\n    grid-column-end: 9;\n  }\n  .t-grid_8_10 {\n    grid-column-start: 8;\n    grid-column-end: 10;\n  }\n  .t-grid_8_11 {\n    grid-column-start: 8;\n    grid-column-end: 11;\n  }\n  .t-grid_8_12 {\n    grid-column-start: 8;\n    grid-column-end: 12;\n  }\n  .t-grid_9_1 {\n    grid-column-start: 9;\n    grid-column-end: 1;\n  }\n  .t-grid_9_2 {\n    grid-column-start: 9;\n    grid-column-end: 2;\n  }\n  .t-grid_9_3 {\n    grid-column-start: 9;\n    grid-column-end: 3;\n  }\n  .t-grid_9_4 {\n    grid-column-start: 9;\n    grid-column-end: 4;\n  }\n  .t-grid_9_5 {\n    grid-column-start: 9;\n    grid-column-end: 5;\n  }\n  .t-grid_9_6 {\n    grid-column-start: 9;\n    grid-column-end: 6;\n  }\n  .t-grid_9_7 {\n    grid-column-start: 9;\n    grid-column-end: 7;\n  }\n  .t-grid_9_8 {\n    grid-column-start: 9;\n    grid-column-end: 8;\n  }\n  .t-grid_9_9 {\n    grid-column-start: 9;\n    grid-column-end: 9;\n  }\n  .t-grid_9_10 {\n    grid-column-start: 9;\n    grid-column-end: 10;\n  }\n  .t-grid_9_11 {\n    grid-column-start: 9;\n    grid-column-end: 11;\n  }\n  .t-grid_9_12 {\n    grid-column-start: 9;\n    grid-column-end: 12;\n  }\n  .t-grid_10_1 {\n    grid-column-start: 10;\n    grid-column-end: 1;\n  }\n  .t-grid_10_2 {\n    grid-column-start: 10;\n    grid-column-end: 2;\n  }\n  .t-grid_10_3 {\n    grid-column-start: 10;\n    grid-column-end: 3;\n  }\n  .t-grid_10_4 {\n    grid-column-start: 10;\n    grid-column-end: 4;\n  }\n  .t-grid_10_5 {\n    grid-column-start: 10;\n    grid-column-end: 5;\n  }\n  .t-grid_10_6 {\n    grid-column-start: 10;\n    grid-column-end: 6;\n  }\n  .t-grid_10_7 {\n    grid-column-start: 10;\n    grid-column-end: 7;\n  }\n  .t-grid_10_8 {\n    grid-column-start: 10;\n    grid-column-end: 8;\n  }\n  .t-grid_10_9 {\n    grid-column-start: 10;\n    grid-column-end: 9;\n  }\n  .t-grid_10_10 {\n    grid-column-start: 10;\n    grid-column-end: 10;\n  }\n  .t-grid_10_11 {\n    grid-column-start: 10;\n    grid-column-end: 11;\n  }\n  .t-grid_10_12 {\n    grid-column-start: 10;\n    grid-column-end: 12;\n  }\n  .t-grid_11_1 {\n    grid-column-start: 11;\n    grid-column-end: 1;\n  }\n  .t-grid_11_2 {\n    grid-column-start: 11;\n    grid-column-end: 2;\n  }\n  .t-grid_11_3 {\n    grid-column-start: 11;\n    grid-column-end: 3;\n  }\n  .t-grid_11_4 {\n    grid-column-start: 11;\n    grid-column-end: 4;\n  }\n  .t-grid_11_5 {\n    grid-column-start: 11;\n    grid-column-end: 5;\n  }\n  .t-grid_11_6 {\n    grid-column-start: 11;\n    grid-column-end: 6;\n  }\n  .t-grid_11_7 {\n    grid-column-start: 11;\n    grid-column-end: 7;\n  }\n  .t-grid_11_8 {\n    grid-column-start: 11;\n    grid-column-end: 8;\n  }\n  .t-grid_11_9 {\n    grid-column-start: 11;\n    grid-column-end: 9;\n  }\n  .t-grid_11_10 {\n    grid-column-start: 11;\n    grid-column-end: 10;\n  }\n  .t-grid_11_11 {\n    grid-column-start: 11;\n    grid-column-end: 11;\n  }\n  .t-grid_11_12 {\n    grid-column-start: 11;\n    grid-column-end: 12;\n  }\n}\n.flex-sym {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n\nhtml,\nbody {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  overflow: hidden;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: \"neue_machinalight\", sans-serif;\n  max-width: 100%;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.container {\n  position: relative;\n  width: 100%;\n  padding: 0px 2vw;\n  margin-left: auto;\n  margin-right: auto;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n}\n\nsvg {\n  fill: currentColor;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (max-width: 768px) {\n  .only-desktop {\n    display: none;\n  }\n}\n\n.only-tablet {\n  display: none;\n}\n@media (max-width: 768px) {\n  .only-tablet {\n    display: block;\n  }\n}\n@media (max-width: 492px) {\n  .only-tablet {\n    display: none;\n  }\n}\n\n@media (min-width: 769px) {\n  .only-mobile {\n    display: none;\n  }\n}\n\n.color--red {\n  color: #FF4409;\n}\n\n.font--tag, .font--true {\n  font-family: \"true_blueregular\";\n  font-weight: 100;\n}\n.font--neue {\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.font--title {\n  font-style: normal;\n  font-family: \"Noctis\", serif;\n}\n.font--up {\n  text-transform: uppercase;\n}\n\nimg {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: cover;\n}\n\nbody.home {\n  background: #000000;\n}\n\n.curtain {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999;\n  background: #000000;\n  overflow: hidden;\n}\n\n.footer {\n  background: #ffffff;\n}\n.footer_top {\n  padding: 6.25rem 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n.footer_nav {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 2rem 0;\n  border-top: 1px solid black;\n}\n.footer_copyright {\n  font-size: 0.9375rem;\n  color: black;\n  opacity: 0.8;\n}\n.footer_menu ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: flex;\n  align-items: center;\n}\n.footer_menu ul li:not(:last-child) {\n  margin-right: 0.625rem;\n}\n.footer_menu ul a {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 0.9375rem;\n  line-height: 1.625rem;\n  color: black;\n  text-decoration: none;\n}\n\n.header {\n  position: relative;\n  background: #ffffff;\n  z-index: 4;\n}\n.header_logo {\n  padding: 0;\n  height: 100%;\n  display: block;\n}\n@media (max-width: 1024px) {\n  .header_logo {\n    width: 140px;\n    height: auto;\n  }\n}\n.header_wrap {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 5vw;\n}\n@media (min-width: 1280px) {\n  .header_wrap {\n    padding: 2vh 5vw;\n  }\n}\n.header_tagline {\n  font-size: 40px;\n  transform: translateX(-20px) rotate(3deg);\n  line-height: 1.2;\n  font-weight: 400;\n  font-family: \"true_blueregular\";\n  padding-top: 20px;\n  margin: 0;\n}\n@media (min-width: 1280px) {\n  .header_tagline {\n    font-size: 3vw;\n  }\n}\n.header .corner-left {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  transform: translateY(30px);\n  z-index: 999999;\n}\n.header .corner-right {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  transform: translateY(30px) scaleX(-1);\n  z-index: 999999;\n}\n\n.banner {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10vh 0;\n  background: black;\n  text-align: center;\n}\n@media (min-width: 1024px) {\n  .banner {\n    min-height: 100vh;\n  }\n}\n.banner_bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n}\n.banner_bg--empty, .banner_bg--red {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: scaleY(1.4);\n}\n.banner_bg--empty {\n  clip: rect(auto auto 100vh auto);\n}\n.banner_bg--bottom, .banner_bg--top {\n  position: absolute;\n  z-index: 1;\n  height: 14vh;\n  width: 100%;\n  background: #000000;\n}\n.banner_bg--top {\n  top: 0;\n  transform-origin: top;\n}\n.banner_bg--bottom {\n  bottom: 0;\n  transform-origin: bottom;\n}\n.banner h1 {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  font-size: 35px;\n  line-height: 1;\n  letter-spacing: -0.04375rem;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 300;\n  text-transform: uppercase;\n  width: 40vw;\n  margin: 0px auto;\n  color: white;\n}\n@media (min-width: 1024px) {\n  .banner h1 {\n    font-size: 4.5vw;\n  }\n}\n.banner h1 div {\n  font-weight: 400;\n  display: inline-block;\n}\n\n.newsletter {\n  position: relative;\n  padding: 6.25rem 0;\n  background: black;\n  color: white;\n  overflow: hidden;\n}\n.newsletter_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.6;\n}\n.newsletter_bkg:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(180deg, #000000 26.56%, rgba(0, 0, 0, 0) 100%);\n  transform: rotate(-180deg);\n  z-index: 0;\n}\n.newsletter_bkg > div {\n  width: 100%;\n  height: 100%;\n  background-color: black;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n.newsletter .container {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.newsletter_title {\n  max-width: 50vw;\n  margin-bottom: 6.25rem;\n  font-size: 3.5vw;\n  font-weight: 400;\n  line-height: 1.2;\n  text-transform: uppercase;\n  font-family: \"neue_machinalight\", sans-serif;\n  color: white;\n  text-align: center;\n}\n.newsletter_tag {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 0.7vw;\n  letter-spacing: 0.7em;\n  text-transform: uppercase;\n  margin-bottom: 2rem;\n  text-align: center;\n}\n.newsletter_form {\n  position: relative;\n  width: 100%;\n  max-width: 37.5rem;\n}\n.newsletter_form input[type=email],\n.newsletter_form input[type=text] {\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid white;\n  color: white;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-size: 1.25rem;\n  line-height: 1;\n  height: 3.125rem;\n  width: 100%;\n}\n.newsletter_form button[type=submit] {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  background: transparent;\n  border: 0;\n  transform: translateY(-50%);\n}\n\n.intro {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: black;\n  max-width: 100%;\n  overflow: hidden;\n  padding: 10vw 0 5vw;\n  z-index: 3;\n}\n.intro_text {\n  position: relative;\n  z-index: 2;\n  font-size: 35px;\n  line-height: 1;\n  text-transform: uppercase;\n  font-family: \"neue_machinalight\", sans-serif;\n  color: white;\n  margin: 0;\n  margin-left: 5vw;\n  max-width: 90vw;\n}\n@media (min-width: 1024px) {\n  .intro_text {\n    font-size: 4.6vw;\n    margin-left: 40vw;\n    max-width: 42vw;\n  }\n}\n.intro_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(-10vw, -16vw);\n  z-index: 0;\n  height: auto;\n  width: 65vw;\n}\n\n.story {\n  position: relative;\n  background: black;\n  padding: 4vw 0 8vw;\n  color: white;\n  z-index: 1;\n  overflow: visible;\n}\n.story h2 {\n  position: relative;\n  font-size: 26px;\n  line-height: 1.2;\n  font-family: \"Noctis\", serif;\n  padding-left: 3vw;\n  z-index: 2;\n  font-weight: 400;\n  margin-left: 5vw;\n  max-width: 90vw;\n}\n.story h2:before {\n  content: none;\n}\n@media (min-width: 1280px) {\n  .story h2 {\n    font-size: 2.5vw;\n    margin-left: 40vw;\n    max-width: 28vw;\n  }\n}\n.story h2 .line {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 1px;\n  height: 100%;\n  background: white;\n}\n.story_description {\n  font-size: 22px;\n  line-height: 1.5;\n  font-family: \"Noctis\", serif;\n  margin: 0;\n}\n@media (min-width: 1024px) {\n  .story_description {\n    font-size: 1.4vw;\n  }\n}\n.story_tag {\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: bold;\n  font-size: 14px;\n  letter-spacing: 0.7em;\n  text-transform: uppercase;\n  margin: 0;\n  text-align: center;\n}\n@media (min-width: 1024px) {\n  .story_tag {\n    font-size: 0.6vw;\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: right top;\n    transform: translateX(-100%) rotate(-90deg) translateY(-5vw) translateX(-0.5vw);\n    text-align: left;\n  }\n}\n.story_content {\n  position: relative;\n  width: 100%;\n  max-width: 90vw;\n  margin: 0px auto;\n  margin-top: 5vw;\n  z-index: 2;\n}\n@media (min-width: 1024px) {\n  .story_content {\n    max-width: 50vw;\n  }\n}\n.story_bkg {\n  position: absolute;\n  top: 0%;\n  left: 35%;\n  transform: translateY(-30%);\n  z-index: 0;\n  width: 60vw;\n  height: auto;\n  max-width: none;\n  max-height: none;\n  height: auto;\n  object-fit: none;\n  z-index: -1;\n}\n\n.heritage {\n  padding: 12vw 0;\n  overflow: hidden;\n  background: #ffffff;\n}\n.heritage_grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n.heritage_tag {\n  color: #FF4409;\n  font-size: 4.5vw;\n  line-height: 2.625rem;\n  margin-bottom: 0rem;\n  margin-top: 0;\n  transform: rotate(-4deg);\n  font-weight: 100;\n}\n.heritage_content {\n  margin: 0px auto;\n  max-width: 24vw;\n  text-align: center;\n}\n.heritage_content h2 {\n  font-size: 4vw;\n  line-height: 1;\n  margin-bottom: 2.5rem;\n  font-family: \"Noctis\", serif;\n  font-weight: 500;\n}\n.heritage_content .content p {\n  line-height: 1.5;\n  font-size: 0.8vw;\n  font-weight: 400;\n}\n.heritage_diapo {\n  position: relative;\n  width: 100%;\n  padding-top: 10vw;\n  padding-bottom: 8vw;\n}\n.heritage_diapo_1 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(-2vw, -4vw);\n  width: 15vw;\n}\n.heritage_diapo_2 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(3vw, 100%);\n  width: 25vw;\n}\n.heritage_diapo_3 {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate(15vw, -50%);\n  width: 36vw;\n  z-index: 0;\n}\n.heritage_diapo_4 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  transform: translate(26vw, -8vw);\n  width: 18vw;\n}\n\n.vision {\n  position: relative;\n  background: transparent;\n  color: white;\n  padding: 10vw 0 20vw;\n  display: flex;\n  align-items: center;\n}\n@media (min-width: 1440px) {\n  .vision {\n    padding: 10vw 0 10vw;\n  }\n}\n.vision_text {\n  position: relative;\n  margin-top: 2vw;\n}\n.vision_text .line {\n  position: absolute;\n  top: 0.7vw;\n  left: -100px;\n  width: 3.625rem;\n  height: 1px;\n  background: white;\n}\n.vision h2 {\n  position: relative;\n  font-size: 4.5vw;\n  line-height: 1;\n  font-family: \"Noctis\", serif;\n  max-width: 22vw;\n  z-index: 2;\n  color: white;\n  transform: translateX(-8vw);\n  margin: 0;\n  margin-top: 3vw;\n  margin-bottom: 2vw;\n  font-weight: 300;\n}\n.vision p {\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-right: auto;\n  margin-left: auto;\n  position: relative;\n  max-width: 16vw;\n  font-size: 1vw;\n  line-height: 1.5;\n}\n.vision p:after {\n  content: none;\n}\n.vision .btn_play {\n  bottom: 0;\n  left: 40vw;\n  position: absolute;\n  padding: 0;\n  background: transparent;\n  z-index: 10;\n  border: 0;\n  transform: translate(-50%, 30px) translateX(100px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.vision .btn_play:after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n}\n.vision .btn_play_circle {\n  width: 6.75rem;\n  height: 6.75rem;\n  border: 1px solid #FF4409;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.vision .btn_play span {\n  font-size: 1.125rem;\n  margin-top: 1.375rem;\n  display: flex;\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.vision .vision_illu1 {\n  transform: translateY(150px);\n  margin-right: 50px;\n}\n.vision_wrap {\n  display: grid;\n  grid-template-columns: 60vw 30vw;\n}\n.vision_diapo {\n  position: relative;\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n}\n.vision_diapo img {\n  width: 20vw;\n  min-width: 348px;\n  height: auto;\n}\n.vision_content {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.vision_illu2 {\n  position: relative;\n  z-index: 1;\n}\n\n.excellence {\n  position: relative;\n  padding: 6vw 0 30vh;\n  text-align: center;\n  overflow: visible;\n  background: #ffffff;\n}\n.excellence_bkg {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 1;\n  z-index: 0;\n  overflow: hidden;\n  transform: translateY(10vw);\n}\n.excellence_bkg:before {\n  content: \"\";\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 50vh;\n  z-index: 1;\n  background: linear-gradient(180deg, #FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n}\n.excellence_bkg:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 400px;\n  z-index: 1;\n  transform: scaleY(-1);\n  background: linear-gradient(#FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n}\n.excellence_bkg .zoom {\n  width: 100%;\n  height: 100%;\n  background-size: 100%;\n  background-position: center bottom;\n  background-repeat: no-repeat;\n}\n.excellence .container {\n  position: relative;\n  z-index: 2;\n}\n.excellence h2 {\n  font-size: 4.0625rem;\n  line-height: 4.375rem;\n  font-weight: 400;\n  font-family: \"Noctis\", serif;\n  margin-bottom: 1.5625rem;\n  color: #FF4409;\n}\n.excellence_tag {\n  text-transform: uppercase;\n  letter-spacing: 0.7em;\n  margin-bottom: 1.75rem;\n  margin-top: 2.375rem;\n  font-size: 0.875rem;\n  font-family: \"neue_machinalight\", sans-serif;\n}\n.excellence_content {\n  font-size: 0.9375rem;\n  line-height: 1.75rem;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n  max-width: 31.625rem;\n  margin: 0 auto;\n}\n\n.encart {\n  position: relative;\n  padding: 10vw 0;\n  background: black;\n  color: white;\n}\n.encart h2 {\n  position: relative;\n  font-size: 4vw;\n  line-height: 1;\n  z-index: 1;\n  font-family: \"neue_machinalight\", sans-serif;\n  max-width: 36vw;\n  margin: 0;\n  margin-left: 15vw;\n  font-weight: 300;\n}\n.encart h2 span.color--red {\n  text-transform: uppercase;\n}\n.encart_bkg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  transform: none;\n  z-index: 0;\n}\n\n.models {\n  position: relative;\n  overflow: hidden;\n  background: #fff;\n}\n.models:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 12.5rem;\n  background: black;\n  z-index: 0;\n}\n.models-slider {\n  position: relative;\n  display: flex;\n  flex-wrap: nowrap;\n  width: 100vw;\n  min-width: 1600px;\n  justify-content: center;\n  z-index: 1;\n}\n.models_rail {\n  position: absolute;\n  display: flex;\n  animation: rail 40s linear infinite;\n}\n.models_title {\n  color: #FF4409;\n  font-size: 8vw;\n  margin: 0;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n  position: relative;\n  top: auto;\n  left: auto;\n  text-transform: uppercase;\n  white-space: nowrap;\n  z-index: 10;\n}\n.models_title h2 {\n  position: static;\n  transform: none;\n}\n.models-slide {\n  position: relative;\n  width: 20vw;\n  max-width: 25rem;\n  min-width: 17.5rem;\n  height: 30vw;\n  max-height: 37.5rem;\n  min-height: 25rem;\n  padding: 40px;\n  display: flex;\n  align-items: flex-end;\n  margin: 0 0.75rem;\n  background: black;\n  overflow: hidden;\n}\n.models-slide:nth-child(2n) {\n  height: 36vw;\n  max-height: 46.625rem;\n  min-height: 31.25rem;\n}\n.models-slide h3 {\n  position: relative;\n  z-index: 1;\n  color: white;\n  font-size: 1.5vw;\n  line-height: 1.2;\n  margin: 0;\n  font-family: \"neue_machinalight\", sans-serif;\n  font-weight: 400;\n}\n.models-slide img {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: auto;\n  height: 100%;\n  transform: translate(-50%, -50%);\n  z-index: 0;\n}\n\n@keyframes rail {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-75%);\n  }\n}\n.timeline {\n  position: relative;\n  overflow: hidden;\n  background: black;\n  color: white;\n  padding: 10vw 0;\n  display: flex;\n  align-items: center;\n}\n.timeline_bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n.timeline_bg > div {\n  width: 100%;\n  height: 100%;\n  background-size: 70vw;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n.timeline_scroll {\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: space-between;\n}\n.timeline_slider {\n  transform: translateX(2vw);\n}\n.timeline_slider img {\n  width: 20vw;\n}\n.timeline_text {\n  position: relative;\n}\n.timeline_text .line {\n  position: absolute;\n  top: 5px;\n  left: 0;\n  width: 50px;\n  height: 1px;\n  background: white;\n}\n.timeline_content {\n  width: 28vw;\n  margin-left: 10vw;\n}\n.timeline_content h2 {\n  color: #FF4409;\n  font-family: \"Noctis\", serif;\n  font-size: 4vw;\n  line-height: 1.2;\n  font-weight: 400;\n  margin-bottom: 35px;\n}\n.timeline_content p {\n  position: relative;\n  font-size: 1vw;\n  line-height: 1.5;\n  width: 20vw;\n  margin-left: 100px;\n}\n.timeline_content p:before {\n  content: none;\n}\n.timeline_discover {\n  color: #FF4409;\n  font-size: 1.2vw;\n  width: 10vw;\n  height: 10vw;\n  border-radius: 50%;\n  border: 1px solid #FF4409;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.timeline_discover:after {\n  content: \"\";\n}\n\n[data-main-scroll] {\n  position: fixed;\n}\n\n[data-bg-zoom] {\n  overflow: hidden;\n}\n\n[data-line-reveal] > div {\n  overflow: hidden;\n}\n\n.the-image {\n  position: relative;\n}\n.the-image__curtain {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1;\n  background: #000000;\n  transform: scaleX(0);\n  transform-origin: left;\n}","@use \"sass:math\";\n\n@mixin sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n@function rem($value) {\n  @if getUnit($value)==pt {\n    @return $value;\n  }\n\n  $valRem: math.div($value, 16);\n  @return $valRem+rem;\n}\n\n// MAx Mobile ------\n@mixin mobile {\n  @media(max-width: $mobile) {\n    @content;\n  }\n}\n\n// Max tablet\n@mixin tablet {\n  @media(max-width: $tablet) {\n    @content;\n  }\n}\n\n@mixin laptop {\n  @media(max-width: $laptop) {\n    @content;\n  }\n}\n\n// Min mobile\n@mixin minMobile {\n  $val: $mobile +1px;\n  @debug $val;\n\n  @media(min-width: $val) {\n    @content;\n  }\n}\n\n// Min Tablet\n@mixin minTablet {\n  $val: $tablet +1px;\n  @debug $val;\n\n  @media(min-width: $val) {\n    @content;\n  }\n}\n\n// Min Laptop\n@mixin minLaptop {\n  $val: $laptop +1px;\n  @debug $val;\n\n  @media(min-width: $val) {\n    @content;\n  }\n}\n\n// Add container + gap\n@mixin container {\n  width: 100%;\n  // max-width: rem(1340);\n  padding: 0px $gap;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n// Reset IMG Spaces\n@mixin resetImg {\n  font-size: 0;\n  letter-spacing: 0;\n}\n","html,\nbody {\n  width: 100%;\n  //min-height: 100vh;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  overflow: hidden;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-family: $font;\n  max-width: 100%;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.sr-only {\n  @include sr-only;\n}\n\n.container {\n  position: relative;\n  @include container;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n}\n\nsvg {\n  fill: currentColor;\n}\n.hidden {\n  display: none;\n}\n\n.only-desktop {\n  @include tablet {\n    display: none;\n  }\n}\n\n.only-tablet {\n  display: none;\n\n  @include tablet {\n    display: block;\n  }\n\n  @include mobile {\n    display: none\n  }\n}\n\n.only-mobile {\n  @include minTablet {\n    display: none;\n  }\n}\n\n.color {\n  &--red {\n    color: $orange\n  }\n}\n\n.font {\n  &--tag,\n  &--true {\n    font-family: $fontTag;\n    font-weight: 100;\n  }\n\n  &--neue {\n    font-family: $font;\n  }\n\n  &--title {\n    font-style: normal;\n    font-family: $fontTitle;\n    // font-weight: bold;\n  }\n\n  &--up {\n    text-transform: uppercase;\n  }\n}\n\nimg {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: cover;\n}\n\nbody.home {\n  background: #000000;\n}\n\n.curtain {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999;\n  background: #000000;\n  overflow: hidden;\n}","// COLOR\n$orange: #FF4409;\n\n$mobile: 492px;\n$tablet: 768px;\n$laptop: 1024px;\n\n$font: 'neue_machinalight', sans-serif;\n$fontTitle: 'Noctis', serif;\n$fontTag: 'true_blueregular';\n\n$col: 23;\n$s-col: 11;\n$t-col: 17;\n\n$gap: 2vw;",".footer {\n  background: #ffffff;\n  &_top {\n    padding: rem(100) 0;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n  } \n\n  &_nav {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    padding: rem(32) 0;\n    border-top: 1px solid black;\n  }\n\n  &_copyright {\n    font-size: rem(15);\n    color: black;\n    opacity: 0.8;\n  }\n\n  &_menu {\n    ul {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n      display: flex;\n      align-items: center;\n\n      li:not(:last-child) {\n        margin-right: rem(10);\n      }\n\n      a {\n        font-family: $font;\n        font-size: rem(15);\n        line-height: rem(26);\n        color: black;\n        text-decoration: none;\n      }\n    }\n  }\n}",".header {\n  position:relative;\n  background: #ffffff;\n  z-index: 4;\n  &_logo {\n    padding: 0;\n    height: 100%;\n    display: block;\n\n    @media (max-width: 1024px) {\n      width: 140px;\n      height: auto;\n    }\n  }\n\n  &_wrap {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    // height: 120px;\n    padding: 0 5vw;\n\n    @media (min-width: 1280px) {\n        padding: 2vh 5vw;\n    }\n  }\n\n  &_tagline{\n    font-size: 40px;\n    transform: translateX(-20px) rotate(3deg);;\n    line-height: 1.2;\n    font-weight: 400;\n    font-family: $fontTag;\n    padding-top: 20px; \n    margin: 0;\n    \n    @media (min-width: 1280px) {\n      font-size: 3vw;\n    }\n  }\n\n  .corner-left {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    transform: translateY(30px);\n    z-index: 999999;\n  }\n\n  .corner-right {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    transform: translateY(30px) scaleX(-1);\n    z-index: 999999;\n  }\n}",".banner {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  // min-height: 100vh;\n  padding: 10vh 0;\n  background: black;\n  text-align: center;\n\n  @media (min-width: 1024px) {\n    min-height: 100vh;\n  }\n  &_bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n    &--empty, &--red {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n      transform: scaleY(1.4);\n    }\n    &--empty {\n      clip: rect(auto auto 100vh auto);\n    }\n    &--bottom, &--top {\n      position: absolute;\n      z-index: 1;\n      height: 14vh;\n      width: 100%;\n      background: #000000;\n    }\n    &--top {\n      top: 0;\n      transform-origin: top;\n    }\n    &--bottom {\n      bottom: 0;\n      transform-origin: bottom;\n    }\n  }\n\n  h1 {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    font-size: 35px;\n    line-height: 1;\n    letter-spacing: rem(-0.7);\n    font-family: $font;\n    font-weight: 300;\n    text-transform: uppercase;\n    width: 40vw;\n    margin: 0px auto;\n    color: white;\n\n    @media (min-width: 1024px) {\n      font-size: 4.5vw;\n    }\n\n    div {\n      font-weight: 400;\n      display: inline-block;\n    }\n  }\n}",".newsletter {\n  position: relative;\n  padding: rem(100) 0;\n  background: black;\n  color: white;\n  overflow: hidden;\n\n  &_bkg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.6;\n    \n     &:after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: linear-gradient(180deg, #000000 26.56%, rgba(0, 0, 0, 0) 100%);\n      transform: rotate(-180deg);\n      z-index: 0\n    }\n    > div {\n      width: 100%;\n      height: 100%;\n      background-color: black;\n      background-size: cover;\n      background-repeat: no-repeat;\n    }\n  }\n\n  .container {\n    position: relative;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  &_title {\n    max-width: 50vw;\n    margin-bottom: rem(100);\n    font-size: 3.5vw;\n    font-weight: 400;\n    line-height: 1.2;\n    text-transform: uppercase;\n    font-family: $font;\n    color: white;\n    text-align: center; \n  }\n\n  &_tag {\n    font-family: $font;\n    font-size: .7vw;\n    letter-spacing: 0.7em;\n    text-transform: uppercase;\n    margin-bottom: rem(32);\n    text-align: center;\n  }\n\n  &_form {\n    position: relative;\n    width: 100%;\n    max-width: rem(600);\n\n    input[type=\"email\"],\n    input[type=\"text\"] {\n      background: transparent;\n      border: 0;\n      border-bottom: 1px solid white;\n      color: white;\n      font-family: $font;\n      font-size: rem(20);\n      line-height: 1;\n      height: rem(50);\n      width: 100%\n    }\n\n    button[type=\"submit\"] {\n      position: absolute;\n      top: 50%;\n      right: 0;\n      background: transparent;\n      border: 0;\n      transform: translateY(-50%);\n    }\n  }\n}",".intro {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: black;\n  max-width: 100%;\n  overflow: hidden;\n  padding: 10vw 0 5vw;\n  z-index: 3;\n\n  &_text {\n    position: relative;\n    z-index: 2;\n    font-size: 35px;\n    line-height: 1;\n    text-transform: uppercase;\n    font-family: $font;\n    color: white;\n    margin: 0;\n    margin-left: 5vw;\n    max-width: 90vw;\n\n    @media (min-width: 1024px) {\n      font-size: 4.6vw;\n      margin-left: 40vw;\n      max-width: 42vw;\n    }\n  }\n\n  &_bkg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform: translate(-10vw, -16vw);\n    z-index: 0;\n    height: auto;\n    width: 65vw;\n  }\n}",".story {\n  position: relative;\n  // min-height: 100vh;\n  background: black;\n  padding: 4vw 0 8vw;\n  color: white;\n  z-index: 1;\n  overflow: visible;\n\n  h2{\n    position: relative;\n    font-size: 26px;\n    line-height: 1.2;\n    font-family: $fontTitle;\n    padding-left: 3vw;\n    z-index: 2;\n    font-weight: 400;\n    margin-left: 5vw;\n    max-width: 90vw;\n    &:before {\n      content: none;\n    }\n\n    @media (min-width: 1280px) {\n      font-size: 2.5vw;\n      margin-left: 40vw;\n      max-width: 28vw;\n    }\n\n    .line {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 1px;\n      height: 100%;\n      background: white;\n    }\n  }\n\n  &_description {\n    font-size: 22px;\n    line-height: 1.5;\n    font-family: $fontTitle;\n    margin: 0;\n\n    @media (min-width: 1024px) {\n      font-size: 1.4vw;\n    }\n  }\n\n  &_tag {\n    font-family: $font;\n    font-weight: bold;\n    font-size: 14px;\n    letter-spacing: 0.7em;\n    text-transform: uppercase;\n    margin: 0;\n    text-align: center;\n\n    @media (min-width: 1024px) {\n      font-size: 0.6vw;\n      position: absolute;\n      top: 0;\n      left: 0;\n      transform-origin: right top;\n      transform: translateX(-100%) rotate(-90deg) translateY(-5vw) translateX(-0.5vw);\n      text-align: left;\n    }\n  }\n\n  &_content {\n    position: relative;\n    width: 100%;\n    max-width: 90vw;\n    margin: 0px auto;\n\n    margin-top: 5vw;\n    z-index: 2;\n     @media (min-width: 1024px) {\n       max-width: 50vw;\n     }\n  }\n\n  &_bkg {\n    position: absolute;\n    top: 0%;\n    left: 35%;\n    transform: translateY(-30%);\n    z-index: 0;\n    width: 60vw;\n    height: auto;\n    max-width: none;\n    max-height: none;\n    height: auto;\n    object-fit: none;\n    z-index: -1;\n  }\n}",".heritage {\n  padding: 12vw 0;\n  overflow: hidden;\n  background: #ffffff;\n  &_grid {\n    display: grid;\n    grid-template-columns:  repeat(2, 1fr);\n  }\n\n  &_tag {\n    color: $orange;\n    font-size: 4.5vw;\n    line-height: rem(42);\n    margin-bottom: rem(0);\n    margin-top: 0;\n    transform: rotate(-4deg);\n    font-weight: 100;\n  }\n \n  &_content {\n    margin: 0px auto;\n    max-width: 24vw;\n    text-align: center;\n\n    h2 {\n      font-size: 4vw;\n      line-height: 1;\n      margin-bottom: rem(40);\n      font-family: $fontTitle;\n      font-weight: 500;\n    }\n\n    .content p{\n      line-height: 1.5;\n      font-size: 0.8vw;\n      font-weight: 400;\n    }\n  }\n\n  &_diapo {\n    position: relative;\n    width: 100%;\n    padding-top: 10vw;\n    padding-bottom: 8vw;\n    \n    &_1 {\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 1;\n      transform: translate(-2vw, -4vw);\n      width: 15vw;\n    }\n\n    &_2 {\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 1;\n      transform: translate(3vw, 100%);\n      width: 25vw;\n    }\n\n    &_3 {\n      position: absolute;\n      top: 50%;\n      left: 0;\n      transform: translate(15vw, -50%);\n      width: 36vw;\n      z-index: 0;\n    }\n\n    &_4 {\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 1;\n      transform: translate(26vw, -8vw);\n      width: 18vw;\n    }\n  }\n}",".vision {\n  position: relative;\n  background: transparent;\n  color: white;\n  padding: 10vw 0 20vw;\n  display: flex;\n  align-items: center;\n\n  @media(min-width: 1440px) {\n    padding: 10vw 0 10vw;\n  }\n\n  &_text {\n    position: relative;\n    margin-top: 2vw;\n    .line {\n      position: absolute;\n      top: 0.7vw;\n      left: -100px;\n      width: rem(58);\n      height: 1px;\n      background: white;\n    }\n  }\n\n  h2 {\n      position: relative;\n      font-size: 4.5vw;\n      line-height: 1;\n      font-family: $fontTitle;\n      max-width: 22vw;\n      z-index: 2;\n      color: white;\n      transform: translateX(-8vw);\n      margin: 0;\n      margin-top: 3vw;\n      margin-bottom: 2vw;\n      font-weight: 300;\n  }\n\n  p {\n\tmargin-top: 0;\n    margin-bottom: 0;\n    margin-right: auto;\n    margin-left: auto;;\n    position: relative;\n    max-width: 16vw;\n    font-size: 1vw;\n    line-height: 1.5;\n    &:after {\n      content: none;\n    }\n  }\n\n  .btn_play {\n    bottom: 0;\n    left: 40vw;\n    position: absolute;\n    padding: 0;\n    background: transparent;\n    z-index: 10;\n    border: 0;\n    transform: translate(-50%,30px) translateX(100px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      // border: 1px solid $orange;\n      border-radius: 50%;\n    }\n    \n    &_circle {\n      width: rem(108);\n      height: rem(108);\n      border: 1px solid $orange;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    span {\n      font-size: rem(18);\n      margin-top: rem(22);\n      display: flex;\n      font-family: $font;\n    }\n  }\n\n  .vision_illu1 {\n    transform: translateY(150px);\n    margin-right: 50px;\n  }\n\n  &_wrap {\n    display: grid;\n    grid-template-columns: 60vw 30vw;\n  }\n\n  &_diapo {\n    position: relative;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-start;\n\n    img {\n      width: 20vw;\n      min-width: 348px;\n      height: auto;\n    }\n  }\n\n  &_content {\n    position: relative;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  &_illu2 {\n    position: relative;\n    z-index: 1;\n  }\n}",".excellence {\n  position: relative;\n  padding: 6vw 0 30vh;\n  text-align: center;\n  overflow: visible;\n  background: #ffffff;\n  &_bkg {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    z-index: 0;\n    overflow: hidden;\n    transform: translateY(10vw);\n\n    &:before {\n      content: \"\";\n      position: absolute;\n      top: 0px;\n      left: 0px;\n      width: 100%;\n      height: 50vh;\n      z-index: 1;\n      background: linear-gradient(180deg, #FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n    }\n  \n    &:after {\n      content: \"\";\n      position: absolute;\n      bottom: 0px;\n      left: 0px;\n      width: 100%;\n      height: 400px;\n      z-index: 1;\n      transform: scaleY(-1);\n      background: linear-gradient(#FFFFFF 40%, rgba(255, 255, 255, 0) 100%);\n    }\n    .zoom {\n      width: 100%;\n      height: 100%;\n      background-size: 100%;\n      background-position: center bottom;\n      background-repeat: no-repeat;\n    }\n  }\n\n  .container {\n    position: relative;\n    z-index: 2;\n  }\n\n  h2 {\n    font-size: rem(65);\n    line-height: rem(70);\n    font-weight: 400;\n    font-family: $fontTitle;\n    margin-bottom: rem(25);\n    color: $orange;\n  }\n\n  &_tag {\n    text-transform: uppercase;\n    letter-spacing: 0.7em;\n    margin-bottom: rem(28);\n    margin-top: rem(38);\n    font-size: rem(14);\n    font-family: $font;\n  }\n\n  &_content {\n    font-size: rem(15);\n    line-height: rem(28);\n    font-family: $font;\n    font-weight: 400;\n    max-width: rem(506);\n    margin: 0 auto;\n  }\n}",".encart {\n  position: relative;\n  padding: 10vw 0;\n  background: black;\n  color: white;\n  \n  h2 {\n    position: relative;\n    font-size: 4vw;\n    line-height: 1;\n    z-index: 1;\n    font-family: $font;\n    max-width: 36vw;\n    margin: 0;\n    margin-left: 15vw;\n    font-weight: 300;\n\n    span.color--red {\n      text-transform: uppercase;\n    }\n  }\n\n  &_bkg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n    transform: none;\n    z-index: 0;\n  }\n}",".models {\n  position: relative;\n  overflow:  hidden;\n  background: #fff;\n  &:after {\n    content:\"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: rem(200);\n    background: black;\n    z-index: 0;\n  }\n\n  &-slider {\n    position: relative;\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100vw;\n    min-width: 1600px;\n    justify-content: center;\n    z-index: 1;\n  }\n\n  &_rail {\n    position: absolute;\n    display: flex;\n    animation: rail 40s linear infinite;\n  }\n\n  &_title {\n    color: $orange;\n    // font-size: rem(128);\n    font-size: 8vw;\n    margin: 0;\n    font-family: $font;\n    font-weight: 400;\n    position: relative;\n    top: auto;\n    left: auto;\n    text-transform: uppercase;\n    white-space: nowrap;\n    z-index: 10;\n    h2 {\n      position: static;\n      transform: none;\n    }\n  }\n\n  &-slide {\n    position: relative;\n    width: 20vw;\n    max-width: rem(400);\n    min-width: rem(280);\n    height: 30vw;\n    max-height: rem(600);\n    min-height: rem(400);\n    padding: 40px;\n    display: flex;\n    align-items: flex-end;\n    margin: 0 rem(12);\n    background: black;\n    overflow: hidden;\n\n    &:nth-child(2n) {\n      height: 36vw;\n      max-height: rem(746);\n      min-height: rem(500);\n    }\n\n    h3 {\n      position: relative;\n      z-index: 1;\n      color: white;\n      font-size: 1.5vw;\n      line-height: 1.2;\n      margin: 0;\n      font-family: $font;\n      font-weight: 400;\n    }\n\n    img {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: auto;\n      height: 100%;\n      transform: translate(-50%, -50%);\n      z-index: 0;\n    }\n  }\n}\n\n@keyframes rail {\n  from {transform: translateX(0)}\n  to {transform: translateX(-75%)}\n}",".timeline {\n  position: relative;\n  overflow: hidden;\n  background: black;\n  color: white;\n  // min-height: 100vh;\n  padding: 10vw 0;\n  display: flex;\n  align-items: center;\n  &_bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    > div {\n      width: 100%;\n      height: 100%;\n      background-size: 70vw;\n      background-position: center;\n      background-repeat: no-repeat;\n    }\n  }\n\n  &_scroll {\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  &_slider {\n    transform: translateX(2vw);\n\n    img {\n      width: 20vw;\n    }\n  }\n\n  &_text {\n    position: relative;\n\n    .line {\n      position: absolute;\n      top: 5px;\n      left: 0;\n      width: 50px;\n      height: 1px;\n      background: white;\n    }\n  }\n\n  &_content {\n    width: 28vw;\n    margin-left: 10vw;\n\n    h2{\n      color: $orange;\n      font-family: $fontTitle;\n      font-size: 4vw;\n      line-height: 1.2;\n      font-weight: 400;\n      margin-bottom: 35px;\n    }\n\n    p {\n      position: relative;\n      font-size: 1vw;\n      line-height: 1.5;\n      width: 20vw;\n      margin-left: 100px;\n      &:before {\n        content: none;\n      }\n    }\n  }\n\n  &_discover {\n    color: $orange;\n    font-size: 1.2vw;\n    width: 10vw;\n    height: 10vw;\n    border-radius: 50%;\n    border: 1px solid $orange;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:after {\n      content: \"\";\n      \n    }\n  }\n}","[data-main-scroll] {\n  position: fixed;\n}\n\n[data-bg-zoom] {\n  overflow: hidden;\n}\n\n[data-line-reveal] {\n  > div {\n\toverflow: hidden;\n  }\n}\n\n.the-image {\n  position: relative;\n  &__curtain {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: 1;\n\tbackground: #000000;\n\ttransform: scaleX(0);\n\ttransform-origin: left;\n  }\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/locomotive-scroll/dist/locomotive-scroll.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/locomotive-scroll/dist/locomotive-scroll.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Native": () => (/* binding */ Native),
/* harmony export */   "Smooth": () => (/* binding */ Smooth),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* locomotive-scroll v4.1.3 | MIT License | https://github.com/locomotivemtl/locomotive-scroll */
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var defaults = {
  el: document,
  name: 'scroll',
  offset: [0, 0],
  repeat: false,
  smooth: false,
  initPosition: {
    x: 0,
    y: 0
  },
  direction: 'vertical',
  gestureDirection: 'vertical',
  reloadOnContextChange: false,
  lerp: 0.1,
  "class": 'is-inview',
  scrollbarContainer: false,
  scrollbarClass: 'c-scrollbar',
  scrollingClass: 'has-scroll-scrolling',
  draggingClass: 'has-scroll-dragging',
  smoothClass: 'has-scroll-smooth',
  initClass: 'has-scroll-init',
  getSpeed: false,
  getDirection: false,
  scrollFromAnywhere: false,
  multiplier: 1,
  firefoxMultiplier: 50,
  touchMultiplier: 2,
  resetNativeScroll: true,
  tablet: {
    smooth: false,
    direction: 'vertical',
    gestureDirection: 'vertical',
    breakpoint: 1024
  },
  smartphone: {
    smooth: false,
    direction: 'vertical',
    gestureDirection: 'vertical'
  }
};

var _default = /*#__PURE__*/function () {
  function _default() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    Object.assign(this, defaults, options);
    this.smartphone = defaults.smartphone;
    if (options.smartphone) Object.assign(this.smartphone, options.smartphone);
    this.tablet = defaults.tablet;
    if (options.tablet) Object.assign(this.tablet, options.tablet);
    this.namespace = 'locomotive';
    this.html = document.documentElement;
    this.windowHeight = window.innerHeight;
    this.windowWidth = window.innerWidth;
    this.windowMiddle = {
      x: this.windowWidth / 2,
      y: this.windowHeight / 2
    };
    this.els = {};
    this.currentElements = {};
    this.listeners = {};
    this.hasScrollTicking = false;
    this.hasCallEventSet = false;
    this.checkScroll = this.checkScroll.bind(this);
    this.checkResize = this.checkResize.bind(this);
    this.checkEvent = this.checkEvent.bind(this);
    this.instance = {
      scroll: {
        x: 0,
        y: 0
      },
      limit: {
        x: this.html.offsetWidth,
        y: this.html.offsetHeight
      },
      currentElements: this.currentElements
    };

    if (this.isMobile) {
      if (this.isTablet) {
        this.context = 'tablet';
      } else {
        this.context = 'smartphone';
      }
    } else {
      this.context = 'desktop';
    }

    if (this.isMobile) this.direction = this[this.context].direction;

    if (this.direction === 'horizontal') {
      this.directionAxis = 'x';
    } else {
      this.directionAxis = 'y';
    }

    if (this.getDirection) {
      this.instance.direction = null;
    }

    if (this.getDirection) {
      this.instance.speed = 0;
    }

    this.html.classList.add(this.initClass);
    window.addEventListener('resize', this.checkResize, false);
  }

  _createClass(_default, [{
    key: "init",
    value: function init() {
      this.initEvents();
    }
  }, {
    key: "checkScroll",
    value: function checkScroll() {
      this.dispatchScroll();
    }
  }, {
    key: "checkResize",
    value: function checkResize() {
      var _this = this;

      if (!this.resizeTick) {
        this.resizeTick = true;
        requestAnimationFrame(function () {
          _this.resize();

          _this.resizeTick = false;
        });
      }
    }
  }, {
    key: "resize",
    value: function resize() {}
  }, {
    key: "checkContext",
    value: function checkContext() {
      if (!this.reloadOnContextChange) return;
      this.isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 || this.windowWidth < this.tablet.breakpoint;
      this.isTablet = this.isMobile && this.windowWidth >= this.tablet.breakpoint;
      var oldContext = this.context;

      if (this.isMobile) {
        if (this.isTablet) {
          this.context = 'tablet';
        } else {
          this.context = 'smartphone';
        }
      } else {
        this.context = 'desktop';
      }

      if (oldContext != this.context) {
        var oldSmooth = oldContext == 'desktop' ? this.smooth : this[oldContext].smooth;
        var newSmooth = this.context == 'desktop' ? this.smooth : this[this.context].smooth;
        if (oldSmooth != newSmooth) window.location.reload();
      }
    }
  }, {
    key: "initEvents",
    value: function initEvents() {
      var _this2 = this;

      this.scrollToEls = this.el.querySelectorAll("[data-".concat(this.name, "-to]"));
      this.setScrollTo = this.setScrollTo.bind(this);
      this.scrollToEls.forEach(function (el) {
        el.addEventListener('click', _this2.setScrollTo, false);
      });
    }
  }, {
    key: "setScrollTo",
    value: function setScrollTo(event) {
      event.preventDefault();
      this.scrollTo(event.currentTarget.getAttribute("data-".concat(this.name, "-href")) || event.currentTarget.getAttribute('href'), {
        offset: event.currentTarget.getAttribute("data-".concat(this.name, "-offset"))
      });
    }
  }, {
    key: "addElements",
    value: function addElements() {}
  }, {
    key: "detectElements",
    value: function detectElements(hasCallEventSet) {
      var _this3 = this;

      var scrollTop = this.instance.scroll.y;
      var scrollBottom = scrollTop + this.windowHeight;
      var scrollLeft = this.instance.scroll.x;
      var scrollRight = scrollLeft + this.windowWidth;
      Object.entries(this.els).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            i = _ref2[0],
            el = _ref2[1];

        if (el && (!el.inView || hasCallEventSet)) {
          if (_this3.direction === 'horizontal') {
            if (scrollRight >= el.left && scrollLeft < el.right) {
              _this3.setInView(el, i);
            }
          } else {
            if (scrollBottom >= el.top && scrollTop < el.bottom) {
              _this3.setInView(el, i);
            }
          }
        }

        if (el && el.inView) {
          if (_this3.direction === 'horizontal') {
            var width = el.right - el.left;
            el.progress = (_this3.instance.scroll.x - (el.left - _this3.windowWidth)) / (width + _this3.windowWidth);

            if (scrollRight < el.left || scrollLeft > el.right) {
              _this3.setOutOfView(el, i);
            }
          } else {
            var height = el.bottom - el.top;
            el.progress = (_this3.instance.scroll.y - (el.top - _this3.windowHeight)) / (height + _this3.windowHeight);

            if (scrollBottom < el.top || scrollTop > el.bottom) {
              _this3.setOutOfView(el, i);
            }
          }
        }
      }); // this.els = this.els.filter((current, i) => {
      //     return current !== null;
      // });

      this.hasScrollTicking = false;
    }
  }, {
    key: "setInView",
    value: function setInView(current, i) {
      this.els[i].inView = true;
      current.el.classList.add(current["class"]);
      this.currentElements[i] = current;

      if (current.call && this.hasCallEventSet) {
        this.dispatchCall(current, 'enter');

        if (!current.repeat) {
          this.els[i].call = false;
        }
      } // if (!current.repeat && !current.speed && !current.sticky) {
      //     if (!current.call || current.call && this.hasCallEventSet) {
      //        this.els[i] = null
      //     }
      // }

    }
  }, {
    key: "setOutOfView",
    value: function setOutOfView(current, i) {
      var _this4 = this;

      // if (current.repeat || current.speed !== undefined) {
      this.els[i].inView = false; // }

      Object.keys(this.currentElements).forEach(function (el) {
        el === i && delete _this4.currentElements[el];
      });

      if (current.call && this.hasCallEventSet) {
        this.dispatchCall(current, 'exit');
      }

      if (current.repeat) {
        current.el.classList.remove(current["class"]);
      }
    }
  }, {
    key: "dispatchCall",
    value: function dispatchCall(current, way) {
      this.callWay = way;
      this.callValue = current.call.split(',').map(function (item) {
        return item.trim();
      });
      this.callObj = current;
      if (this.callValue.length == 1) this.callValue = this.callValue[0];
      var callEvent = new Event(this.namespace + 'call');
      this.el.dispatchEvent(callEvent);
    }
  }, {
    key: "dispatchScroll",
    value: function dispatchScroll() {
      var scrollEvent = new Event(this.namespace + 'scroll');
      this.el.dispatchEvent(scrollEvent);
    }
  }, {
    key: "setEvents",
    value: function setEvents(event, func) {
      if (!this.listeners[event]) {
        this.listeners[event] = [];
      }

      var list = this.listeners[event];
      list.push(func);

      if (list.length === 1) {
        this.el.addEventListener(this.namespace + event, this.checkEvent, false);
      }

      if (event === 'call') {
        this.hasCallEventSet = true;
        this.detectElements(true);
      }
    }
  }, {
    key: "unsetEvents",
    value: function unsetEvents(event, func) {
      if (!this.listeners[event]) return;
      var list = this.listeners[event];
      var index = list.indexOf(func);
      if (index < 0) return;
      list.splice(index, 1);

      if (list.index === 0) {
        this.el.removeEventListener(this.namespace + event, this.checkEvent, false);
      }
    }
  }, {
    key: "checkEvent",
    value: function checkEvent(event) {
      var _this5 = this;

      var name = event.type.replace(this.namespace, '');
      var list = this.listeners[name];
      if (!list || list.length === 0) return;
      list.forEach(function (func) {
        switch (name) {
          case 'scroll':
            return func(_this5.instance);

          case 'call':
            return func(_this5.callValue, _this5.callWay, _this5.callObj);

          default:
            return func();
        }
      });
    }
  }, {
    key: "startScroll",
    value: function startScroll() {}
  }, {
    key: "stopScroll",
    value: function stopScroll() {}
  }, {
    key: "setScroll",
    value: function setScroll(x, y) {
      this.instance.scroll = {
        x: 0,
        y: 0
      };
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this6 = this;

      window.removeEventListener('resize', this.checkResize, false);
      Object.keys(this.listeners).forEach(function (event) {
        _this6.el.removeEventListener(_this6.namespace + event, _this6.checkEvent, false);
      });
      this.listeners = {};
      this.scrollToEls.forEach(function (el) {
        el.removeEventListener('click', _this6.setScrollTo, false);
      });
      this.html.classList.remove(this.initClass);
    }
  }]);

  return _default;
}();

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var smoothscroll = createCommonjsModule(function (module, exports) {
/* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */
(function () {

  // polyfill
  function polyfill() {
    // aliases
    var w = window;
    var d = document;

    // return if scroll behavior is supported and polyfill is not forced
    if (
      'scrollBehavior' in d.documentElement.style &&
      w.__forceSmoothScrollPolyfill__ !== true
    ) {
      return;
    }

    // globals
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    // object gathering original scroll methods
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elementScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    // define timing method
    var now =
      w.performance && w.performance.now
        ? w.performance.now.bind(w.performance)
        : Date.now;

    /**
     * indicates if a the current browser is made by Microsoft
     * @method isMicrosoftBrowser
     * @param {String} userAgent
     * @returns {Boolean}
     */
    function isMicrosoftBrowser(userAgent) {
      var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];

      return new RegExp(userAgentPatterns.join('|')).test(userAgent);
    }

    /*
     * IE has rounding bug rounding down clientHeight and clientWidth and
     * rounding up scrollHeight and scrollWidth causing false positives
     * on hasScrollableSpace
     */
    var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} firstArg
     * @returns {Boolean}
     */
    function shouldBailOut(firstArg) {
      if (
        firstArg === null ||
        typeof firstArg !== 'object' ||
        firstArg.behavior === undefined ||
        firstArg.behavior === 'auto' ||
        firstArg.behavior === 'instant'
      ) {
        // first argument is not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof firstArg === 'object' && firstArg.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError(
        'behavior member of ScrollOptions ' +
          firstArg.behavior +
          ' is not a valid value for enumeration ScrollBehavior.'
      );
    }

    /**
     * indicates if an element has scrollable space in the provided axis
     * @method hasScrollableSpace
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function hasScrollableSpace(el, axis) {
      if (axis === 'Y') {
        return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;
      }

      if (axis === 'X') {
        return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;
      }
    }

    /**
     * indicates if an element has a scrollable overflow property in the axis
     * @method canOverflow
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function canOverflow(el, axis) {
      var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];

      return overflowValue === 'auto' || overflowValue === 'scroll';
    }

    /**
     * indicates if an element can be scrolled in either axis
     * @method isScrollable
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function isScrollable(el) {
      var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');
      var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');

      return isScrollableY || isScrollableX;
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      while (el !== d.body && isScrollable(el) === false) {
        el = el.parentNode || el.host;
      }

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     * @returns {undefined}
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window or element with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    // ORIGINAL METHODS OVERRIDES
    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scroll.call(
          w,
          arguments[0].left !== undefined
            ? arguments[0].left
            : typeof arguments[0] !== 'object'
              ? arguments[0]
              : w.scrollX || w.pageXOffset,
          // use top prop, second argument if present or fallback to scrollY
          arguments[0].top !== undefined
            ? arguments[0].top
            : arguments[1] !== undefined
              ? arguments[1]
              : w.scrollY || w.pageYOffset
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        arguments[0].left !== undefined
          ? ~~arguments[0].left
          : w.scrollX || w.pageXOffset,
        arguments[0].top !== undefined
          ? ~~arguments[0].top
          : w.scrollY || w.pageYOffset
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left !== undefined
            ? arguments[0].left
            : typeof arguments[0] !== 'object' ? arguments[0] : 0,
          arguments[0].top !== undefined
            ? arguments[0].top
            : arguments[1] !== undefined ? arguments[1] : 0
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        // if one number is passed, throw error to match Firefox implementation
        if (typeof arguments[0] === 'number' && arguments[1] === undefined) {
          throw new SyntaxError('Value could not be converted');
        }

        original.elementScroll.call(
          this,
          // use left prop, first number argument or fallback to scrollLeft
          arguments[0].left !== undefined
            ? ~~arguments[0].left
            : typeof arguments[0] !== 'object' ? ~~arguments[0] : this.scrollLeft,
          // use top prop, second argument or fallback to scrollTop
          arguments[0].top !== undefined
            ? ~~arguments[0].top
            : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop
        );

        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        this,
        this,
        typeof left === 'undefined' ? this.scrollLeft : ~~left,
        typeof top === 'undefined' ? this.scrollTop : ~~top
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.elementScroll.call(
          this,
          arguments[0].left !== undefined
            ? ~~arguments[0].left + this.scrollLeft
            : ~~arguments[0] + this.scrollLeft,
          arguments[0].top !== undefined
            ? ~~arguments[0].top + this.scrollTop
            : ~~arguments[1] + this.scrollTop
        );

        return;
      }

      this.scroll({
        left: ~~arguments[0].left + this.scrollLeft,
        top: ~~arguments[0].top + this.scrollTop,
        behavior: arguments[0].behavior
      });
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );

        // reveal parent in viewport unless is fixed
        if (w.getComputedStyle(scrollableParent).position !== 'fixed') {
          w.scrollBy({
            left: parentRects.left,
            top: parentRects.top,
            behavior: 'smooth'
          });
        }
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  {
    // commonjs
    module.exports = { polyfill: polyfill };
  }

}());
});
var smoothscroll_1 = smoothscroll.polyfill;

var _default$1 = /*#__PURE__*/function (_Core) {
  _inherits(_default, _Core);

  var _super = _createSuper(_default);

  function _default() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    _this = _super.call(this, options);

    if (_this.resetNativeScroll) {
      if (history.scrollRestoration) {
        history.scrollRestoration = 'manual';
      }

      window.scrollTo(0, 0);
    }

    window.addEventListener('scroll', _this.checkScroll, false);

    if (window.smoothscrollPolyfill === undefined) {
      window.smoothscrollPolyfill = smoothscroll;
      window.smoothscrollPolyfill.polyfill();
    }

    return _this;
  }

  _createClass(_default, [{
    key: "init",
    value: function init() {
      this.instance.scroll.y = window.pageYOffset;
      this.addElements();
      this.detectElements();

      _get(_getPrototypeOf(_default.prototype), "init", this).call(this);
    }
  }, {
    key: "checkScroll",
    value: function checkScroll() {
      var _this2 = this;

      _get(_getPrototypeOf(_default.prototype), "checkScroll", this).call(this);

      if (this.getDirection) {
        this.addDirection();
      }

      if (this.getSpeed) {
        this.addSpeed();
        this.speedTs = Date.now();
      }

      this.instance.scroll.y = window.pageYOffset;

      if (Object.entries(this.els).length) {
        if (!this.hasScrollTicking) {
          requestAnimationFrame(function () {
            _this2.detectElements();
          });
          this.hasScrollTicking = true;
        }
      }
    }
  }, {
    key: "addDirection",
    value: function addDirection() {
      if (window.pageYOffset > this.instance.scroll.y) {
        if (this.instance.direction !== 'down') {
          this.instance.direction = 'down';
        }
      } else if (window.pageYOffset < this.instance.scroll.y) {
        if (this.instance.direction !== 'up') {
          this.instance.direction = 'up';
        }
      }
    }
  }, {
    key: "addSpeed",
    value: function addSpeed() {
      if (window.pageYOffset != this.instance.scroll.y) {
        this.instance.speed = (window.pageYOffset - this.instance.scroll.y) / Math.max(1, Date.now() - this.speedTs);
      } else {
        this.instance.speed = 0;
      }
    }
  }, {
    key: "resize",
    value: function resize() {
      if (Object.entries(this.els).length) {
        this.windowHeight = window.innerHeight;
        this.updateElements();
      }
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var _this3 = this;

      this.els = {};
      var els = this.el.querySelectorAll('[data-' + this.name + ']');
      els.forEach(function (el, index) {
        var BCR = el.getBoundingClientRect();
        var cl = el.dataset[_this3.name + 'Class'] || _this3["class"];
        var id = typeof el.dataset[_this3.name + 'Id'] === 'string' ? el.dataset[_this3.name + 'Id'] : index;
        var top;
        var left;
        var offset = typeof el.dataset[_this3.name + 'Offset'] === 'string' ? el.dataset[_this3.name + 'Offset'].split(',') : _this3.offset;
        var repeat = el.dataset[_this3.name + 'Repeat'];
        var call = el.dataset[_this3.name + 'Call'];
        var target = el.dataset[_this3.name + 'Target'];
        var targetEl;

        if (target !== undefined) {
          targetEl = document.querySelector("".concat(target));
        } else {
          targetEl = el;
        }

        var targetElBCR = targetEl.getBoundingClientRect();
        top = targetElBCR.top + _this3.instance.scroll.y;
        left = targetElBCR.left + _this3.instance.scroll.x;
        var bottom = top + targetEl.offsetHeight;
        var right = left + targetEl.offsetWidth;

        if (repeat == 'false') {
          repeat = false;
        } else if (repeat != undefined) {
          repeat = true;
        } else {
          repeat = _this3.repeat;
        }

        var relativeOffset = _this3.getRelativeOffset(offset);

        top = top + relativeOffset[0];
        bottom = bottom - relativeOffset[1];
        var mappedEl = {
          el: el,
          targetEl: targetEl,
          id: id,
          "class": cl,
          top: top,
          bottom: bottom,
          left: left,
          right: right,
          offset: offset,
          progress: 0,
          repeat: repeat,
          inView: false,
          call: call
        };
        _this3.els[id] = mappedEl;

        if (el.classList.contains(cl)) {
          _this3.setInView(_this3.els[id], id);
        }
      });
    }
  }, {
    key: "updateElements",
    value: function updateElements() {
      var _this4 = this;

      Object.entries(this.els).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            i = _ref2[0],
            el = _ref2[1];

        var top = el.targetEl.getBoundingClientRect().top + _this4.instance.scroll.y;

        var bottom = top + el.targetEl.offsetHeight;

        var relativeOffset = _this4.getRelativeOffset(el.offset);

        _this4.els[i].top = top + relativeOffset[0];
        _this4.els[i].bottom = bottom - relativeOffset[1];
      });
      this.hasScrollTicking = false;
    }
  }, {
    key: "getRelativeOffset",
    value: function getRelativeOffset(offset) {
      var relativeOffset = [0, 0];

      if (offset) {
        for (var i = 0; i < offset.length; i++) {
          if (typeof offset[i] == 'string') {
            if (offset[i].includes('%')) {
              relativeOffset[i] = parseInt(offset[i].replace('%', '') * this.windowHeight / 100);
            } else {
              relativeOffset[i] = parseInt(offset[i]);
            }
          } else {
            relativeOffset[i] = offset[i];
          }
        }
      }

      return relativeOffset;
    }
    /**
     * Scroll to a desired target.
     *
     * @param  Available options :
     *          target {node, string, "top", "bottom", int} - The DOM element we want to scroll to
     *          options {object} - Options object for additionnal settings.
     * @return {void}
     */

  }, {
    key: "scrollTo",
    value: function scrollTo(target) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Parse options
      var offset = parseInt(options.offset) || 0; // An offset to apply on top of given `target` or `sourceElem`'s target

      var callback = options.callback ? options.callback : false; // function called when scrollTo completes (note that it won't wait for lerp to stabilize)

      if (typeof target === 'string') {
        // Selector or boundaries
        if (target === 'top') {
          target = this.html;
        } else if (target === 'bottom') {
          target = this.html.offsetHeight - window.innerHeight;
        } else {
          target = document.querySelector(target); // If the query fails, abort

          if (!target) {
            return;
          }
        }
      } else if (typeof target === 'number') {
        // Absolute coordinate
        target = parseInt(target);
      } else if (target && target.tagName) ; else {
        console.warn('`target` parameter is not valid');
        return;
      } // We have a target that is not a coordinate yet, get it


      if (typeof target !== 'number') {
        offset = target.getBoundingClientRect().top + offset + this.instance.scroll.y;
      } else {
        offset = target + offset;
      }

      var isTargetReached = function isTargetReached() {
        return parseInt(window.pageYOffset) === parseInt(offset);
      };

      if (callback) {
        if (isTargetReached()) {
          callback();
          return;
        } else {
          var onScroll = function onScroll() {
            if (isTargetReached()) {
              window.removeEventListener('scroll', onScroll);
              callback();
            }
          };

          window.addEventListener('scroll', onScroll);
        }
      }

      window.scrollTo({
        top: offset,
        behavior: options.duration === 0 ? 'auto' : 'smooth'
      });
    }
  }, {
    key: "update",
    value: function update() {
      this.addElements();
      this.detectElements();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(_default.prototype), "destroy", this).call(this);

      window.removeEventListener('scroll', this.checkScroll, false);
    }
  }]);

  return _default;
}(_default);

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

var tinyEmitter = E;

var lethargy = createCommonjsModule(function (module, exports) {
// Generated by CoffeeScript 1.9.2
(function() {
  var root;

  root =  exports !== null ? exports : this;

  root.Lethargy = (function() {
    function Lethargy(stability, sensitivity, tolerance, delay) {
      this.stability = stability != null ? Math.abs(stability) : 8;
      this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;
      this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;
      this.delay = delay != null ? delay : 150;
      this.lastUpDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.lastDownDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
      this.deltasTimestamp = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(null);
        }
        return results;
      }).call(this);
    }

    Lethargy.prototype.check = function(e) {
      var lastDelta;
      e = e.originalEvent || e;
      if (e.wheelDelta != null) {
        lastDelta = e.wheelDelta;
      } else if (e.deltaY != null) {
        lastDelta = e.deltaY * -40;
      } else if ((e.detail != null) || e.detail === 0) {
        lastDelta = e.detail * -40;
      }
      this.deltasTimestamp.push(Date.now());
      this.deltasTimestamp.shift();
      if (lastDelta > 0) {
        this.lastUpDeltas.push(lastDelta);
        this.lastUpDeltas.shift();
        return this.isInertia(1);
      } else {
        this.lastDownDeltas.push(lastDelta);
        this.lastDownDeltas.shift();
        return this.isInertia(-1);
      }
    };

    Lethargy.prototype.isInertia = function(direction) {
      var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;
      lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
      if (lastDeltas[0] === null) {
        return direction;
      }
      if (this.deltasTimestamp[(this.stability * 2) - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[(this.stability * 2) - 1]) {
        return false;
      }
      lastDeltasOld = lastDeltas.slice(0, this.stability);
      lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);
      oldSum = lastDeltasOld.reduce(function(t, s) {
        return t + s;
      });
      newSum = lastDeltasNew.reduce(function(t, s) {
        return t + s;
      });
      oldAverage = oldSum / lastDeltasOld.length;
      newAverage = newSum / lastDeltasNew.length;
      if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && (this.sensitivity < Math.abs(newAverage))) {
        return direction;
      } else {
        return false;
      }
    };

    Lethargy.prototype.showLastUpDeltas = function() {
      return this.lastUpDeltas;
    };

    Lethargy.prototype.showLastDownDeltas = function() {
      return this.lastDownDeltas;
    };

    return Lethargy;

  })();

}).call(commonjsGlobal);
});

var support = (function getSupport() {
    return {
        hasWheelEvent: 'onwheel' in document,
        hasMouseWheelEvent: 'onmousewheel' in document,
        hasTouch: ('ontouchstart' in window) || window.TouchEvent || window.DocumentTouch && document instanceof DocumentTouch,
        hasTouchWin: navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1,
        hasPointer: !!window.navigator.msPointerEnabled,
        hasKeyDown: 'onkeydown' in document,
        isFirefox: navigator.userAgent.indexOf('Firefox') > -1
    };
})();

var toString = Object.prototype.toString,
    hasOwnProperty$1 = Object.prototype.hasOwnProperty;

var bindallStandalone = function(object) {
    if(!object) return console.warn('bindAll requires at least one argument.');

    var functions = Array.prototype.slice.call(arguments, 1);

    if (functions.length === 0) {

        for (var method in object) {
            if(hasOwnProperty$1.call(object, method)) {
                if(typeof object[method] == 'function' && toString.call(object[method]) == "[object Function]") {
                    functions.push(method);
                }
            }
        }
    }

    for(var i = 0; i < functions.length; i++) {
        var f = functions[i];
        object[f] = bind(object[f], object);
    }
};

/*
    Faster bind without specific-case checking. (see https://coderwall.com/p/oi3j3w).
    bindAll is only needed for events binding so no need to make slow fixes for constructor
    or partial application.
*/
function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}

var Lethargy = lethargy.Lethargy;



var EVT_ID = 'virtualscroll';

var src = VirtualScroll;

var keyCodes = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SPACE: 32
};

function VirtualScroll(options) {
    bindallStandalone(this, '_onWheel', '_onMouseWheel', '_onTouchStart', '_onTouchMove', '_onKeyDown');

    this.el = window;
    if (options && options.el) {
        this.el = options.el;
        delete options.el;
    }
    this.options = objectAssign({
        mouseMultiplier: 1,
        touchMultiplier: 2,
        firefoxMultiplier: 15,
        keyStep: 120,
        preventTouch: false,
        unpreventTouchClass: 'vs-touchmove-allowed',
        limitInertia: false,
        useKeyboard: true,
        useTouch: true
    }, options);

    if (this.options.limitInertia) this._lethargy = new Lethargy();

    this._emitter = new tinyEmitter();
    this._event = {
        y: 0,
        x: 0,
        deltaX: 0,
        deltaY: 0
    };
    this.touchStartX = null;
    this.touchStartY = null;
    this.bodyTouchAction = null;

    if (this.options.passive !== undefined) {
        this.listenerOptions = {passive: this.options.passive};
    }
}

VirtualScroll.prototype._notify = function(e) {
    var evt = this._event;
    evt.x += evt.deltaX;
    evt.y += evt.deltaY;

   this._emitter.emit(EVT_ID, {
        x: evt.x,
        y: evt.y,
        deltaX: evt.deltaX,
        deltaY: evt.deltaY,
        originalEvent: e
   });
};

VirtualScroll.prototype._onWheel = function(e) {
    var options = this.options;
    if (this._lethargy && this._lethargy.check(e) === false) return;
    var evt = this._event;

    // In Chrome and in Firefox (at least the new one)
    evt.deltaX = e.wheelDeltaX || e.deltaX * -1;
    evt.deltaY = e.wheelDeltaY || e.deltaY * -1;

    // for our purpose deltamode = 1 means user is on a wheel mouse, not touch pad
    // real meaning: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent#Delta_modes
    if(support.isFirefox && e.deltaMode == 1) {
        evt.deltaX *= options.firefoxMultiplier;
        evt.deltaY *= options.firefoxMultiplier;
    }

    evt.deltaX *= options.mouseMultiplier;
    evt.deltaY *= options.mouseMultiplier;

    this._notify(e);
};

VirtualScroll.prototype._onMouseWheel = function(e) {
    if (this.options.limitInertia && this._lethargy.check(e) === false) return;

    var evt = this._event;

    // In Safari, IE and in Chrome if 'wheel' isn't defined
    evt.deltaX = (e.wheelDeltaX) ? e.wheelDeltaX : 0;
    evt.deltaY = (e.wheelDeltaY) ? e.wheelDeltaY : e.wheelDelta;

    this._notify(e);
};

VirtualScroll.prototype._onTouchStart = function(e) {
    var t = (e.targetTouches) ? e.targetTouches[0] : e;
    this.touchStartX = t.pageX;
    this.touchStartY = t.pageY;
};

VirtualScroll.prototype._onTouchMove = function(e) {
    var options = this.options;
    if(options.preventTouch
        && !e.target.classList.contains(options.unpreventTouchClass)) {
        e.preventDefault();
    }

    var evt = this._event;

    var t = (e.targetTouches) ? e.targetTouches[0] : e;

    evt.deltaX = (t.pageX - this.touchStartX) * options.touchMultiplier;
    evt.deltaY = (t.pageY - this.touchStartY) * options.touchMultiplier;

    this.touchStartX = t.pageX;
    this.touchStartY = t.pageY;

    this._notify(e);
};

VirtualScroll.prototype._onKeyDown = function(e) {
    var evt = this._event;
    evt.deltaX = evt.deltaY = 0;
    var windowHeight = window.innerHeight - 40;

    switch(e.keyCode) {
        case keyCodes.LEFT:
        case keyCodes.UP:
            evt.deltaY = this.options.keyStep;
            break;

        case keyCodes.RIGHT:
        case keyCodes.DOWN:
            evt.deltaY = - this.options.keyStep;
            break;
        case  e.shiftKey:
            evt.deltaY = windowHeight;
            break;
        case keyCodes.SPACE:
            evt.deltaY = - windowHeight;
            break;
        default:
            return;
    }

    this._notify(e);
};

VirtualScroll.prototype._bind = function() {
    if(support.hasWheelEvent) this.el.addEventListener('wheel', this._onWheel, this.listenerOptions);
    if(support.hasMouseWheelEvent) this.el.addEventListener('mousewheel', this._onMouseWheel, this.listenerOptions);

    if(support.hasTouch && this.options.useTouch) {
        this.el.addEventListener('touchstart', this._onTouchStart, this.listenerOptions);
        this.el.addEventListener('touchmove', this._onTouchMove, this.listenerOptions);
    }

    if(support.hasPointer && support.hasTouchWin) {
        this.bodyTouchAction = document.body.style.msTouchAction;
        document.body.style.msTouchAction = 'none';
        this.el.addEventListener('MSPointerDown', this._onTouchStart, true);
        this.el.addEventListener('MSPointerMove', this._onTouchMove, true);
    }

    if(support.hasKeyDown && this.options.useKeyboard) document.addEventListener('keydown', this._onKeyDown);
};

VirtualScroll.prototype._unbind = function() {
    if(support.hasWheelEvent) this.el.removeEventListener('wheel', this._onWheel);
    if(support.hasMouseWheelEvent) this.el.removeEventListener('mousewheel', this._onMouseWheel);

    if(support.hasTouch) {
        this.el.removeEventListener('touchstart', this._onTouchStart);
        this.el.removeEventListener('touchmove', this._onTouchMove);
    }

    if(support.hasPointer && support.hasTouchWin) {
        document.body.style.msTouchAction = this.bodyTouchAction;
        this.el.removeEventListener('MSPointerDown', this._onTouchStart, true);
        this.el.removeEventListener('MSPointerMove', this._onTouchMove, true);
    }

    if(support.hasKeyDown && this.options.useKeyboard) document.removeEventListener('keydown', this._onKeyDown);
};

VirtualScroll.prototype.on = function(cb, ctx) {
  this._emitter.on(EVT_ID, cb, ctx);

  var events = this._emitter.e;
  if (events && events[EVT_ID] && events[EVT_ID].length === 1) this._bind();
};

VirtualScroll.prototype.off = function(cb, ctx) {
  this._emitter.off(EVT_ID, cb, ctx);

  var events = this._emitter.e;
  if (!events[EVT_ID] || events[EVT_ID].length <= 0) this._unbind();
};

VirtualScroll.prototype.reset = function() {
    var evt = this._event;
    evt.x = 0;
    evt.y = 0;
};

VirtualScroll.prototype.destroy = function() {
    this._emitter.off();
    this._unbind();
};

function lerp(start, end, amt) {
  return (1 - amt) * start + amt * end;
}

function getTranslate(el) {
  var translate = {};
  if (!window.getComputedStyle) return;
  var style = getComputedStyle(el);
  var transform = style.transform || style.webkitTransform || style.mozTransform;
  var mat = transform.match(/^matrix3d\((.+)\)$/);

  if (mat) {
    translate.x = mat ? parseFloat(mat[1].split(', ')[12]) : 0;
    translate.y = mat ? parseFloat(mat[1].split(', ')[13]) : 0;
  } else {
    mat = transform.match(/^matrix\((.+)\)$/);
    translate.x = mat ? parseFloat(mat[1].split(', ')[4]) : 0;
    translate.y = mat ? parseFloat(mat[1].split(', ')[5]) : 0;
  }

  return translate;
}

/**
 * Returns an array containing all the parent nodes of the given node
 * @param  {object} node
 * @return {array} parent nodes
 */
function getParents(elem) {
  // Set up a parent array
  var parents = []; // Push each parent element to the array

  for (; elem && elem !== document; elem = elem.parentNode) {
    parents.push(elem);
  } // Return our parent array


  return parents;
} // https://gomakethings.com/how-to-get-the-closest-parent-element-with-a-matching-selector-using-vanilla-javascript/

/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

function LinearEasing (x) {
  return x;
}

var src$1 = function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};

var keyCodes$1 = {
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  SPACE: 32,
  TAB: 9,
  PAGEUP: 33,
  PAGEDOWN: 34,
  HOME: 36,
  END: 35
};

var _default$2 = /*#__PURE__*/function (_Core) {
  _inherits(_default, _Core);

  var _super = _createSuper(_default);

  function _default() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, _default);

    if (history.scrollRestoration) {
      history.scrollRestoration = 'manual';
    }

    window.scrollTo(0, 0);
    _this = _super.call(this, options);
    if (_this.inertia) _this.lerp = _this.inertia * 0.1;
    _this.isScrolling = false;
    _this.isDraggingScrollbar = false;
    _this.isTicking = false;
    _this.hasScrollTicking = false;
    _this.parallaxElements = {};
    _this.stop = false;
    _this.scrollbarContainer = options.scrollbarContainer;
    _this.checkKey = _this.checkKey.bind(_assertThisInitialized(_this));
    window.addEventListener('keydown', _this.checkKey, false);
    return _this;
  }

  _createClass(_default, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      this.html.classList.add(this.smoothClass);
      this.html.setAttribute("data-".concat(this.name, "-direction"), this.direction);
      this.instance = _objectSpread2({
        delta: {
          x: this.initPosition.x,
          y: this.initPosition.y
        },
        scroll: {
          x: this.initPosition.x,
          y: this.initPosition.y
        }
      }, this.instance);
      this.vs = new src({
        el: this.scrollFromAnywhere ? document : this.el,
        mouseMultiplier: navigator.platform.indexOf('Win') > -1 ? 1 : 0.4,
        firefoxMultiplier: this.firefoxMultiplier,
        touchMultiplier: this.touchMultiplier,
        useKeyboard: false,
        passive: true
      });
      this.vs.on(function (e) {
        if (_this2.stop) {
          return;
        }

        if (!_this2.isDraggingScrollbar) {
          requestAnimationFrame(function () {
            _this2.updateDelta(e);

            if (!_this2.isScrolling) _this2.startScrolling();
          });
        }
      });
      this.setScrollLimit();
      this.initScrollBar();
      this.addSections();
      this.addElements();
      this.checkScroll(true);
      this.transformElements(true, true);

      _get(_getPrototypeOf(_default.prototype), "init", this).call(this);
    }
  }, {
    key: "setScrollLimit",
    value: function setScrollLimit() {
      this.instance.limit.y = this.el.offsetHeight - this.windowHeight;

      if (this.direction === 'horizontal') {
        var totalWidth = 0;
        var nodes = this.el.children;

        for (var i = 0; i < nodes.length; i++) {
          totalWidth += nodes[i].offsetWidth;
        }

        this.instance.limit.x = totalWidth - this.windowWidth;
      }
    }
  }, {
    key: "startScrolling",
    value: function startScrolling() {
      this.startScrollTs = Date.now(); // Record timestamp

      this.isScrolling = true;
      this.checkScroll();
      this.html.classList.add(this.scrollingClass);
    }
  }, {
    key: "stopScrolling",
    value: function stopScrolling() {
      cancelAnimationFrame(this.checkScrollRaf); // Prevent checkScroll to continue looping
      //Pevent scrollbar glitch/locking

      this.startScrollTs = undefined;

      if (this.scrollToRaf) {
        cancelAnimationFrame(this.scrollToRaf);
        this.scrollToRaf = null;
      }

      this.isScrolling = false;
      this.instance.scroll.y = Math.round(this.instance.scroll.y);
      this.html.classList.remove(this.scrollingClass);
    }
  }, {
    key: "checkKey",
    value: function checkKey(e) {
      var _this3 = this;

      if (this.stop) {
        // If we are stopped, we don't want any scroll to occur because of a keypress
        // Prevent tab to scroll to activeElement
        if (e.keyCode == keyCodes$1.TAB) {
          requestAnimationFrame(function () {
            // Make sure native scroll is always at top of page
            _this3.html.scrollTop = 0;
            document.body.scrollTop = 0;
            _this3.html.scrollLeft = 0;
            document.body.scrollLeft = 0;
          });
        }

        return;
      }

      switch (e.keyCode) {
        case keyCodes$1.TAB:
          // Do not remove the RAF
          // It allows to override the browser's native scrollTo, which is essential
          requestAnimationFrame(function () {
            // Make sure native scroll is always at top of page
            _this3.html.scrollTop = 0;
            document.body.scrollTop = 0;
            _this3.html.scrollLeft = 0;
            document.body.scrollLeft = 0; // Request scrollTo on the focusedElement, putting it at the center of the screen

            _this3.scrollTo(document.activeElement, {
              offset: -window.innerHeight / 2
            });
          });
          break;

        case keyCodes$1.UP:
          if (this.isActiveElementScrollSensitive()) {
            this.instance.delta[this.directionAxis] -= 240;
          }

          break;

        case keyCodes$1.DOWN:
          if (this.isActiveElementScrollSensitive()) {
            this.instance.delta[this.directionAxis] += 240;
          }

          break;

        case keyCodes$1.PAGEUP:
          this.instance.delta[this.directionAxis] -= window.innerHeight;
          break;

        case keyCodes$1.PAGEDOWN:
          this.instance.delta[this.directionAxis] += window.innerHeight;
          break;

        case keyCodes$1.HOME:
          this.instance.delta[this.directionAxis] -= this.instance.limit[this.directionAxis];
          break;

        case keyCodes$1.END:
          this.instance.delta[this.directionAxis] += this.instance.limit[this.directionAxis];
          break;

        case keyCodes$1.SPACE:
          if (this.isActiveElementScrollSensitive()) {
            if (e.shiftKey) {
              this.instance.delta[this.directionAxis] -= window.innerHeight;
            } else {
              this.instance.delta[this.directionAxis] += window.innerHeight;
            }
          }

          break;

        default:
          return;
      }

      if (this.instance.delta[this.directionAxis] < 0) this.instance.delta[this.directionAxis] = 0;
      if (this.instance.delta[this.directionAxis] > this.instance.limit[this.directionAxis]) this.instance.delta[this.directionAxis] = this.instance.limit[this.directionAxis];
      this.stopScrolling(); // Stop any movement, allows to kill any other `scrollTo` still happening

      this.isScrolling = true;
      this.checkScroll();
      this.html.classList.add(this.scrollingClass);
    }
  }, {
    key: "isActiveElementScrollSensitive",
    value: function isActiveElementScrollSensitive() {
      return !(document.activeElement instanceof HTMLInputElement) && !(document.activeElement instanceof HTMLTextAreaElement) && !(document.activeElement instanceof HTMLButtonElement) && !(document.activeElement instanceof HTMLSelectElement);
    }
  }, {
    key: "checkScroll",
    value: function checkScroll() {
      var _this4 = this;

      var forced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (forced || this.isScrolling || this.isDraggingScrollbar) {
        if (!this.hasScrollTicking) {
          this.checkScrollRaf = requestAnimationFrame(function () {
            return _this4.checkScroll();
          });
          this.hasScrollTicking = true;
        }

        this.updateScroll();
        var distance = Math.abs(this.instance.delta[this.directionAxis] - this.instance.scroll[this.directionAxis]);
        var timeSinceStart = Date.now() - this.startScrollTs; // Get the time since the scroll was started: the scroll can be stopped again only past 100ms

        if (!this.animatingScroll && timeSinceStart > 100 && (distance < 0.5 && this.instance.delta[this.directionAxis] != 0 || distance < 0.5 && this.instance.delta[this.directionAxis] == 0)) {
          this.stopScrolling();
        }

        Object.entries(this.sections).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              i = _ref2[0],
              section = _ref2[1];

          if (section.persistent || _this4.instance.scroll[_this4.directionAxis] > section.offset[_this4.directionAxis] && _this4.instance.scroll[_this4.directionAxis] < section.limit[_this4.directionAxis]) {
            if (_this4.direction === 'horizontal') {
              _this4.transform(section.el, -_this4.instance.scroll[_this4.directionAxis], 0);
            } else {
              _this4.transform(section.el, 0, -_this4.instance.scroll[_this4.directionAxis]);
            }

            if (!section.inView) {
              section.inView = true;
              section.el.style.opacity = 1;
              section.el.style.pointerEvents = 'all';
              section.el.setAttribute("data-".concat(_this4.name, "-section-inview"), '');
            }
          } else {
            if (section.inView || forced) {
              section.inView = false;
              section.el.style.opacity = 0;
              section.el.style.pointerEvents = 'none';
              section.el.removeAttribute("data-".concat(_this4.name, "-section-inview"));
            }

            _this4.transform(section.el, 0, 0);
          }
        });

        if (this.getDirection) {
          this.addDirection();
        }

        if (this.getSpeed) {
          this.addSpeed();
          this.speedTs = Date.now();
        }

        this.detectElements();
        this.transformElements();

        if (this.hasScrollbar) {
          var scrollBarTranslation = this.instance.scroll[this.directionAxis] / this.instance.limit[this.directionAxis] * this.scrollBarLimit[this.directionAxis];

          if (this.direction === 'horizontal') {
            this.transform(this.scrollbarThumb, scrollBarTranslation, 0);
          } else {
            this.transform(this.scrollbarThumb, 0, scrollBarTranslation);
          }
        }

        _get(_getPrototypeOf(_default.prototype), "checkScroll", this).call(this);

        this.hasScrollTicking = false;
      }
    }
  }, {
    key: "resize",
    value: function resize() {
      this.windowHeight = window.innerHeight;
      this.windowWidth = window.innerWidth;
      this.checkContext();
      this.windowMiddle = {
        x: this.windowWidth / 2,
        y: this.windowHeight / 2
      };
      this.update();
    }
  }, {
    key: "updateDelta",
    value: function updateDelta(e) {
      var delta;
      var gestureDirection = this[this.context] && this[this.context].gestureDirection ? this[this.context].gestureDirection : this.gestureDirection;

      if (gestureDirection === 'both') {
        delta = e.deltaX + e.deltaY;
      } else if (gestureDirection === 'vertical') {
        delta = e.deltaY;
      } else if (gestureDirection === 'horizontal') {
        delta = e.deltaX;
      } else {
        delta = e.deltaY;
      }

      this.instance.delta[this.directionAxis] -= delta * this.multiplier;
      if (this.instance.delta[this.directionAxis] < 0) this.instance.delta[this.directionAxis] = 0;
      if (this.instance.delta[this.directionAxis] > this.instance.limit[this.directionAxis]) this.instance.delta[this.directionAxis] = this.instance.limit[this.directionAxis];
    }
  }, {
    key: "updateScroll",
    value: function updateScroll(e) {
      if (this.isScrolling || this.isDraggingScrollbar) {
        this.instance.scroll[this.directionAxis] = lerp(this.instance.scroll[this.directionAxis], this.instance.delta[this.directionAxis], this.lerp);
      } else {
        if (this.instance.scroll[this.directionAxis] > this.instance.limit[this.directionAxis]) {
          this.setScroll(this.instance.scroll[this.directionAxis], this.instance.limit[this.directionAxis]);
        } else if (this.instance.scroll.y < 0) {
          this.setScroll(this.instance.scroll[this.directionAxis], 0);
        } else {
          this.setScroll(this.instance.scroll[this.directionAxis], this.instance.delta[this.directionAxis]);
        }
      }
    }
  }, {
    key: "addDirection",
    value: function addDirection() {
      if (this.instance.delta.y > this.instance.scroll.y) {
        if (this.instance.direction !== 'down') {
          this.instance.direction = 'down';
        }
      } else if (this.instance.delta.y < this.instance.scroll.y) {
        if (this.instance.direction !== 'up') {
          this.instance.direction = 'up';
        }
      }

      if (this.instance.delta.x > this.instance.scroll.x) {
        if (this.instance.direction !== 'right') {
          this.instance.direction = 'right';
        }
      } else if (this.instance.delta.x < this.instance.scroll.x) {
        if (this.instance.direction !== 'left') {
          this.instance.direction = 'left';
        }
      }
    }
  }, {
    key: "addSpeed",
    value: function addSpeed() {
      if (this.instance.delta[this.directionAxis] != this.instance.scroll[this.directionAxis]) {
        this.instance.speed = (this.instance.delta[this.directionAxis] - this.instance.scroll[this.directionAxis]) / Math.max(1, Date.now() - this.speedTs);
      } else {
        this.instance.speed = 0;
      }
    }
  }, {
    key: "initScrollBar",
    value: function initScrollBar() {
      this.scrollbar = document.createElement('span');
      this.scrollbarThumb = document.createElement('span');
      this.scrollbar.classList.add("".concat(this.scrollbarClass));
      this.scrollbarThumb.classList.add("".concat(this.scrollbarClass, "_thumb"));
      this.scrollbar.append(this.scrollbarThumb);

      if (this.scrollbarContainer) {
        this.scrollbarContainer.append(this.scrollbar);
      } else {
        document.body.append(this.scrollbar);
      } // Scrollbar Events


      this.getScrollBar = this.getScrollBar.bind(this);
      this.releaseScrollBar = this.releaseScrollBar.bind(this);
      this.moveScrollBar = this.moveScrollBar.bind(this);
      this.scrollbarThumb.addEventListener('mousedown', this.getScrollBar);
      window.addEventListener('mouseup', this.releaseScrollBar);
      window.addEventListener('mousemove', this.moveScrollBar); // Set scrollbar values

      this.hasScrollbar = false;

      if (this.direction == 'horizontal') {
        if (this.instance.limit.x + this.windowWidth <= this.windowWidth) {
          return;
        }
      } else {
        if (this.instance.limit.y + this.windowHeight <= this.windowHeight) {
          return;
        }
      }

      this.hasScrollbar = true;
      this.scrollbarBCR = this.scrollbar.getBoundingClientRect();
      this.scrollbarHeight = this.scrollbarBCR.height;
      this.scrollbarWidth = this.scrollbarBCR.width;

      if (this.direction === 'horizontal') {
        this.scrollbarThumb.style.width = "".concat(this.scrollbarWidth * this.scrollbarWidth / (this.instance.limit.x + this.scrollbarWidth), "px");
      } else {
        this.scrollbarThumb.style.height = "".concat(this.scrollbarHeight * this.scrollbarHeight / (this.instance.limit.y + this.scrollbarHeight), "px");
      }

      this.scrollbarThumbBCR = this.scrollbarThumb.getBoundingClientRect();
      this.scrollBarLimit = {
        x: this.scrollbarWidth - this.scrollbarThumbBCR.width,
        y: this.scrollbarHeight - this.scrollbarThumbBCR.height
      };
    }
  }, {
    key: "reinitScrollBar",
    value: function reinitScrollBar() {
      this.hasScrollbar = false;

      if (this.direction == 'horizontal') {
        if (this.instance.limit.x + this.windowWidth <= this.windowWidth) {
          return;
        }
      } else {
        if (this.instance.limit.y + this.windowHeight <= this.windowHeight) {
          return;
        }
      }

      this.hasScrollbar = true;
      this.scrollbarBCR = this.scrollbar.getBoundingClientRect();
      this.scrollbarHeight = this.scrollbarBCR.height;
      this.scrollbarWidth = this.scrollbarBCR.width;

      if (this.direction === 'horizontal') {
        this.scrollbarThumb.style.width = "".concat(this.scrollbarWidth * this.scrollbarWidth / (this.instance.limit.x + this.scrollbarWidth), "px");
      } else {
        this.scrollbarThumb.style.height = "".concat(this.scrollbarHeight * this.scrollbarHeight / (this.instance.limit.y + this.scrollbarHeight), "px");
      }

      this.scrollbarThumbBCR = this.scrollbarThumb.getBoundingClientRect();
      this.scrollBarLimit = {
        x: this.scrollbarWidth - this.scrollbarThumbBCR.width,
        y: this.scrollbarHeight - this.scrollbarThumbBCR.height
      };
    }
  }, {
    key: "destroyScrollBar",
    value: function destroyScrollBar() {
      this.scrollbarThumb.removeEventListener('mousedown', this.getScrollBar);
      window.removeEventListener('mouseup', this.releaseScrollBar);
      window.removeEventListener('mousemove', this.moveScrollBar);
      this.scrollbar.remove();
    }
  }, {
    key: "getScrollBar",
    value: function getScrollBar(e) {
      this.isDraggingScrollbar = true;
      this.checkScroll();
      this.html.classList.remove(this.scrollingClass);
      this.html.classList.add(this.draggingClass);
    }
  }, {
    key: "releaseScrollBar",
    value: function releaseScrollBar(e) {
      this.isDraggingScrollbar = false;

      if (this.isScrolling) {
        this.html.classList.add(this.scrollingClass);
      }

      this.html.classList.remove(this.draggingClass);
    }
  }, {
    key: "moveScrollBar",
    value: function moveScrollBar(e) {
      var _this5 = this;

      if (this.isDraggingScrollbar) {
        requestAnimationFrame(function () {
          var x = (e.clientX - _this5.scrollbarBCR.left) * 100 / _this5.scrollbarWidth * _this5.instance.limit.x / 100;
          var y = (e.clientY - _this5.scrollbarBCR.top) * 100 / _this5.scrollbarHeight * _this5.instance.limit.y / 100;

          if (y > 0 && y < _this5.instance.limit.y) {
            _this5.instance.delta.y = y;
          }

          if (x > 0 && x < _this5.instance.limit.x) {
            _this5.instance.delta.x = x;
          }
        });
      }
    }
  }, {
    key: "addElements",
    value: function addElements() {
      var _this6 = this;

      this.els = {};
      this.parallaxElements = {}; // this.sections.forEach((section, y) => {

      var els = this.el.querySelectorAll("[data-".concat(this.name, "]"));
      els.forEach(function (el, index) {
        // Try and find the target's parent section
        var targetParents = getParents(el);
        var section = Object.entries(_this6.sections).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              section = _ref4[1];

          return section;
        }).find(function (section) {
          return targetParents.includes(section.el);
        });
        var cl = el.dataset[_this6.name + 'Class'] || _this6["class"];
        var id = typeof el.dataset[_this6.name + 'Id'] === 'string' ? el.dataset[_this6.name + 'Id'] : 'el' + index;
        var top;
        var left;
        var repeat = el.dataset[_this6.name + 'Repeat'];
        var call = el.dataset[_this6.name + 'Call'];
        var position = el.dataset[_this6.name + 'Position'];
        var delay = el.dataset[_this6.name + 'Delay'];
        var direction = el.dataset[_this6.name + 'Direction'];
        var sticky = typeof el.dataset[_this6.name + 'Sticky'] === 'string';
        var speed = el.dataset[_this6.name + 'Speed'] ? parseFloat(el.dataset[_this6.name + 'Speed']) / 10 : false;
        var offset = typeof el.dataset[_this6.name + 'Offset'] === 'string' ? el.dataset[_this6.name + 'Offset'].split(',') : _this6.offset;
        var target = el.dataset[_this6.name + 'Target'];
        var targetEl;

        if (target !== undefined) {
          targetEl = document.querySelector("".concat(target));
        } else {
          targetEl = el;
        }

        var targetElBCR = targetEl.getBoundingClientRect();

        if (section === null) {
          top = targetElBCR.top + _this6.instance.scroll.y - getTranslate(targetEl).y;
          left = targetElBCR.left + _this6.instance.scroll.x - getTranslate(targetEl).x;
        } else {
          if (!section.inView) {
            top = targetElBCR.top - getTranslate(section.el).y - getTranslate(targetEl).y;
            left = targetElBCR.left - getTranslate(section.el).x - getTranslate(targetEl).x;
          } else {
            top = targetElBCR.top + _this6.instance.scroll.y - getTranslate(targetEl).y;
            left = targetElBCR.left + _this6.instance.scroll.x - getTranslate(targetEl).x;
          }
        }

        var bottom = top + targetEl.offsetHeight;
        var right = left + targetEl.offsetWidth;
        var middle = {
          x: (right - left) / 2 + left,
          y: (bottom - top) / 2 + top
        };

        if (sticky) {
          var elBCR = el.getBoundingClientRect();
          var elTop = elBCR.top;
          var elLeft = elBCR.left;
          var elDistance = {
            x: elLeft - left,
            y: elTop - top
          };
          top += window.innerHeight;
          left += window.innerWidth;
          bottom = elTop + targetEl.offsetHeight - el.offsetHeight - elDistance[_this6.directionAxis];
          right = elLeft + targetEl.offsetWidth - el.offsetWidth - elDistance[_this6.directionAxis];
          middle = {
            x: (right - left) / 2 + left,
            y: (bottom - top) / 2 + top
          };
        }

        if (repeat == 'false') {
          repeat = false;
        } else if (repeat != undefined) {
          repeat = true;
        } else {
          repeat = _this6.repeat;
        }

        var relativeOffset = [0, 0];

        if (offset) {
          if (_this6.direction === 'horizontal') {
            for (var i = 0; i < offset.length; i++) {
              if (typeof offset[i] == 'string') {
                if (offset[i].includes('%')) {
                  relativeOffset[i] = parseInt(offset[i].replace('%', '') * _this6.windowWidth / 100);
                } else {
                  relativeOffset[i] = parseInt(offset[i]);
                }
              } else {
                relativeOffset[i] = offset[i];
              }
            }

            left = left + relativeOffset[0];
            right = right - relativeOffset[1];
          } else {
            for (var i = 0; i < offset.length; i++) {
              if (typeof offset[i] == 'string') {
                if (offset[i].includes('%')) {
                  relativeOffset[i] = parseInt(offset[i].replace('%', '') * _this6.windowHeight / 100);
                } else {
                  relativeOffset[i] = parseInt(offset[i]);
                }
              } else {
                relativeOffset[i] = offset[i];
              }
            }

            top = top + relativeOffset[0];
            bottom = bottom - relativeOffset[1];
          }
        }

        var mappedEl = {
          el: el,
          id: id,
          "class": cl,
          section: section,
          top: top,
          middle: middle,
          bottom: bottom,
          left: left,
          right: right,
          offset: offset,
          progress: 0,
          repeat: repeat,
          inView: false,
          call: call,
          speed: speed,
          delay: delay,
          position: position,
          target: targetEl,
          direction: direction,
          sticky: sticky
        };
        _this6.els[id] = mappedEl;

        if (el.classList.contains(cl)) {
          _this6.setInView(_this6.els[id], id);
        }

        if (speed !== false || sticky) {
          _this6.parallaxElements[id] = mappedEl;
        }
      }); // });
    }
  }, {
    key: "addSections",
    value: function addSections() {
      var _this7 = this;

      this.sections = {};
      var sections = this.el.querySelectorAll("[data-".concat(this.name, "-section]"));

      if (sections.length === 0) {
        sections = [this.el];
      }

      sections.forEach(function (section, index) {
        var id = typeof section.dataset[_this7.name + 'Id'] === 'string' ? section.dataset[_this7.name + 'Id'] : 'section' + index;
        var sectionBCR = section.getBoundingClientRect();
        var offset = {
          x: sectionBCR.left - window.innerWidth * 1.5 - getTranslate(section).x,
          y: sectionBCR.top - window.innerHeight * 1.5 - getTranslate(section).y
        };
        var limit = {
          x: offset.x + sectionBCR.width + window.innerWidth * 2,
          y: offset.y + sectionBCR.height + window.innerHeight * 2
        };
        var persistent = typeof section.dataset[_this7.name + 'Persistent'] === 'string';
        section.setAttribute('data-scroll-section-id', id);
        var mappedSection = {
          el: section,
          offset: offset,
          limit: limit,
          inView: false,
          persistent: persistent,
          id: id
        };
        _this7.sections[id] = mappedSection;
      });
    }
  }, {
    key: "transform",
    value: function transform(element, x, y, delay) {
      var transform;

      if (!delay) {
        transform = "matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(x, ",").concat(y, ",0,1)");
      } else {
        var start = getTranslate(element);
        var lerpX = lerp(start.x, x, delay);
        var lerpY = lerp(start.y, y, delay);
        transform = "matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(lerpX, ",").concat(lerpY, ",0,1)");
      }

      element.style.webkitTransform = transform;
      element.style.msTransform = transform;
      element.style.transform = transform;
    }
  }, {
    key: "transformElements",
    value: function transformElements(isForced) {
      var _this8 = this;

      var setAllElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var scrollRight = this.instance.scroll.x + this.windowWidth;
      var scrollBottom = this.instance.scroll.y + this.windowHeight;
      var scrollMiddle = {
        x: this.instance.scroll.x + this.windowMiddle.x,
        y: this.instance.scroll.y + this.windowMiddle.y
      };
      Object.entries(this.parallaxElements).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            i = _ref6[0],
            current = _ref6[1];

        var transformDistance = false;

        if (isForced) {
          transformDistance = 0;
        }

        if (current.inView || setAllElements) {
          switch (current.position) {
            case 'top':
              transformDistance = _this8.instance.scroll[_this8.directionAxis] * -current.speed;
              break;

            case 'elementTop':
              transformDistance = (scrollBottom - current.top) * -current.speed;
              break;

            case 'bottom':
              transformDistance = (_this8.instance.limit[_this8.directionAxis] - scrollBottom + _this8.windowHeight) * current.speed;
              break;

            case 'left':
              transformDistance = _this8.instance.scroll[_this8.directionAxis] * -current.speed;
              break;

            case 'elementLeft':
              transformDistance = (scrollRight - current.left) * -current.speed;
              break;

            case 'right':
              transformDistance = (_this8.instance.limit[_this8.directionAxis] - scrollRight + _this8.windowHeight) * current.speed;
              break;

            default:
              transformDistance = (scrollMiddle[_this8.directionAxis] - current.middle[_this8.directionAxis]) * -current.speed;
              break;
          }
        }

        if (current.sticky) {
          if (current.inView) {
            if (_this8.direction === 'horizontal') {
              transformDistance = _this8.instance.scroll.x - current.left + window.innerWidth;
            } else {
              transformDistance = _this8.instance.scroll.y - current.top + window.innerHeight;
            }
          } else {
            if (_this8.direction === 'horizontal') {
              if (_this8.instance.scroll.x < current.left - window.innerWidth && _this8.instance.scroll.x < current.left - window.innerWidth / 2) {
                transformDistance = 0;
              } else if (_this8.instance.scroll.x > current.right && _this8.instance.scroll.x > current.right + 100) {
                transformDistance = current.right - current.left + window.innerWidth;
              } else {
                transformDistance = false;
              }
            } else {
              if (_this8.instance.scroll.y < current.top - window.innerHeight && _this8.instance.scroll.y < current.top - window.innerHeight / 2) {
                transformDistance = 0;
              } else if (_this8.instance.scroll.y > current.bottom && _this8.instance.scroll.y > current.bottom + 100) {
                transformDistance = current.bottom - current.top + window.innerHeight;
              } else {
                transformDistance = false;
              }
            }
          }
        }

        if (transformDistance !== false) {
          if (current.direction === 'horizontal' || _this8.direction === 'horizontal' && current.direction !== 'vertical') {
            _this8.transform(current.el, transformDistance, 0, isForced ? false : current.delay);
          } else {
            _this8.transform(current.el, 0, transformDistance, isForced ? false : current.delay);
          }
        }
      });
    }
    /**
     * Scroll to a desired target.
     *
     * @param  Available options :
     *          target {node, string, "top", "bottom", int} - The DOM element we want to scroll to
     *          options {object} - Options object for additionnal settings.
     * @return {void}
     */

  }, {
    key: "scrollTo",
    value: function scrollTo(target) {
      var _this9 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Parse options
      var offset = parseInt(options.offset) || 0; // An offset to apply on top of given `target` or `sourceElem`'s target

      var duration = !isNaN(parseInt(options.duration)) ? parseInt(options.duration) : 1000; // Duration of the scroll animation in milliseconds

      var easing = options.easing || [0.25, 0.0, 0.35, 1.0]; // An array of 4 floats between 0 and 1 defining the bezier curve for the animation's easing. See http://greweb.me/bezier-easing-editor/example/

      var disableLerp = options.disableLerp ? true : false; // Lerp effect won't be applied if set to true

      var callback = options.callback ? options.callback : false; // function called when scrollTo completes (note that it won't wait for lerp to stabilize)

      easing = src$1.apply(void 0, _toConsumableArray(easing));

      if (typeof target === 'string') {
        // Selector or boundaries
        if (target === 'top') {
          target = 0;
        } else if (target === 'bottom') {
          target = this.instance.limit.y;
        } else if (target === 'left') {
          target = 0;
        } else if (target === 'right') {
          target = this.instance.limit.x;
        } else {
          target = document.querySelector(target); // If the query fails, abort

          if (!target) {
            return;
          }
        }
      } else if (typeof target === 'number') {
        // Absolute coordinate
        target = parseInt(target);
      } else if (target && target.tagName) ; else {
        console.warn('`target` parameter is not valid');
        return;
      } // We have a target that is not a coordinate yet, get it


      if (typeof target !== 'number') {
        // Verify the given target belongs to this scroll scope
        var targetInScope = getParents(target).includes(this.el);

        if (!targetInScope) {
          // If the target isn't inside our main element, abort any action
          return;
        } // Get target offset from top


        var targetBCR = target.getBoundingClientRect();
        var offsetTop = targetBCR.top;
        var offsetLeft = targetBCR.left; // Try and find the target's parent section

        var targetParents = getParents(target);
        var parentSection = targetParents.find(function (candidate) {
          return Object.entries(_this9.sections) // Get sections associative array as a regular array
          .map(function (_ref7) {
            var _ref8 = _slicedToArray(_ref7, 2),
                key = _ref8[0],
                section = _ref8[1];

            return section;
          }) // map to section only (we dont need the key here)
          .find(function (section) {
            return section.el == candidate;
          }); // finally find the section that matches the candidate
        });
        var parentSectionOffset = 0;

        if (parentSection) {
          parentSectionOffset = getTranslate(parentSection)[this.directionAxis]; // We got a parent section, store it's current offset to remove it later
        } else {
          // if no parent section is found we need to use instance scroll directly
          parentSectionOffset = -this.instance.scroll[this.directionAxis];
        } // Final value of scroll destination : offsetTop + (optional offset given in options) - (parent's section translate)


        if (this.direction === 'horizontal') {
          offset = offsetLeft + offset - parentSectionOffset;
        } else {
          offset = offsetTop + offset - parentSectionOffset;
        }
      } else {
        offset = target + offset;
      } // Actual scrollto
      // ==========================================================================
      // Setup


      var scrollStart = parseFloat(this.instance.delta[this.directionAxis]);
      var scrollTarget = Math.max(0, Math.min(offset, this.instance.limit[this.directionAxis])); // Make sure our target is in the scroll boundaries

      var scrollDiff = scrollTarget - scrollStart;

      var render = function render(p) {
        if (disableLerp) {
          if (_this9.direction === 'horizontal') {
            _this9.setScroll(scrollStart + scrollDiff * p, _this9.instance.delta.y);
          } else {
            _this9.setScroll(_this9.instance.delta.x, scrollStart + scrollDiff * p);
          }
        } else {
          _this9.instance.delta[_this9.directionAxis] = scrollStart + scrollDiff * p;
        }
      }; // Prepare the scroll


      this.animatingScroll = true; // This boolean allows to prevent `checkScroll()` from calling `stopScrolling` when the animation is slow (i.e. at the beginning of an EaseIn)

      this.stopScrolling(); // Stop any movement, allows to kill any other `scrollTo` still happening

      this.startScrolling(); // Restart the scroll
      // Start the animation loop

      var start = Date.now();

      var loop = function loop() {
        var p = (Date.now() - start) / duration; // Animation progress

        if (p > 1) {
          // Animation ends
          render(1);
          _this9.animatingScroll = false;
          if (duration == 0) _this9.update();
          if (callback) callback();
        } else {
          _this9.scrollToRaf = requestAnimationFrame(loop);
          render(easing(p));
        }
      };

      loop();
    }
  }, {
    key: "update",
    value: function update() {
      this.setScrollLimit();
      this.addSections();
      this.addElements();
      this.detectElements();
      this.updateScroll();
      this.transformElements(true);
      this.reinitScrollBar();
      this.checkScroll(true);
    }
  }, {
    key: "startScroll",
    value: function startScroll() {
      this.stop = false;
    }
  }, {
    key: "stopScroll",
    value: function stopScroll() {
      this.stop = true;
    }
  }, {
    key: "setScroll",
    value: function setScroll(x, y) {
      this.instance = _objectSpread2(_objectSpread2({}, this.instance), {}, {
        scroll: {
          x: x,
          y: y
        },
        delta: {
          x: x,
          y: y
        },
        speed: 0
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(_default.prototype), "destroy", this).call(this);

      this.stopScrolling();
      this.html.classList.remove(this.smoothClass);
      this.vs.destroy();
      this.destroyScrollBar();
      window.removeEventListener('keydown', this.checkKey, false);
    }
  }]);

  return _default;
}(_default);

var Smooth = /*#__PURE__*/function () {
  function Smooth() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Smooth);

    this.options = options; // Override default options with given ones

    Object.assign(this, defaults, options);
    this.smartphone = defaults.smartphone;
    if (options.smartphone) Object.assign(this.smartphone, options.smartphone);
    this.tablet = defaults.tablet;
    if (options.tablet) Object.assign(this.tablet, options.tablet);
    if (!this.smooth && this.direction == 'horizontal') console.warn('🚨 `smooth:false` & `horizontal` direction are not yet compatible');
    if (!this.tablet.smooth && this.tablet.direction == 'horizontal') console.warn('🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)');
    if (!this.smartphone.smooth && this.smartphone.direction == 'horizontal') console.warn('🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)');
    this.init();
  }

  _createClass(Smooth, [{
    key: "init",
    value: function init() {
      this.options.isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 || window.innerWidth < this.tablet.breakpoint;
      this.options.isTablet = this.options.isMobile && window.innerWidth >= this.tablet.breakpoint;

      if (this.smooth && !this.options.isMobile || this.tablet.smooth && this.options.isTablet || this.smartphone.smooth && this.options.isMobile && !this.options.isTablet) {
        this.scroll = new _default$2(this.options);
      } else {
        this.scroll = new _default$1(this.options);
      }

      this.scroll.init();

      if (window.location.hash) {
        // Get the hash without the '#' and find the matching element
        var id = window.location.hash.slice(1, window.location.hash.length);
        var target = document.getElementById(id); // If found, scroll to the element

        if (target) this.scroll.scrollTo(target);
      }
    }
  }, {
    key: "update",
    value: function update() {
      this.scroll.update();
    }
  }, {
    key: "start",
    value: function start() {
      this.scroll.startScroll();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.scroll.stopScroll();
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(target, options) {
      this.scroll.scrollTo(target, options);
    }
  }, {
    key: "setScroll",
    value: function setScroll(x, y) {
      this.scroll.setScroll(x, y);
    }
  }, {
    key: "on",
    value: function on(event, func) {
      this.scroll.setEvents(event, func);
    }
  }, {
    key: "off",
    value: function off(event, func) {
      this.scroll.unsetEvents(event, func);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.scroll.destroy();
    }
  }]);

  return Smooth;
}();

var Native = /*#__PURE__*/function () {
  function Native() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Native);

    this.options = options; // Override default options with given ones

    Object.assign(this, defaults, options);
    this.smartphone = defaults.smartphone;
    if (options.smartphone) Object.assign(this.smartphone, options.smartphone);
    this.tablet = defaults.tablet;
    if (options.tablet) Object.assign(this.tablet, options.tablet);
    this.init();
  }

  _createClass(Native, [{
    key: "init",
    value: function init() {
      this.scroll = new _default$1(this.options);
      this.scroll.init();

      if (window.location.hash) {
        // Get the hash without the '#' and find the matching element
        var id = window.location.hash.slice(1, window.location.hash.length);
        var target = document.getElementById(id); // If found, scroll to the element

        if (target) this.scroll.scrollTo(target);
      }
    }
  }, {
    key: "update",
    value: function update() {
      this.scroll.update();
    }
  }, {
    key: "start",
    value: function start() {
      this.scroll.startScroll();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.scroll.stopScroll();
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(target, options) {
      this.scroll.scrollTo(target, options);
    }
  }, {
    key: "setScroll",
    value: function setScroll(x, y) {
      this.scroll.setScroll(x, y);
    }
  }, {
    key: "on",
    value: function on(event, func) {
      this.scroll.setEvents(event, func);
    }
  }, {
    key: "off",
    value: function off(event, func) {
      this.scroll.unsetEvents(event, func);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.scroll.destroy();
    }
  }]);

  return Native;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Smooth);



/***/ }),

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_4_use_2_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[4].use[2]!../../node_modules/sass-loader/dist/cjs.js!./index.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[4].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/styles/index.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_4_use_2_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_4_use_2_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_4_use_2_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_4_use_2_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/index.scss */ "./src/styles/index.scss");
/* harmony import */ var _scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/modules/_animations */ "./src/scripts/modules/_animations.js");
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @barba/core */ "./node_modules/@barba/core/dist/barba.umd.js");
/* harmony import */ var _barba_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_barba_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var locomotive_scroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! locomotive-scroll */ "./node_modules/locomotive-scroll/dist/locomotive-scroll.esm.js");
/* harmony import */ var _scripts_inc_gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/inc/_gsap */ "./src/scripts/inc/_gsap.js");
/* harmony import */ var _scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scripts/inc/_ScrollTrigger */ "./src/scripts/inc/_ScrollTrigger.js");
/* harmony import */ var _scripts_inc_SplitText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scripts/inc/_SplitText */ "./src/scripts/inc/_SplitText.js");
/* harmony import */ var _scripts_inc_CSSPlugin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scripts/inc/_CSSPlugin */ "./src/scripts/inc/_CSSPlugin.js");








var gsapWithCSS = _scripts_inc_gsap__WEBPACK_IMPORTED_MODULE_4__.gsap.registerPlugin(_scripts_inc_CSSPlugin__WEBPACK_IMPORTED_MODULE_7__["default"], _scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger, _scripts_inc_SplitText__WEBPACK_IMPORTED_MODULE_6__.SplitText) || _scripts_inc_gsap__WEBPACK_IMPORTED_MODULE_4__.gsap,
    // to protect from tree shaking
TweenMaxWithCSS = gsapWithCSS.core.Tween;
var scroller = document.querySelector('[data-main-scroll]');
var lc = new locomotive_scroll__WEBPACK_IMPORTED_MODULE_3__["default"]({
  el: scroller,
  smooth: true,
  lerp: 0.08,
  multiplier: 0.5,
  tablet: {
    breakpoint: 1200,
    smooth: true
  }
});
window.lc = lc;
lc.on('scroll', _scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger.update);
_scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger.scrollerProxy(scroller, {
  scrollTop: function scrollTop(value) {
    return arguments.length ? lc.scrollTo(value, 0, 0) : lc.scroll.instance.scroll.y;
  },
  getBoundingClientRect: function getBoundingClientRect() {
    return {
      left: 0,
      top: 0,
      width: window.innerWidth,
      height: window.innerHeight
    };
  },
  pinType: scroller.style.transform ? "transform" : "fixed"
});
_scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger.defaults({
  scroller: scroller
});
_scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger.addEventListener('refresh', function () {
  return lc.update();
});
_scripts_inc_ScrollTrigger__WEBPACK_IMPORTED_MODULE_5__.ScrollTrigger.refresh();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.opening)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.lineReveal)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.revealFromLeft)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.revealFromRight)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.revealSimple)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.revealImage)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.bgZoom)();
(0,_scripts_modules_animations__WEBPACK_IMPORTED_MODULE_1__.lineLeft)();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,